<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端八股</title>
      <link href="/2024/08/29/interview-%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1/"/>
      <url>/2024/08/29/interview-%E5%89%8D%E7%AB%AF%E5%85%AB%E8%82%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="DOCUTYPE-作用"><a href="#DOCUTYPE-作用" class="headerlink" title="DOCUTYPE 作用"></a>DOCUTYPE 作用</h2><p><code>DOCTYPE</code>目的是告诉浏览器（解析器）应该以什么样（<code>html</code>或<code>xhtml</code>）的文档类型定义来解析文档，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。且它必须声明在 HTML ⽂档的第⼀⾏。</p><p>浏览器渲染页面的两种模式（可通过<code>document.compatMode</code>获取）：</p><ul><li><strong>CSS1Compat：标准模式（Strick mode）</strong>，默认模式，浏览器使用 W3C 的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。</li><li><strong>BackCompat：怪异模式(混杂模式)(Quick mode)</strong>，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。</li></ul><h2 id="html-语义化"><a href="#html-语义化" class="headerlink" title="html 语义化"></a>html 语义化</h2><p>语义化是指根据 <em>内容</em> 的结构化（内容语义化），选择 <em>合适的标签</em>（代码语义化）。</p><p>语义化的优点如下：</p><ul><li>增强可读性，结构清晰，便于开发与维护。</li><li>对机器友好，文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于 SEO。</li><li>方便解析，可用于智能分析</li><li>在没有 CSS 样式下，页面也能呈现很好地内容结构、代码结构</li></ul><p>常见的语义化标签：<code>header</code>、<code>nav</code>、<code>main</code>、<code>footer</code>……</p><h2 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h2><p><code>meta</code> 标签由 <code>name</code> 和 <code>content</code> 属性定义，<strong>用来描述网页文档的属性</strong>，比如网页的作者，网页描述，关键词等。</p><p>作用有：搜索引擎优化(SEO)，定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等。</p><p>meta 分类：</p><ol><li>页面描述信息（name）：常用的选项有 Keywords(关键字)，description(网站内容描述)，author(作者)，robots(机器人向导)等。</li><li>HTTP 标题信息（<code>http-equiv</code>)：可用于代替 name 项，常用的选项有 Expires(期限)，Pragma(cache 模式)，Refresh(刷新)，Set-Cookie(cookie 设定)，Window-target(显示窗口的设定)，content-Type(显示字符集的设定)等。</li><li>content 项：根据 name 项或 http-equiv 项的定义来决定此项填写什么样的字符串</li></ol><h2 id="HTML5-特性"><a href="#HTML5-特性" class="headerlink" title="HTML5 特性"></a>HTML5 特性</h2><p><strong>新增</strong>：</p><ul><li>新的选择器 document.querySelector、document.querySelectorAl!</li><li>媒体播放的 video 和 audio 标签</li><li>以前用的 flash 实现</li><li>本地存储 localStorage 和 sessionStorage</li><li>浏览器通知 Notifcations</li><li>语义化标签，例如 header，nav，footer，section，article 等标签</li><li>地理位置 Geolocation</li><li>鉴于隐私性，除非用户统一，否则不可获取用户地理位置信息</li><li>离线应用 manifest</li><li>全双工通信协议 websocket</li><li>浏览器历史对象 history</li><li>多任务处理 webworker</li><li>运行在后台的 JS，独立于其他脚本，不影响性能</li><li>拖拽相关 API</li><li>增强表单控件 url，date，time，email，calendar，search</li><li>页面可见性改变事件 visibilitychange</li><li>跨窗口通信 PostMessage</li><li>表单 FormData 对象</li><li>canvas+SVG</li></ul><p><strong>移除的元素有：</strong></p><ul><li>纯表现的元素：basefont，big，center，font, s，strike，tt，u;</li><li>对可用性产生负面影响的元素：frame，frameset，noframes；</li></ul><h2 id="src-和-href-的区别"><a href="#src-和-href-的区别" class="headerlink" title="src 和 href 的区别"></a>src 和 href 的区别</h2><p><code>src</code>和<code>href</code>都是<strong>用来引用外部的资源</strong>，它们的区别如下：</p><ul><li><strong><code>src</code>：</strong>表示对资源的引用，它指向的内容会 <em>嵌入</em> 到当前标签所在的位置。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般<code>js</code>脚本会放在页面底部。</li><li><strong><code>href</code>：</strong>表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的 <em>链接</em> 关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。</li></ul><h2 id="行内元素、块级元素、-空-void-元素"><a href="#行内元素、块级元素、-空-void-元素" class="headerlink" title="行内元素、块级元素、 空(void)元素"></a>行内元素、块级元素、 空(void)元素</h2><ul><li>行内元素有：<code>a b span img input select strong</code>； 和其它元素都在一行上</li><li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p</code>； 总在新行上开始，占据一整行</li></ul><p>空元素，即没有内容的 HTML 元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：</p><ul><li>常见的有：<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>；</li><li>鲜见的有：<code>&lt;area&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;col&gt;</code>、<code>&lt;colgroup&gt;</code>、<code>&lt;command&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;keygen&gt;</code>、<code>&lt;param&gt;</code>、<code>&lt;source&gt;</code>、<code>&lt;track&gt;</code>、<code>&lt;wbr&gt;</code>。</li></ul><p>行内元素和块级元素的转换：<code>display: block   display: inline   display: inline-block</code></p><h2 id="常见的图片格式"><a href="#常见的图片格式" class="headerlink" title="常见的图片格式"></a>常见的图片格式</h2><ol><li><code>gif</code> - 文件小，只支持 256 种颜色支持动画</li><li><code>jpg</code> - 色彩丰富，反复保存图片质量下降</li><li><code>png</code> - 无损压缩，适合 logo/icon/透明图</li><li><code>webp</code> - 有以上格式的所有优点，但浏览器兼容性相对不好</li></ol><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><p><strong>优点：</strong></p><ul><li>用来加载速度较慢的内容（如广告）</li><li>可以使脚本可以并行下载</li><li>可以实现跨子域通信</li></ul><p><strong>缺点：</strong></p><ul><li>iframe 会阻塞主页面的 onload 事件</li><li>无法被一些搜索引擎索识别</li><li>会产生很多页面，不容易管理</li></ul><h2 id="script-标签中-defer-和-async-的区别"><a href="#script-标签中-defer-和-async-的区别" class="headerlink" title="script 标签中 defer 和 async 的区别"></a>script 标签中 defer 和 async 的区别</h2><p><code>defer</code>和<code>async</code>用于在不阻塞页面文档解析的前提下，控制脚本的加载和执行。</p><p>下图可以直观的看出三者之间的区别：</p><p><img src="https://atts.w3cschool.cn/attachments/image/20220906/1662456451429876.png" alt="img"></p><p>其中蓝色代表<code>js</code>脚本网络加载时间，红色代表<code>js</code>脚本执行时间，绿色代表<code>html</code>解析。</p><p>在上述过程中，脚本文件的下载和执行是和文档解析同步的，容易造成页面卡顿影响用户体验。</p><p><strong><code>defer</code> 和 <code>async</code>属性都是去异步加载外部的<code>JS</code>脚本文件，都不会阻塞页面的解析</strong>，其区别如下：</p><ul><li><code>async</code>表示异步加载，后续文档的加载和渲染与 JS 脚本加载和执行并行进行，脚本文件一旦加载完成，会立即执行。<strong><em>无法预测每个脚本的下载和执行时间顺序，谁先下载好谁执行</em></strong></li><li><code>defer</code>表示延迟加载，后续文档的加载和 JS 脚本加载并行进行，但 JS 脚本的执行需要等待文档所有元素解析完之后，在<code>load</code>和<code>DOMContentLoaded</code>事件之前执行，有顺序。</li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS-基础"><a href="#CSS-基础" class="headerlink" title="CSS 基础"></a>CSS 基础</h2><h3 id="为什么要初始化-CSS-样式"><a href="#为什么要初始化-CSS-样式" class="headerlink" title="为什么要初始化 CSS 样式"></a>为什么要初始化 CSS 样式</h3><p>消除浏览器之间的差异，提高兼容性；提高代码质量，便于统一管理</p><h3 id="伪元素和伪类"><a href="#伪元素和伪类" class="headerlink" title="伪元素和伪类"></a>伪元素和伪类</h3><p><code>:</code>用于伪类，<code>::</code>用于伪元素。<code>:before</code>以一个子元素存在，定义的一个伪元素，只存在页面中。<br><strong>伪元素</strong>：对选择元素的 <em>指定部分</em> 进行修改样式。在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。常见的有<code>::before</code>，<code>::after</code>，<code>::first-line</code>等<br><strong>伪类</strong>：对选择元素的 <em>特殊状态</em> 进行修改样式，常见的有<code>:hover</code>，<code>:active</code>，<code>:focus</code>等</p><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><ol><li><code>px</code>：固定像素单位</li><li><code>%</code>：元素宽高随浏览器改变而改变，实现响应式，一般子元素的百分比相对于直接父元素</li><li><code>em</code>：作为<code>font-size</code>的单位时代表父元素的字体大小按比例计算值，其它则相对自身字体大小按比例计算值</li><li><code>rem</code>：CSS3 新增，相对于根元素字体大小按比例计算值</li><li><code>vw</code>：相对于视图窗口宽度<code>100vw</code> <code>vh</code>：相对于视图窗口高度<code>100vh</code> <code>vm</code></li><li><code>rpx</code>：微信小程序独有，解决屏幕自适应尺寸单位</li></ol><h3 id="block-inline-inline-block"><a href="#block-inline-inline-block" class="headerlink" title="block, inline, inline-block"></a>block, inline, inline-block</h3><p>块级元素：自动占据一行，可以设置宽高。常见的有 div，p，h1-h6，ul，li，form，table<br>行内元素：占据一行的一小部分，多个行内元素水平排版，无法设置宽高。常见的有 span，img，a<br>行内块级元素：跟行内元素类似，不过可以设置宽高。常见的有 button，img，input，select，label<br>空元素：img，br，input，link，meta</p><h3 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h3><ul><li>回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</li><li>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h2 id="定位与浮动"><a href="#定位与浮动" class="headerlink" title="定位与浮动"></a>定位与浮动</h2><h2 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h2>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目总结</title>
      <link href="/2024/08/27/interview-%E6%80%BB%E7%BB%93/"/>
      <url>/2024/08/27/interview-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>//////////////////////////////////////////////////////////////////////</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（面试官您好）我叫朱晓霞，目前是杭州电子科技大学通信工程专业研三的学生，</span><br><span class="line">在校期间，我系统学习了前端开发的相关知识，</span><br><span class="line">比较熟悉JS，且在Vue开发方面也积累了一定的实践经验。</span><br><span class="line">目前，主要参与过两个前端项目的开发。</span><br><span class="line">一个是人力资源后台管理系统，另一个是一个响应式设计的图片分享平台，</span><br><span class="line">通过这些项目实践，我掌握了组件化开发、状态管理以及前后端接口联调等核心技能。</span><br><span class="line">同时呢，为了整理和分享自己的所学知识，我基于hexo 搭建了自己的个人博客网站，</span><br><span class="line">主要记录自己学习前端的心得体会和开发中的一些日常积累。</span><br><span class="line">以上是我的一些基本情况。</span><br></pre></td></tr></table></figure><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="图享汇"><a href="#图享汇" class="headerlink" title="图享汇"></a>图享汇</h2><h3 id="1、登录注册"><a href="#1、登录注册" class="headerlink" title="1、登录注册"></a>1、登录注册</h3><h4 id="使用slideCaptcha完成滑动验证"><a href="#使用slideCaptcha完成滑动验证" class="headerlink" title="使用slideCaptcha完成滑动验证"></a>使用<code>slideCaptcha</code>完成滑动验证</h4><p>原理：将用户拖动行为的时间、精度，滑动轨迹等信息到服务器，然后进行后台算法验证。</p><p>过程：首先在人类行为验证组件完成对应<code>UI</code>样式，在组件挂载（<code>onMounted</code>）时初始化并配置一个滑动验证码（<code>sliderCaptcha</code>），并指定处理成功、失败的回调函数，在用户拼图成功这个回调中，通过调用 <code>getCaptcha</code> 方法发送行为数据给后端进行进一步的验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCaptcha &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/sys&#x27;</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  captcha = <span class="title function_">sliderCaptcha</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;captcha&#x27;</span>, <span class="comment">// 渲染位置</span></span><br><span class="line">    <span class="comment">// 用户拼图成功之后的回调</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onSuccess</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getCaptcha</span>(&#123;</span><br><span class="line">        <span class="attr">behavior</span>: arr</span><br><span class="line">        <span class="keyword">if</span> (res) &#123; <span class="comment">// 人类行为验证通过</span></span><br><span class="line">          <span class="title function_">emits</span>(<span class="variable constant_">EMITS_SUCCESS</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用户拼图失败之后的回调</span></span><br><span class="line">    <span class="title function_">onFail</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onFail&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 默认的验证方法，咱们不在此处进行验证，而是选择在用户拼图成功之后进行验证，所以此处永远返回为 true</span></span><br><span class="line">    <span class="title function_">verify</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="实现第三方QQ、微信扫码登录。"><a href="#实现第三方QQ、微信扫码登录。" class="headerlink" title="实现第三方QQ、微信扫码登录。"></a>实现第三方<code>QQ</code>、微信扫码登录。</h4><p><code>OAuth</code> 的思路：<code>OAuth</code>是一个关于授权（<code>authorization</code>）的开放网络标准。<span style="color: #bfa"><strong>应用通过引导用户在第三方平台的授权层进行登录授权，获得一个限制权限和有效时间的令牌（token），在令牌有效期内即可从第三方平台换取用户授权使用的信息</strong></span>。</p><p>客户端授权模式：授权码模式、简化模式、密码模式、客户端模式。</p><p><strong><em>授权码模式</em></strong> 是功能最完整、流程最严密的授权模式。基于授权码模式的第三方登录流程如下：</p><ol><li>用户访问应用，点击登录按钮，跳转至第三方平台的登录授权页。</li><li>用户授权成功后会跳转至应用在第三方平台设置的回调地址，并携带授权码（<code>code</code>）。</li><li>应用服务器处理从第三方平台的登录授权页跳转至回调地址产生的<code>get</code>请求并从<code>query</code>中获得授权码，使用授权码和其他信息（比如应用在第三方平台注册的<code>appId</code>和<code>appKey</code>，设置的回调地址等）向第三方平台请求访问令牌（<code>access token</code>）。</li><li>在访问令牌的有效期内，应用服务器请求第三方平台接口获取用户的身份标识（<code>openid</code>、<code>unionid</code>等）和用户授权使用的信息（比如用户昵称和头像等开放信息）。</li><li>应用服务器根据获取的用户信息，完成注册登录的逻辑并跳转至应用首页。</li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408272059929.jpg" alt=""></p><p><strong>QQ登录流程</strong>：【扫码登录之后，进入的地址为<strong>线上的回调地址</strong>，调试必须在线上进行】</p><ol><li><p>点击<code>QQ</code>登录按钮触发事件，进入第三方登录页（<code>window.open</code>）展示 <code>QQ</code> 登录二维码</p></li><li><p>获取用户信息：在执行<code>QQ</code>挂起登录时，由于<code>QQ</code>登录存在缓存，为防止下次进入时自动重新登录，在离开登录页面时，注销登录；获取当前用户唯一标识，作为判断用户是否已注册的依据，将获得的用户信息进行跨页面传输。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QQ 登录挂起</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable constant_">QC</span>.<span class="title class_">Login</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">btnId</span>: <span class="string">&#x27;qqLoginBtn&#x27;</span> <span class="comment">//插入按钮的节点id</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 登录成功之后的回调，但是需要注意，这个回调只会在《登录回调页面中被执行》</span></span><br><span class="line">    <span class="comment">// 登录存在缓存，登录成功一次之后，下次进入会自动重新登录（即：触发该方法，所以我们应该在离开登录页面时，注销登录）</span></span><br><span class="line">    <span class="function">(<span class="params">data, opts</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable constant_">QC</span>.<span class="property">Login</span>.<span class="title function_">signOut</span>() <span class="comment">// 1. 注销登录，否则在后续登录中会直接触发该回调</span></span><br><span class="line">      <span class="comment">// 2. 获取当前用户唯一标识，作为判断用户是否已注册的依据</span></span><br><span class="line">      <span class="keyword">const</span> accessToken = <span class="regexp">/access_token=((.*))&amp;expires_in/</span>.<span class="title function_">exec</span>(</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span></span><br><span class="line">      )[<span class="number">1</span>]</span><br><span class="line">      <span class="comment">// 3. 拼接请求对象</span></span><br><span class="line">      <span class="keyword">const</span> oauthObj = &#123;</span><br><span class="line">        <span class="attr">nickname</span>: data.<span class="property">nickname</span>,</span><br><span class="line">        <span class="attr">figureurl_qq_2</span>: data.<span class="property">figureurl_qq_2</span>,</span><br><span class="line">        accessToken</span><br><span class="line">      &#125;</span><br><span class="line">      broadcast.<span class="title function_">send</span>(oauthObj)<span class="comment">// 4. 完成跨页面传输</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 针对于 移动端而言：通过移动端触发 QQ 登录会展示三个页面，原页面、QQ 吊起页面、回调页面。并且移动端一个页面展示整屏内容，且无法直接通过 window.close() 关闭，所以在移动端中，我们需要在当前页面继续进行后续操作。</span></span><br><span class="line">      <span class="title function_">oauthLogin</span>(<span class="variable constant_">LOGIN_TYPE_QQ</span>, oauthObj)</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">close</span>() <span class="comment">// 5. 在 PC 端下，关闭第三方窗口</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>完成跨页面数据传输：</p></li><li><p>认证是否已注册</p></li><li><p>完成 <code>QQ</code> 对接</p></li></ol><p><strong>微信登录流程</strong>：</p><ol><li><p>通过 <strong>微信登录前置数据获取</strong> 接口，获取登录数据（比如 <code>APP ID</code>）</p></li><li><p>根据获取到的数据，拼接得到 <code>open url</code> 地址</p></li><li><p>打开该地址，展示微信登录二维码</p></li><li><p>移动端微信扫码确定登录</p></li><li><p>从当前窗口中解析 <code>window.location.search</code> 得到用户的 <code>code</code> 数据</p></li><li><p>根据 <code>appId、appSecret、code</code> 通过接口获取用户的 <code>access_token</code></p></li><li><p>根据 <code>access_token</code> 获取用户信息</p></li><li><p>通过用户信息触发 <code>oauthLogin</code> 方法</p></li></ol><h3 id="2、axios二次封装"><a href="#2、axios二次封装" class="headerlink" title="2、axios二次封装"></a>2、<code>axios</code>二次封装</h3><blockquote><p>在请求拦截器中设置接口基础地址、超时时间、登录成功后请求头携带<code>token</code>，响应拦截器做异常处理。</p></blockquote><p><strong><em>axios的使用</em></strong> ：请求方式：<code>axios.get()</code>、<code>axios.post()</code>、<code>axios(&#123;&#125;)</code></p><ul><li>get请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给后端传递的参数 ==&gt; 参数1=值&amp;参数2=值</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url?参数1=值&amp;参数2=值&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>post请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>,&#123;</span><br><span class="line">  参数<span class="number">1</span>: 值,</span><br><span class="line">  参数<span class="number">2</span>: 值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>axios(&#123;&#125;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="string">&#x27;xxxX&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post或get&#x27;</span></span><br><span class="line">  <span class="attr">params</span>:&#123;&#125;, <span class="comment">// get请求方式给后端传递的参数</span></span><br><span class="line">  <span class="attr">data</span>:&#123;&#125;, <span class="comment">// post请求方式给后端传递的参数</span></span><br><span class="line">  <span class="attr">header</span>:&#123;&#125;, <span class="comment">// 自定义请求头</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 请求时间超过timeout,则请求会被中断</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;默认为json格式数据&#x27;</span> <span class="comment">// 相应的数据类型</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><em>axios二次封装</em></strong> ：</p><blockquote><ol><li>提高代码复用性，减少代码量，减低维护难度。</li><li>统一处理一些常规的问题一劳永逸，如http错误。</li><li>拦截请求和响应，提前对数据进行处理，如获取token，修改配置项。</li></ol></blockquote><p>步骤：</p><ol><li>在src目录下创建<code>request.js</code>对axios进行二次封装，并导入axios</li><li>配置全局的一些基础配置：baseURL、timeout、header、responseType、withCredentials</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 利用axios对象的方法create,去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.<span class="title function_">create</span>(&#123; <span class="comment">// requests就是axios,只不过稍微配置一下</span></span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>, <span class="comment">// 基础地址⭐</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>, <span class="comment">// 超出时间⭐</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span> <span class="comment">// 相应的数据类型</span></span><br><span class="line">  <span class="attr">header</span>:&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;123&quot;</span>&#125;, <span class="comment">// 自定义请求头</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据node环境变量区分开发、生产环境：文件<code>.env.production</code>和<code>.env.development</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .env.production文件：</span></span><br><span class="line"><span class="variable constant_">ENV</span> = <span class="string">&#x27;production&#x27;</span> # just a flag</span><br><span class="line"><span class="variable constant_">VUE_APP_BASE_API</span> = <span class="string">&#x27;/prod-api&#x27;</span> # 基地址</span><br><span class="line"></span><br><span class="line"><span class="comment">// .env.development文件：</span></span><br><span class="line"><span class="variable constant_">ENV</span> = <span class="string">&#x27;development&#x27;</span> # just a flag</span><br><span class="line"><span class="variable constant_">VUE_APP_BASE_API</span> = <span class="string">&#x27;/api&#x27;</span> # 基地址</span><br><span class="line"></span><br><span class="line">接着在package.<span class="property">json</span>文件中修改命令配置：</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve --mode serveDwp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vue-cli-service serve --mode devDwp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build --mode production&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;vue-cli-service build --mode test&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol><li>配置请求拦截器：token、密钥的设置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器：在发请求之前，请求拦截器可以检测到,可以在请求发出去之前做一些事情</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 每次发送请求之前判断是否存在token</span></span><br><span class="line">  <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的</span></span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;store.getters.token&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error) <span class="comment">// 失败执行promise</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>配置响应拦截器：响应的统一处理</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器：包含两个函数（一个是成功返回的函数，一个是失败的返回的函数）</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// axios默认包裹了data</span></span><br><span class="line">  <span class="comment">// 判断是不是Blob</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span> <span class="keyword">instanceof</span> <span class="title class_">Blob</span>) <span class="keyword">return</span> response.<span class="property">data</span> <span class="comment">// 返回了Blob对象</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data, message, success &#125; = response.<span class="property">data</span> <span class="comment">// 默认json格式</span></span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>, message &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(message))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="title function_">async</span>(error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;token超时了&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment">// 说明token超时了，主动跳到登录页</span></span><br><span class="line">    <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/logout&#x27;</span>) <span class="comment">// 调用action 退出登录</span></span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 跳转到登录页</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// error.message</span></span><br><span class="line">  <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>, <span class="attr">message</span>: error.<span class="property">message</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3、组件封装"><a href="#3、组件封装" class="headerlink" title="3、组件封装"></a>3、组件封装</h3><blockquote><p>封装了包括瀑布流、上拉加载等通用组件，用于改善用户界面的流畅性和响应速度，提升了整体用户体验。</p><p>小红书首页布局：<strong>瀑布流和虚拟列表的结合</strong></p></blockquote><h4 id="瀑布流组件："><a href="#瀑布流组件：" class="headerlink" title="瀑布流组件："></a><strong><em>瀑布流组件：</em></strong></h4><ol><li><p>瀑布流的核心就是：通过<code>relative</code> 和<code>absolute</code>定位的方式，来控制每个 <code>item</code> 的位置</p></li><li><p>影响瀑布流高度的主要元素，通常都是<code>img</code>标签</p></li><li><p>有些服务端会返回<strong>关键<code>img</code>的高度</strong>，有些不会，所以需要分别处理：</p><ul><li>当服务端<strong>不返回</strong>高度时：需要等待 <code>img</code> 加载完成之后(预加载)，再来计算高度，然后通过得到的高度计算定位。否则则会出现高度计算不准确导致定位计算不准确的问题。</li></ul></li></ol><ul><li>当服务端<strong>返回</strong>高度时：开发者则必须利用此高度为 <code>item</code> 进行高度设定。一旦 <code>item</code>具备指定高度，那么就不需要等待 <code>img</code>加载的过程，这样效率更高，并且可以业务的逻辑会变得更加简单。</li></ul><ol><li><p>当进行响应式切换时，同样需要区分对应场景：</p><ul><li><p>当服务端<strong>不返回</strong>高度时：需要<strong>重新执行整个渲染流程</strong>，虽然会耗费一些性能，但可以最大可能的避免出现逻辑错误。让组件拥有更强的普适性。</p></li><li><p>当服务端<strong>返回</strong>高度时：同样需要重新计算<strong>列宽</strong>和<strong>定位</strong>，但因为 <code>item</code>具备明确的高度，所以可以直接拿到具体的高度，而无需重复整个渲染流程，从而可以实现更多的交互逻辑。比如：位移动画、将来的图片懒加载占位…</p></li></ul></li></ol><p>瀑布流布局的核心实现思想：</p><ol><li><strong>控制容器内每一列卡片的宽度相同</strong>（不同图片尺寸等比例缩放）</li><li>第一行卡片紧挨着排列，<strong>第二行开始采取贪心思想，每张卡片摆放到当前所有列中高度最小的一列下面</strong></li></ol><p>每个卡片<code>item</code>必须使用<code>absolute</code>绝对布局，并通过<code>top</code>和<code>left</code>来手动控制位置</p><p>通过<code>props</code>传递关键数据：数据源、唯一标识<code>key</code>、列数、列间距、行间距、是否需要预加载</p><p>计算容器宽度【<code>offsetWidth -</code>左右边距】和列宽【（容器的宽度 - 所有的列间距宽度）/ 列数】</p><p>想要计算每列的<code>left</code>、<code>top</code>，必须要拿到每个<code>item</code>的高度，才可以判断下一列的第一个<code>item</code>的位置。根据<code>pitturePreReading</code>可以分为两种情况：①需要图片预加载时：图片高度未知  ②不需要图片预加载时：图片高度已知</p><p>计算下一个<code>item</code>位置：<code>left =</code>最小高度所在的列 * (列宽 + 间距) <code>top =</code>最小高度所在列高+列间距</p><p>适配移动端：自定义列数变化<code>:column = &quot;isMobileTerminal ? 2 : 5&quot;</code>，在<strong>列宽发生变化</strong>时，重新执行计算列宽</p><p>难点：当设置<code>:picturePreReading=&quot;false&quot;</code>，不进行图片预加载时，在切换PC端和移动端时会出现图片重叠现象（图片高度计算出现错误）。出现原因：不进行图片预加载时，会直接获取当前<code>item</code>的高度，因为没有等待图片加载完成，此时的高度是不包含图片的高度，从而使整个<code>item</code>高度计算错误。</p><p>根据服务端返回的图片接口数据使用作用域插槽返回图片宽度，进而计算等比例缩放后的图片高度【计算后的图片高度 = （计算得到宽度/图片真实宽度）* 图片真实高度】。重新监听列数变换，增加图片不进行预加载的情况</p><h4 id="上拉加载："><a href="#上拉加载：" class="headerlink" title="上拉加载："></a><strong><em>上拉加载：</em></strong></h4><p>当滚动到列表底部时，加载数据</p><p>构建<code>props</code>传递<code>是否处于加载状态</code>和<code>是否全部加载完成</code>配置，加载下一页数据的触发事件，处理双向数据绑定逻辑，利用<code>vueuse</code>提供的 <a href="https://vueuse.org/core/useIntersectionObserver/">useIntersectionObserver</a> 方法，监听元素可见行为，用于判断列表滚动到底部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> laodingTarget = <span class="title function_">ref</span>(<span class="literal">null</span>) <span class="comment">// 滚动的元素</span></span><br><span class="line"><span class="title function_">useIntersectionObserver</span>(laodingTarget, <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当加载更多的视图可见时，同时 loading 为 false，同时 数据尚未全部加载完</span></span><br><span class="line">    <span class="comment">// 处理加载更多的逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(isIntersecting &amp;&amp; !loading.<span class="property">value</span> &amp;&amp; !props.<span class="property">isFinished</span>)&#123;</span><br><span class="line">        loading.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 修改加载数据标记</span></span><br><span class="line">        <span class="title function_">emits</span>(<span class="string">&#x27;onLoad&#x27;</span>) <span class="comment">// 触发加载更多行为</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4、懒加裁"><a href="#4、懒加裁" class="headerlink" title="4、懒加裁"></a>4、懒加裁</h3><blockquote><p>使用<code>uselntersectionObserver</code>和<code>AsyncComponent</code>分别实现图片和组件的懒加裁，确保首屏加载速度。</p></blockquote><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>当图片不可见时，不加载图片。当图片可见时，才去加载图片。</p><p><strong>可以监听所有图片是否被可见，如果图片处于不可见状态，那么就不加载图片，如果图片处于可见状态，那么开始加载图片。</strong>而这个功能的实现关键就是 <strong><code>IntersectionObserver</code></strong>。</p><p><code>vueuse</code>包提供的<code>useIntersectionObserver</code>方法：<code>const &#123;stop&#125; = useIntersectionObserver(target, fn, options)</code></p><ol><li><code>target</code>表示被监听的<code>DOM</code>元素</li><li>参数2是回调函数，用于通知监听的动作（回调函数的第一个形参<code>isIntersecting</code>表示被监听的元素已经进入了可视区）</li><li>参数3 表示配置选项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useIntersectionObserver <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="comment">// 处理图片懒加载</span></span><br><span class="line"><span class="comment">// 1、在元素挂载到页面中的钩子函数中、保存img的src</span></span><br><span class="line"><span class="comment">// 2、将img的src属性置为 空 或者置位默认图片</span></span><br><span class="line"><span class="comment">// 3、监听图片是否在可视范围内？ 在可视范围内将img保存在src重新复制到img上 并 取消监听</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> imgSrc = el.<span class="property">src</span> <span class="comment">// 1、拿到当前 img 标签的 src</span></span><br><span class="line">    el.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">// 2、将img的src属性置为 空 或者置位默认图片</span></span><br><span class="line">    <span class="comment">//  3、监听图片是否在可视范围内</span></span><br><span class="line">    <span class="keyword">const</span> &#123; stop &#125; = <span class="title function_">useIntersectionObserver</span>(el, <span class="function">(<span class="params">&#123; isIntersecting &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">        el.<span class="property">src</span> = imgSrc <span class="comment">// 3. 当图片可见时,加载图片</span></span><br><span class="line">        <span class="title function_">stop</span>() <span class="comment">// 4. 停止监听</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h4><p><code>defineAsyncComponent</code> 方法接收一个返回<code>Promise</code>的加载函数。这个<code>Promise</code>的 <code>resolve</code> 回调方法应该在从服务器获得组件定义时调用。也可以调用 <code>reject(reason)</code> 表明加载失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动化注册组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; confirm &#125; <span class="keyword">from</span> <span class="string">&#x27;./confirm/index&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;./message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出对象、这个对象有install方法，这样既可以通过app.use(options)来使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、获取当前路径下所有文件夹中以index.vue结尾的文件</span></span><br><span class="line">    <span class="keyword">const</span> components = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&#x27;./*/index.vue&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2、遍历获取到的组件模块：利用path生成组件名称, defineAsyncComponent生成动态组件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [path, fn] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(components)) &#123; <span class="comment">// path: ./popup/index.vue</span></span><br><span class="line">      <span class="comment">// 根据路径动态生成组件名称</span></span><br><span class="line">      <span class="keyword">const</span> componentName = <span class="string">&#x27;m-&#x27;</span> +  path.<span class="title function_">replace</span>(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="comment">// 3、利用 app.component 将生成的组件名称和对应的异步组件注册到 Vue 应用上。使用 defineAsyncComponent 包装每个组件，这样组件会在第一次被使用时才加载，实现了组件的懒加载</span></span><br><span class="line">      app.<span class="title function_">component</span>(componentName, <span class="title function_">defineAsyncComponent</span>(fn))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、防抖搜索优化"><a href="#5、防抖搜索优化" class="headerlink" title="5、防抖搜索优化"></a>5、防抖搜索优化</h3><p>对输入框搜索功能实现防抖封装，减少了频繁请求，优化了页面性能和用户体验。</p><p>防抖主要用于减少频繁触发的事件处理次数，避免资源浪费和性能问题</p><p>防抖的核心思想：当触发一个事件时，不去立刻执行，而是延迟一段时间，该事件变为等待执行事件。如果在这段时间之内，该事件被再次触发，则上次等待执行的事件取消，本次触发的事件变为等待执行事件。循环往复，直到某一个等待事件被执行为止</p><p>项目中搜索提示组件是通过 <code>watch</code> 监听输入内容的变化，所以当输入内容发生变化时，就会立刻触发 <code>getHintData</code> 事件。此时需要做防抖处理， <code>vueuse</code> 中提供了对应的 <a href="https://vueuse.org/shared/watchDebounced/">watchDebounced</a> ，可以直接利用这个 <code>API</code> 直接实现防抖的<code>watch</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; getHint &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/pexels&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; watchDebounced &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">// 监听搜索文本的变化，并获取对应提示数据</span></span><br><span class="line"><span class="title function_">watchDebounced</span>(<span class="function">() =&gt;</span> props.<span class="property">searchText</span>, getHintData, &#123;</span><br><span class="line">  <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">debounce</span>: <span class="number">500</span> <span class="comment">// 每次事件触发时，延迟的时间</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="移动端适配-响应式布局"><a href="#移动端适配-响应式布局" class="headerlink" title="移动端适配 - 响应式布局"></a>移动端适配 - 响应式布局</h3><ol><li><p><strong><em>百分比布局</em></strong>：通过百分比单位使浏览器中的组件的宽和高随着浏览器的变化而变化</p><ul><li><p><code>height</code>、<code>width</code>属性的百分比依托于父标签的宽高。但是<code>padding</code>、<code>border</code>、<code>margin</code>等属性的情况又不一样</p></li><li><p>1、子元素的<code>top</code>和<code>bottom</code>如果设置百分比，则相对于直接非<code>static</code>定位（默认定位）的父元素的高度，同样，子元素的<code>left</code>和<code>right</code>如果设置百分比，则相对于直接非<code>static</code>定位（默认定位的）父元素的宽度。<br>2、子元素的<code>padding</code>和<code>margin</code>如果设置百分比，不论是垂直方向或者是水平方向都相对于直接父亲元素的<code>width</code>，而与父元素的<code>height</code>无关。</p></li><li><p><code>border-radius</code>为百分比，则是相对于自身的宽度</p></li><li><p><strong>缺点：</strong>计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位</p></li></ul></li><li><p><strong><em>媒体查询布局</em></strong>：通过<code>@media</code>媒体查询，给不同屏幕的大小编写不同的样式来实现。</p><ul><li>缺点：如果浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</li></ul></li><li><p><strong><em><code>rem</code>布局</em></strong>： <code>rem</code> 是<code>CSS3</code>新增的一个相对单位，<em>1rem = 16px</em> </p><ul><li><p><code>rem</code>是相对于<code>html</code>根元素的字体大小的单位。</p></li><li><p>通过修改<code>html</code>中<code>font-size</code>的字体大小来控制<code>rem</code>的大小。</p></li></ul></li><li><p><strong><em><code>vw</code>、<code>vh</code>响应式布局</em></strong>：<code>vw</code>和<code>vh</code>分别相对的是视图窗口的宽度和高度。</p><ul><li><code>100vw = 100%</code>视图窗口宽度 ，<code>100vh = 100%</code> 视图窗口高度</li></ul></li><li><p><strong><em><code>flex</code>弹性布局</em></strong>：只需要依赖于<code>CSS</code>样式的实现响应式布局的方式</p><ol><li>父元素：常用的弹性布局的属性<ul><li><code>flex-direction</code> ：水平方向对齐方式（<code>wrap\wrap-reverse\colume\colume</code>）</li><li><code>flex-wrap</code> ：是否换行</li><li><code>justify-content</code> ： 水平方向对齐方式</li><li><code>align-items</code> ：控制子元素在垂直方向上的对齐方式</li><li><code>align-content</code>：垂直方向的对齐方式</li></ul></li><li>子元素：常用的弹性布局的属性<ul><li><code>order</code>：排序，给元素指定不同数值，数值越大越靠后</li><li><code>flex-grow</code>： 对容器剩余空间，按指定比例放大元素填充容器</li><li><code>flex-shrink</code>：对超出容器空间按数值比例收缩填充</li><li><code>flex-basis</code>：指定元素在主轴（水平）方向上的初始大小</li><li><code>align-self</code>：控制单个元素在交叉轴（垂直）上的对齐</li></ul></li></ol></li></ol><p>项目中使用的是<strong><code>flex + rem</code></strong>响应式布局的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首次加载成功时设置html跟标签的fontSize属性值；最大基准值为40px</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useREM</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">MAX_FONT_SIZE</span> = <span class="number">40</span> <span class="comment">// 最大基准值</span></span><br><span class="line">  <span class="comment">// 当文档被解析成功时调用</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置屏幕基准值的标准为 屏幕的宽度 / 10</span></span><br><span class="line">    <span class="keyword">const</span> fontSize = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="number">10</span></span><br><span class="line">    html.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="title class_">Math</span>.<span class="title function_">min</span>(fontSize, <span class="variable constant_">MAX_FONT_SIZE</span>) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="人力资源后台项目"><a href="#人力资源后台项目" class="headerlink" title="人力资源后台项目"></a>人力资源后台项目</h2><h3 id="1、权限"><a href="#1、权限" class="headerlink" title="1、权限"></a>1、权限</h3><blockquote><p>使用<code>vue-router</code>配置路由切换视图，在权限模块中基于<code>RBAC</code>权限模型实现动态添加路由规则，完成不同角色的权限分配。（员工 - 角色 - 权限）</p></blockquote><p>权限管理就是让不同的用户只能访问自己权限内的资源，有以下几种</p><ul><li>路由权限，用户登录后只能看到自己权限内的导航菜单，且只能访问自己权限内的路由地址</li><li>视图权限，用户只能看到自己权限内的内容和按钮</li><li>请求权限，越权请求将其拦截</li></ul><p><strong>权限管理</strong>：接口权限、按钮权限、菜单权限、路由权限</p><ul><li><strong>接口权限</strong></li></ul><p>用户登录成功拿到<code>token</code>，将<code>token</code>存起来，通过<code>axios</code>请求拦截器进行拦截，请求头要携带<code>token</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = cookie.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;,&#123;response&#125;=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">203</span>) &#123; <span class="comment">//token过期或者错误</span></span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>路由权限</strong></li></ul><p><strong>方法1</strong>：在路由初始化的时候挂载全部路由，在路由上标记相应的权限信息，当路由跳转的时候做校验。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/home&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;homePage&#x27;</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;主页&#x27;</span>,</span><br><span class="line">        <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;editor&#x27;</span>] <span class="comment">//权限</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>缺点：</p><ul><li>会加载所有的路由，当路由很多的时候，对性能会有影响；</li><li>每次路由跳转都要做权限判断；</li><li>菜单信息写在前端，需要修改标题的时候，需要重新编译；</li><li>菜单跟路由耦合在一起，路由不一定作为菜单显示，还要多加字段进行标识</li></ul><p><strong>方法2：项目</strong>：初始化的时候先挂载静态（不需要权限控制的）路由，比如登录页，404页。如果用户通过URL进行强制访问，会直接进入404。登录后，获取用户的权限信息，然后筛选有权限访问的路由，在全局路由守卫里进行调用<code>addRoutes</code>添加路由（⭐）</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028328.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拆分静态路由和动态路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态路由：没有权限的页面，所有角色都可以进入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="comment">// 登录页</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="comment">// 404页</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 首页</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// &#123; path: &#x27;*&#x27;, redirect: &#x27;/404&#x27;, hidden: true &#125;// 404 页必须放在末尾 !!!</span></span><br><span class="line">]</span><br><span class="line"><span class="comment">// 动态路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoutes = [</span><br><span class="line">  departmentRouter,</span><br><span class="line">  roleRouter,</span><br><span class="line">  employeeRouter,</span><br><span class="line">  permissionRouter,</span><br><span class="line">  attendanceRouter,</span><br><span class="line">  approvalRouter,</span><br><span class="line">  salaryRouter,</span><br><span class="line">  socialRouter</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createRouter</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="comment">// mode: &#x27;history&#x27;, // 需要服务支持</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="attr">routes</span>: constantRoutes <span class="comment">// 默认引入静态路由</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newRouter = <span class="title function_">createRouter</span>()</span><br><span class="line">  router.<span class="property">matcher</span> = newRouter.<span class="property">matcher</span> <span class="comment">// 重置路由</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>使用<code>addRoutes</code>动态挂载路由：应用初始化的时候先挂载不需要权限控制的路由，比如登录页，404 页。登录成功后，获取用户资料的权限信息（vuex），然后筛选有权限访问的路由(asyncRoutes.filter)，再在全局路由守卫里调用addRoutes添加路由。</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028370.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; asyncRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置守卫</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/404&#x27;</span>] <span class="comment">// 白名单：不需要token也能访问</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  nprogress.<span class="title function_">start</span>() <span class="comment">// 开启进度条nprogress</span></span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123; <span class="comment">// 存在token</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123; <span class="comment">// 跳转到主页 </span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// 主页</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>() <span class="comment">//next（地址）并没有执行后置守卫，需手动关闭进度条</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//////// 重点代码 ////////////////////////////////////////////////////</span></span><br><span class="line">      <span class="keyword">if</span> (!store.<span class="property">getters</span>.<span class="property">userId</span>) &#123; <span class="comment">// 判断是否获取过用户资料</span></span><br><span class="line">        <span class="keyword">const</span> &#123; roles &#125; = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/getUserInfo&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> filterRoutes = asyncRoutes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> roles.<span class="property">menus</span>.<span class="title function_">includes</span>(item.<span class="property">name</span>)</span><br><span class="line">        &#125;) <span class="comment">// 筛选后的路由，filter返回一个布尔值</span></span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;user/setRoutes&#x27;</span>, filterRoutes)<span class="comment">//将筛选后的路由添加到vuex</span></span><br><span class="line">        router.<span class="title function_">addRoutes</span>([...filterRoutes, &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;]) <span class="comment">// 添加动态路由信息到路由表</span></span><br><span class="line">        <span class="title function_">next</span>(to.<span class="property">path</span>) <span class="comment">// router添加动态路由之后,需要转发一下,目的是让路由拥有信息(router的已知缺陷)</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">// 放过</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">/////// 重点代码 ///////////////////////////////////////////////////////  </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 中转到登录页</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  nprogress.<span class="title function_">done</span>() <span class="comment">// 关闭进度条</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按需挂载，路由就需要知道用户的路由权限，也就是在用户登录进来的时候就要知道当前用户拥有哪些路由权限</p><p><em>缺点</em> ：① 全局路由守卫里，每次路由跳转都要做判断     ② 菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译     ③ 菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识</p><ul><li><strong>菜单权限</strong></li></ul><p>用户登录之后服务端返回一个数据，这个数据有菜单列表和<code>token</code>，我们把这个数据放入到<code>vuex</code>中，然后主页根据<code>vuex</code>中的数据进行菜单列表的渲染（⭐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">在vuex用户模块添加路由信息state，筛选路由后提交mutation更新state，渲染左侧菜单</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="title function_">getToken</span>(), <span class="comment">// 从缓存中读取初始值</span></span><br><span class="line">  <span class="attr">userInfo</span>: &#123;&#125;, <span class="comment">// 存储用户基本资料状态</span></span><br><span class="line">  <span class="attr">routes</span>: constantRoutes <span class="comment">// 静态路由的数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="title function_">setRoutes</span>(<span class="params">state, newRoutes</span>) &#123;</span><br><span class="line">    state.<span class="property">routes</span> = [...constantRoutes, ...newRoutes] <span class="comment">// 静态路由 + 动态路由</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;user/setRoutes&#x27;</span>, filterRoutes)<span class="comment">//将筛选后的路由添加到vuex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染左侧菜单</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  .......</span><br><span class="line">  <span class="attr">routes</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">routes</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">SidebarItem</span>, <span class="title class_">Logo</span> &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([</span><br><span class="line">      <span class="string">&#x27;sidebar&#x27;</span>, <span class="string">&#x27;routes&#x27;</span></span><br><span class="line">    ]),</span><br><span class="line">    <span class="comment">// 路由信息的计算属性</span></span><br><span class="line">    <span class="comment">// routes() &#123;</span></span><br><span class="line">    <span class="comment">//   // 返回所有的路由信息</span></span><br><span class="line">    <span class="comment">//   return this.$router.options.routes</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案1：菜单与路由分离，菜单由后端返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name字段都不为空，需要根据此字段与后端返回菜单做关联，后端返回的菜单信息中必须要有name对应的字段，并且做唯一性校验</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/pages/Login.vue&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">每次路由跳转的时候都要判断权限，这里的判断也很简单，因为菜单的name与路由的name是对应的，后端返回的菜单就已经是经过权限过滤的。若根据路由name找不到对应的菜单，就表示用户有没权限访问。</span><br><span class="line"></span><br><span class="line">如果路由很多，可以在应用初始化的时候，只挂载不需要权限控制的路由。取得后端返回的菜单后，根据菜单与路由的对应关系，筛选出可访问的路由，通过addRoutes动态挂载（路由权限方法<span class="number">2</span>）</span><br><span class="line"></span><br><span class="line">这种方式的缺点：</span><br><span class="line">菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用</span><br><span class="line">全局路由守卫里，每次路由跳转都要做判断</span><br></pre></td></tr></table></figure><p>方案2：菜单和路由都由后端返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端统一定义路由组件：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../pages/Home.vue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserInfo</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&quot;../pages/UserInfo.vue&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">home</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="title class_">UserInfo</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端路由组件返回以下格式：</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&quot;home&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/userinfo&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&quot;userInfo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">在将后端返回路由通过addRoutes动态挂载之间，需要将数据处理一下，将component字段换为真正的组件</span><br><span class="line">如果有嵌套路由，后端功能设计的时候，要注意添加相应的字段，前端拿到数据也要做相应的处理</span><br><span class="line"></span><br><span class="line">这种方法也会存在缺点：全局路由守卫里，每次路由跳转都要做判断；前后端的配合要求更高</span><br></pre></td></tr></table></figure><ul><li><strong>按钮权限</strong></li></ul><p>方案1：用<code>v-if</code>判断。但如果页面过多，每个页面页面都要获取用户权限<code>role</code>和路由表里的<code>meta.btnPermissions</code>，然后再做判断。</p><p>方案2：通过自定义指令进行按钮权限的判断（⭐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装自定义指令 用来控制操作权</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;permission&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 会在指令作用的元素插入到页面完成以后触发</span></span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el) <span class="comment">// el 指令作用的元素的dom对象</span></span><br><span class="line">    <span class="keyword">const</span> points = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">userInfo</span>?.<span class="property">roles</span>?.<span class="property">points</span> || [] <span class="comment">// 当前用户信息的操作权</span></span><br><span class="line">    <span class="keyword">if</span> (!points.<span class="title function_">includes</span>(binding.<span class="property">value</span>))&#123; <span class="comment">// 不存在就要删除或者禁用</span></span><br><span class="line">      el.<span class="title function_">remove</span>() <span class="comment">// 删除元素</span></span><br><span class="line">      <span class="comment">// el.disabled = true</span></span><br><span class="line">      <span class="comment">// 线上的权限数据和线下的代码进行对应</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用自定义指令</span></span><br><span class="line">&lt;el-button v-permission=<span class="string">&quot;&#x27;add-employee&#x27;&quot;</span> size=<span class="string">&quot;mini&quot;</span> type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;$router.push(&#x27;/employee/detail&#x27;)&quot;</span>&gt;</span><br><span class="line">  添加员工</span><br><span class="line">&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h3 id="2、vuex管理"><a href="#2、vuex管理" class="headerlink" title="2、vuex管理"></a>2、<code>vuex</code>管理</h3><blockquote><p>在<code>vuex</code>中对<code>token</code>进行管理，将用户的<code>token</code>状态共享，实现后续高效目方便的读取。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">项目登录流程：表单校验通过 --&gt; 调用<span class="title class_">Vuex</span>提供的登录的action --&gt; 登录的<span class="title class_">Action</span>中会调用接口 --&gt; 登录接口如果成功执行，会返回token --&gt; 利用<span class="title class_">Vuex</span>特性，将token共享的到<span class="title class_">Vuex</span>中，这样直接通过 <span class="title class_">Vuex</span> 就可以登录接口会调用单独封装的请求模块(api) --&gt; 请求模块中又会使用用到 axios 封装的请求工具 --&gt; 而请求工具又要考虑区分 开发环境和生产环境的问题 --&gt; 请求时还要考虑前后分离项目产生的跨域问题，要使用代理解决跨域</span><br><span class="line"><span class="title class_">Vuex</span>中声明用户信息状态，修改用户信息的mutations， 和获取用户信息的action</span><br><span class="line">实现token的<span class="title class_">Vue</span>数据持久化</span><br><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; login, getUserInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resetRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="title function_">getToken</span>(), <span class="comment">// 从缓存中读取初始值</span></span><br><span class="line">  <span class="attr">userInfo</span>: &#123;&#125;, <span class="comment">// 存储用户基本资料状态</span></span><br><span class="line">  <span class="attr">routes</span>: constantRoutes <span class="comment">// 静态路由的数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">setToken</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">    state.<span class="property">token</span> = token</span><br><span class="line">    <span class="title function_">setToken</span>(token) <span class="comment">// 同步到缓存</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">removeToken</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    state.<span class="property">token</span> = <span class="literal">null</span> <span class="comment">// 删除Vuex的token</span></span><br><span class="line">    <span class="title function_">removeToken</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setUserInfo</span>(<span class="params">state, userInfo</span>) &#123;</span><br><span class="line">    state.<span class="property">userInfo</span> = userInfo</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setRoutes</span>(<span class="params">state, newRoutes</span>) &#123;</span><br><span class="line">    state.<span class="property">routes</span> = [...constantRoutes, ...newRoutes] <span class="comment">// 静态路由 + 动态路由</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">context, data</span>) &#123;<span class="comment">// context上下文，传入参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="comment">// todo: 调用登录接口</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="title function_">login</span>(data)</span><br><span class="line">    <span class="comment">// 返回一个token 123456</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setToken&#x27;</span>, token)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUserInfo</span>(<span class="params">context</span>) &#123;<span class="comment">// 获取用户的基本资料</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>()</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, result)</span><br><span class="line">    <span class="keyword">return</span> result <span class="comment">// 返回数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// token失效响应拦截器异常，会调用退出登录action</span></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params">context</span>) &#123; <span class="comment">// 退出登录的action</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;removeToken&#x27;</span>) <span class="comment">// 删除token</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, &#123;&#125;) <span class="comment">// 设置用户信息为空对象</span></span><br><span class="line">    <span class="title function_">resetRouter</span>()<span class="comment">// 重置路由</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">用户信息不同于token，token是当前用户的唯一标识，在几个小时内都是有效的，但是用户信息可能会进行修改或者发生变化，所以用户信息在一般的项目或者业务中不进行缓存。</span><br></pre></td></tr></table></figure><h3 id="3、excel导入导出"><a href="#3、excel导入导出" class="headerlink" title="3、excel导入导出"></a>3、<code>excel</code>导入导出</h3><blockquote><p>使用FileSaver.js第三方库实现员工信息excel文件的导入导出。</p></blockquote><ul><li>员工管理 - excel导出</li></ul><p>导出员工接口返回的是二进制流，axios配置responseType为blob接收二进制流文件为Blob格式。安装file-saver包，实现下载Blob文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>封装导出员工excel的<span class="variable constant_">API</span></span><br><span class="line"><span class="comment">// 导出员工的excel</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exportEmployee</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/export&#x27;</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span> <span class="comment">// 改变接收数据的类型：使用blob接收二进制文件流</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>拦截器判断是不是blob类型，如果是直接返回数据，不再进行解构</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// axios默认包裹了data，判断是不是Blob</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span> <span class="keyword">instanceof</span> <span class="title class_">Blob</span>) <span class="keyword">return</span> response.<span class="property">data</span> <span class="comment">// 返回了Blob对象</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data, message, success &#125; = response.<span class="property">data</span> <span class="comment">// 默认json格式</span></span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>, message &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(message))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>点击按钮调用接口，使用file-saver将blob转化成文件下载</span><br><span class="line">&lt;el-button size=<span class="string">&quot;mini&quot;</span> @click=<span class="string">&quot;exportEmployee&quot;</span>&gt;excel导出&lt;/el-button&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileSaver</span> <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; exportEmployee &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/employee&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">exportEmployee</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">exportEmployee</span>() <span class="comment">// 导出所有的员工接口</span></span><br><span class="line">  <span class="comment">// FileSaver.saveAs(blob对象, 文件名称)</span></span><br><span class="line">  <span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(result, <span class="string">&#x27;员工信息表.xlsx&#x27;</span>) <span class="comment">// 下载文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>员工管理 - excel导入</li></ul><p><code>创建组件 --&gt; 点击按钮弹出组件 --&gt; 下载模板、上传excel、拖拽上传 --&gt; 导入成功、取消 --&gt; 关闭并重新加载、关闭</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>下载导入模板：调用下载模板接口 --&gt; 接收二进制blob --&gt; 下载文件</span><br><span class="line"><span class="comment">// 下载员工导入模版api</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getExportTemplate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/import/template&#x27;</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span> <span class="comment">// 二进制文件流</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击按钮进行下载模板</span></span><br><span class="line">&lt;el-button type=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;getTemplate&quot;</span>&gt;下载导入模板&lt;/el-button&gt;</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getTemplate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getExportTemplate</span>()</span><br><span class="line">  <span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(data, <span class="string">&#x27;员工导入模版.xlsx&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>上传excel：弹出文件选择框 --&gt; 文件选择 --&gt; 调用上传接口 --&gt; 成功 --&gt; 重新加载数据-关闭弹窗 --&gt; 清空文件选择器</span><br><span class="line"><span class="comment">// 1、封装上传excel的API：上传用户的excel</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">uploadExcel</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/import&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data <span class="comment">// form-data类型 因为要上传文件类型</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2、点击上传-弹出文件选择框</span></span><br><span class="line">&lt;el-button type=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;handleUpload&quot;</span>&gt;点击上传&lt;/el-button&gt;</span><br><span class="line"><span class="title function_">handleUpload</span>(<span class="params"></span>) &#123; <span class="comment">// 触发文件选择框的input的输入框，绑定ref值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;excel-upload-input&#x27;</span>].<span class="title function_">click</span>() <span class="comment">// this.$refs.属性名 和 this.$refs[属性名] 等价</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 3、监听文件改变-上传excel-关闭弹层</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">ref</span>=<span class="string">&quot;excel-upload-input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">class</span>=<span class="string">&quot;excel-upload-input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">accept</span>=<span class="string">&quot;.xlsx, .xls&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  @<span class="attr">change</span>=<span class="string">&quot;uploadChange&quot;</span> // ⭐</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">async uploadChange(event) &#123; // event.target.files[0]内为excel文件</span></span><br><span class="line"><span class="language-xml">  // 调用上传接口：uploadExcel() 中参数form-data 需要文件file</span></span><br><span class="line"><span class="language-xml">  const files = event.target.files // 文件选择框的input的文件列表</span></span><br><span class="line"><span class="language-xml">  if (files.length &gt; 0) &#123;// 大于0 说明有文件要上传</span></span><br><span class="line"><span class="language-xml">    const data = new FormData()</span></span><br><span class="line"><span class="language-xml">    data.append(&#x27;file&#x27;, files[0]) // file: file类型，将文件参数加入到formData中</span></span><br><span class="line"><span class="language-xml">    try &#123;</span></span><br><span class="line"><span class="language-xml">      await uploadExcel(data)</span></span><br><span class="line"><span class="language-xml">      this.$emit(&#x27;uploadSuccess&#x27;) // 通知父组件上传成功 -&gt; 重新加载数据</span></span><br><span class="line"><span class="language-xml">      this.$emit(&#x27;update:showExcelDialog&#x27;, false) // 关闭弹层</span></span><br><span class="line"><span class="language-xml">      // this.$refs[&#x27;excel-upload-input&#x27;].value = &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">    &#125; catch (error) &#123;// 捕获失败</span></span><br><span class="line"><span class="language-xml">      // this.$refs[&#x27;excel-upload-input&#x27;].value = &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">    &#125; finally &#123;</span></span><br><span class="line"><span class="language-xml">      // 不论成功或者失败都会执行finally，所以在这里执行清空文件选择器操作</span></span><br><span class="line"><span class="language-xml">      this.$refs[&#x27;excel-upload-input&#x27;].value = &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">// 4、父组件需要监听上传成功的事件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">import-excel</span> <span class="attr">:show-excel-dialog.sync</span>=<span class="string">&quot;showExcelDialog&quot;</span> @<span class="attr">uploadSuccess</span>=<span class="string">&quot;getEmployeeList&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="4、递归列表转树"><a href="#4、递归列表转树" class="headerlink" title="4、递归列表转树"></a>4、递归列表转树</h3><blockquote><p>使用递归算法将组织架构的树形组件中的列表型结构转换为树形结构。</p></blockquote><p>树形组件-用层级结构展示信息，可展开或折叠，<code>element-ui</code>提供了树组件<a href="https://element.eleme.cn/#/zh-CN/component/tree">el-tree</a>的应用</p><p>default-expand-all (默认展开所有节点)</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013813.png" alt=""></p><ol><li>首先分析数据的关联关系（部门id是子部门的pid）</li><li>封装递归函数根据关联关系转化层级结构</li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013695.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、获取组织架构数据：① 封装获取组织的<span class="variable constant_">API</span>   ② 在组织架构初始化时调用方法</span><br><span class="line"><span class="comment">// 封装获取组织的API</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="comment">// 获取组织架构数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getDepartment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company/department&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在组织架构初始化时调用方法</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; getDepartment &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/department&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Department&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  &#123;</span><br><span class="line">      <span class="attr">depts</span>: [],</span><br><span class="line">      <span class="attr">defaultProps</span>: &#123;</span><br><span class="line">        <span class="attr">children</span>: <span class="string">&#x27;children&#x27;</span>, <span class="comment">// 设置子节点的字段名</span></span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;name&#x27;</span> <span class="comment">// 设置显示内容的字段名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getDepartment</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="keyword">async</span> <span class="title function_">getDepartment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getDepartment</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">depts</span> = result</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、递归转化树形结构</span><br><span class="line"><span class="comment">// 封装方法：列表型数据转化树形</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">transListToTreeData</span>(<span class="params">list, rootValue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> === rootValue) &#123;<span class="comment">// 找到了匹配的节点</span></span><br><span class="line">      <span class="comment">// 当前节点的id 和 当前节点的子节点的pid是想等的</span></span><br><span class="line">      <span class="keyword">const</span> children = <span class="title function_">transListToTreeData</span>(list, item.<span class="property">id</span>) <span class="comment">// 找到的节点的子节点⭐</span></span><br><span class="line">      item.<span class="property">children</span> = children  <span class="comment">// 将子节点赋值给当前节点</span></span><br><span class="line">      arr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取完的组织数据使用转化方法转化成树形</span></span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getDepartment</span>() <span class="comment">// 调用获取数据的接口</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getDepartment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getDepartment</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">depts</span> = <span class="title function_">transListToTreeData</span>(result, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归特点：① 一般用来处理未知层级的数据      ② 递归要有跳出条件     ③ 自身调用自身时参数不能重复</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>熟悉使用JavaScript、ES6 新特性</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是指有权访问另一个函数作用域中变量的函数</p><p>形成闭包的原因：<strong>内部的函数存在外部作用域的引用就会导致闭包</strong>。</p><p>闭包的作用：保护函数的私有变量不受外部的干扰。形成不销毁的栈内存。保存，把一些函数内的值保存下来。闭包可以实现方法和属性的私有化</p><p>原型链</p><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>熟悉使用 HTML、CSS 等技术，掌握 HTML5、CSS3 新特性，弹性盒子布局模式等前端Web开发技术</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h1 id="计算机基础与网络"><a href="#计算机基础与网络" class="headerlink" title="计算机基础与网络"></a>计算机基础与网络</h1><h1 id="Webpack与vite"><a href="#Webpack与vite" class="headerlink" title="Webpack与vite"></a>Webpack与vite</h1><p>了解webpack、vite 打包工具、依赖包管理器npm，了解基本配置</p><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秋招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/2024/08/23/frontEnd-nodejs/"/>
      <url>/2024/08/23/frontEnd-nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基本语法</title>
      <link href="/2024/08/23/frontEnd-JavaScript/"/>
      <url>/2024/08/23/frontEnd-JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JS基本语法"><a href="#JS基本语法" class="headerlink" title="JS基本语法"></a>JS基本语法</h1><h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a><code>JavaScript</code>介绍</h2><p><code>JavaScript</code> 是一种轻量级的脚本语言。所谓”脚本语言”，指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序的”脚本”。<br><code>JavaScript</code> 是一种嵌入式（<code>embedded</code>）语言。本身提供的核心语法不算很多</p><p><strong>JavaScript与ECMAScript的关系</strong><br><code>ECMAScript（ES6）</code>和<code>JavaScript</code>的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ol><li><code>JS</code>中严格区分大小写；</li><li><code>JS</code>中每一条语句以分号（；）结尾；<ul><li>如果不写分号，浏览器会自动添加，但是会消耗一些系统资源，而且有些时候，浏览器会加错分号，所以在开发中分号必须写。</li></ul></li><li><code>JS</code>中会忽略多个空格和换行，所以可以利用空格和换行对代码进行格式化。</li></ol><h2 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h2><p>字面量：都是一些 <strong><em>不可改变</em></strong> 的值。比如：1 2 3 4 5</p><ul><li>字面量都是可以直接使用，但是一般都不会直接使用字面量</li></ul><p>变量：变量可以用来 <strong><em>保存字面量</em></strong> ，而且变量的值是可以任意 <strong><em>改变</em></strong> 的。</p><ul><li>变量更加方便使用，所以在开发中都是通过变量去保存一个字面量，而很少直接使用字面量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在js中使用var关键字来声明变量</span></span><br><span class="line"><span class="keyword">var</span> a;         <span class="comment">// 声明变量</span></span><br><span class="line">a = <span class="number">123</span>;       <span class="comment">// 为变量赋值</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">234</span>;   <span class="comment">// 声明和赋值同时进行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>在JS中所有的可以自主命名的都可以称为是标识符。例如：变量名、函数名、属性名都属于标识符。</p><p>命名一个标识符时需要遵守如下的规则：</p><ol><li>标识符中可以含有字母、数字、_、$</li><li>标识符不能以数字开头</li><li>标识符不能是ES中的关键字或保留字</li><li>标识符一般都采用驼峰命名法：<ul><li>首字母小写，每个单词的开头字母大写，其余字母小写。<code>helloWorld  xxxYyyZzz</code></li></ul></li></ol><p><code>JS</code>底层保存标识符时实际上是采用的<code>Unicode</code>编码，所以，理论上讲,所有的<code>utf-8</code>中含有的内容都可以作为标识符</p><h2 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h2><p>指的就是字面量的类型。在<code>JS</code>中共有 <strong><em>六种</em></strong> 数据类型：</p><ol><li>基本数据类型：<ol><li><code>String</code>    字符串</li><li><code>Number</code>   数值</li><li><code>Boolean</code>   布尔值</li><li><code>Null</code>   空值</li><li><code>Undefined</code>  未定义</li></ol></li><li>引用数据类型：<code>Object</code>   对象</li></ol><h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a><code>String</code>字符串</h3><p>在<code>JS</code>中字符串需要使用引号引起来，使用双引号或单引号都可以，但是不要混着用，且引号也不能嵌套。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str = <span class="string">&quot;单&#x27;双&#x27;引号&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><p>在字符串中可以使用 <code>\</code>作为<strong><em>转义字符</em></strong> ，当表示一些特殊符号时可以使用 <code>\</code>进行转义</p><ol><li><code>\&quot;</code>表示 <code>&quot;</code></li><li><code>\&#39;</code>  表示 <code>&#39;</code></li><li><code>\n</code>  表示 换行</li><li><code>\t</code>  表示 制表符</li><li>`\ `   表示 \</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;子曰：\&quot;学而不思\n则罔\&quot;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">str = <span class="string">&quot;\\\\\\&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;str&quot;</span>); <span class="comment">// 输出字面量 字符串str</span></span><br><span class="line"><span class="title function_">alert</span>(str);   <span class="comment">// 输出变量str \\\</span></span><br></pre></td></tr></table></figure><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a><code>Number</code>类型</h3><p>在<code>JS</code>中所有的数值都是<code>Number</code>类型，包括整数和浮点数（小数）。</p><p>可以使用一个运算符<code>typeof</code>，来检查一个变量的类型语法：<code>typeof</code>  变量</p><ul><li>检查字符串时，会返回<code>string</code></li><li>检查数值时，会返回<code>number</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;123&quot;</span>; <span class="comment">// 字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 结果：&quot;123&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 结果：&quot;123&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b); <span class="comment">// 结果：&quot;string&quot;</span></span><br></pre></td></tr></table></figure><p><code>JS</code>中可以表示的数字的<span style="color: #ED7D31;">最大值</span>：<code>Number. MAX_VALUE → 1.7976931348623157e+308</code></p><ul><li>如果使用<code>Number</code>表示的数字超过了最大值，则会返回一个<code>Infinity</code></li><li><code>Infinity</code>表示正无穷，<code>-Infinity</code>表示负无穷。</li><li>使用<code>typeof</code>检查<code>Infinity</code>时，也会返回<code>number</code></li></ul><p>数字的<span style="color: #ED7D31;">最小值</span>：<code>Number. MIN_VALUE  （大于0的最小值） → 5e-324</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>*<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 结果:&quot;Infinity&quot;</span></span><br><span class="line">c = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 结果：&quot;Number&quot;</span></span><br></pre></td></tr></table></figure><p><span style="color: #4472c4"><code>NaN</code></span>是一个特殊的数字，表示<code>Not A Number</code>。使用<code>typeof时也会返回</code>number`。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">&quot;abc&quot;</span> * <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 结果：NaN</span></span><br><span class="line">C = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 结果：&quot;Number&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Boolean-布尔值"><a href="#Boolean-布尔值" class="headerlink" title="Boolean 布尔值"></a><code>Boolean</code> 布尔值</h3><p>布尔值只有两个（true，false），主要用来做逻辑判断。 </p><h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a><code>Null</code>类型</h3><p><code>Null</code>类型的值只有一个，就是null。（空值）用来表示一个为空的对象</p><p>使用<code>typeof</code>检查一个<code>null</code>值时，会返回<code>object</code>。</p><h3 id="Undefined未定义类型"><a href="#Undefined未定义类型" class="headerlink" title="Undefined未定义类型"></a><code>Undefined</code>未定义类型</h3><p>值只有一个，就<code>undefind</code>。</p><p>当声明一个变量，但是并不给变量赋值时，它的值就是<code>undefined</code>。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>指将一个数据类型强制转换为其他的数据类型。类型转换主要指，将其他的数据类型，转换为<code>String Number Boolean</code></p><p>① 将其他的数据类型转换为 <span style="color: #4472c4"><strong><em>String</em></strong> </span>：</p><p>方式一：调用被转换数据类型的<code>toString()</code>方法</p><ul><li>该方法不会影响到原变量，它会将转换的结果返回</li><li>但是注意：<code>null</code>和<code>undefined</code>这两个值没有<code>toString()</code>方法，如果调用他们的方法，会报错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 调用a的toString()方法</span></span><br><span class="line">a = a.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); <span class="comment">// String</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure><p>方式二：调用<code>String()</code>函数，并将被转换的数据作为参数传递给函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span>;</span><br><span class="line">a = <span class="title class_">String</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); <span class="comment">//String</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//&quot;123&quot;</span></span><br></pre></td></tr></table></figure><p>使用<code>String()</code>函数做强制类型转换时，对于<code>Number</code>和<code>Boolean</code>实际上就是调用的<code>toString()</code>方法。但是对于<code>null</code>和<code>undefined</code>，就不会调用<code>toString()</code>方法，它会将<code>null</code>直接转换为”null”，将<code>undefined</code>直接转换为“undefined”。</p><p>② 将其他数据类型转换为 <span style="color: #4472c4"><strong><em>Number</em></strong></span></p><p>方式一：使用 <strong><em>Number()</em></strong> 函数</p><ul><li>字符串 —&gt; 数字<ol><li>如果是纯数字的字符串，则直接将其转换为数字</li><li>如果字符串中有非数字的内容，则转换为<code>NaN</code></li><li>如果字符串是一个空串或者是一个全是空格的字符串，则转换为0</li></ol></li><li>布尔 —&gt; 数字     <code>true</code>转成<code>1</code>     <code>false</code>转成<code>0</code></li><li>null —&gt; 数字       <code>0</code></li><li>undefined —&gt; 数字     <code>NaN</code></li></ul><p>方式二：专门用于字符串</p><ul><li><code>parseInt()</code> 把一个字符串中有效的整数内容转换变成<code>Number</code>类型。例，`112px1 → 112``</li><li><code>`parseFloat()</code>与<code>parseInt()</code>类似，但它可以获得有效的小数位。例，<code>1.2p24 → 1.2</code></li><li>如果对非<code>String</code>使用<code>parseInt()</code>或<code>parseFloat()</code>它会先将其转换为<code>String</code>，然后再操作</li></ul><p>③ 将其他的数据类型转换为 <span style="color: #4472c4"><strong><em>Boolean</em></strong></span>：使用<code>Boolean()</code>函数</p><ul><li>数字<code>→ Boolean</code>：除了<code>0</code>和<code>NaN</code>，其余的都是<code>true</code></li><li>字符串<code>→ Boolean</code>：除了空的字符串（<code>a=&quot;&quot;</code>），其余的都是<code>true</code></li><li><code>null</code>和<code>undefined</code>都会转换为<code>false</code>，对象<code>object</code>会转换为<code>true</code></li></ul><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><ul><li>如果需要表示<code>16</code>进制的数字，则需要以<code>0x</code>开头</li><li>如果需要表示<code>8</code>进制的数字，则需要以<code>0</code>开头</li><li>如果要要表示<code>2</code>进制的数字，则需要以<code>0b</code>开头，但不是所有的浏览器都支持</li></ul><p>像<code>070</code>这种字符串转换成<code>Number</code>类型，有些浏览器会当成<code>8</code>进制解析，有些会当成<code>10</code>进制解析。可以在<code>parseInt()</code>中传递一个第二个参数，来指定数字的进制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;070&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a,<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//&quot;70&quot;</span></span><br></pre></td></tr></table></figure><h2 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h2><p>运算符也叫操作符。通过运算符可以对一个或多个值进行运算，并获取运算结果。比如： <code>typeof</code>就是运算符，可以来获得一个值的类型，它会将该值的类型以字符串的形式返回。<code>Number  String  Boolean  Undefined  Object</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">typeof</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//&quot;Number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> result); <span class="comment">//&quot;String&quot;</span></span><br></pre></td></tr></table></figure><h3 id="算数运算符（-、-、-、-、-）"><a href="#算数运算符（-、-、-、-、-）" class="headerlink" title="算数运算符（+、-、*、\、%）"></a>算数运算符（+、-、*、\、%）</h3><ul><li>当对非<code>Number</code>类型的值进行运算时，会将这些值类型转换为<code>Number</code>然后再运算（除字符串加法）</li><li>任何值和<code>NaN</code>做运算都得<code>NaN</code></li></ul><p><span style="color: #ED7D31;"><code>+</code></span>可以对两个值进行加法运算，并将结果返回。</p><ol><li>如果对两个字符串进行加法运算，则会做拼串，会将两个字符串拼接为一个字符串，并返回。例，<code>&quot;你&quot;+&quot;好&quot;</code>，结果为<code>&quot;你好&quot;</code></li><li>任何的值和字符串做加法运算，都会先转换为字符串，然后再和字符串做拼串的操作。例，<code>123+&quot;1&quot;</code>，结果为<code>&quot;1231&quot;</code></li></ol><p><span style="color: #ED7D31;"><code>-</code></span>减法  <span style="color: #ED7D31;"><code>*</code></span>乘法  <span style="color: #ED7D31;"><code>\</code></span>除法，都会先转换为<code>Number</code>然后再运算 </p><p><span style="color: #ED7D31;"> <code>%</code></span>取余数</p><h3 id="一元运算符：只需要一个操作数"><a href="#一元运算符：只需要一个操作数" class="headerlink" title="一元运算符：只需要一个操作数"></a>一元运算符：只需要一个操作数</h3><ul><li><code>+</code>正号：对数字无影响，</li><li><code>-</code>负号：对数字取反。例，<code>a = -a</code></li></ul><h3 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h3><ul><li><p>自增＋+</p><ol><li>通过自增可以使变量在自身的基础上增加<code>1</code></li><li>对于一个变量自增以后，原变量的值会立即自增<code>1</code></li><li>自增分成两种：后<code>++</code>（<code>a++</code>）和前<code>++</code>（<code>++a</code>）<ol><li>无论是<code>a++</code>还是<code>++a</code>，都会立即使原变量的值自增<code>1</code>，不同的是<code>a++</code>和<code>＋+a</code>的值不同</li><li><strong>a++的值等于原变量的值</strong>（先赋值后加）</li><li><strong>++a的值等于原变量新值</strong>（先加后赋值）</li></ol></li></ol></li><li><p>自减—</p><ol><li>通过自减可以使变量在自身的基础上减少<code>1</code></li><li>对于一个变量自减以后，原变量的值会立即自减<code>1</code></li><li>自减分成两种：后<code>--</code>（<code>a--</code>）和前<code>--</code>（<code>--a</code>）<ol><li>无论是<code>a--</code>还是<code>--a</code>，都会立即使原变量的值自减<code>1</code>，不同的是<code>a--</code>和<code>--a</code>的值不同</li><li><code>a--</code>的值等于原变量的值（<strong>先赋值后减</strong>）</li><li><code>--a</code>的值等于原变量新值（<strong>先减后赋值</strong>）</li></ol></li></ol></li></ul><h3 id="逻辑运算符（！、-amp-amp-、-）"><a href="#逻辑运算符（！、-amp-amp-、-）" class="headerlink" title="逻辑运算符（！、&amp;&amp;、||）"></a>逻辑运算符（<code>！、&amp;&amp;、||</code>）</h3><ul><li><span style="color: #4472c4"><code>！</code> 非</span></li></ul><p>用来对一个值进行 <strong><em>非</em></strong> 运算，所谓非运算就是值对一个布尔值进行 <strong><em>取反</em></strong> 操作，<code>true</code>变<code>false</code>，<code>false</code>变<code>true</code>。如果对一个值进行两次取反，它不会变化。</p><p>如果对非布尔值进行运算，则会 <strong><em>将其转换为布尔值</em></strong> ，然后 <strong><em>再取反</em></strong> 。所以可以利用该特点，来将一个其他的数据类型转换为布尔值可以为一个任意数据类型取两次反，来将其转换为布尔值，原理和<code>Boolean()</code>函数一样</p><ul><li><span style="color: #4472c4"><code>&amp;&amp;</code> 与</span></li></ul><p>两个值中只要有一个值为<code>false</code>，就返回<code>false</code>；只有两个值都为<code>true</code>时，才会返回<code>true</code>。</p><ul><li><span style="color: #4472c4"> <code>||</code> 或</span></li></ul><p>两个值中只要有一个值为<code>true</code>，就返回<code>true</code>；只有两个值都为<code>false</code>时，才会返回<code>false</code>。</p><ul><li>对于<span style="color: #ED7D31;">非布尔值</span>进行<strong>与或</strong>运算时，会先将其转换为布尔值，然后再运算，并且返回原值。<ol><li>与运算：<ul><li>如果第一个值为<code>true</code>，则必然返回第二个值</li><li>如果第一个值为<code>false</code>，则直接返回第一个值</li></ul></li><li>或运算：<ul><li>如果第一个值为<code>true</code>，则直接返回第一个值</li><li>如果第一个值为<code>false</code>，则返回第二个值</li></ul></li></ol></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><code>=</code>       将符号右侧的值赋值给符号左侧的变量</li><li><code>+=</code>    <code>a += 5</code>等价于<code>a = a+ 5</code></li><li><code>-=</code>    <code>a -= 5</code>等价于<code>a = a - 5</code></li><li><code>*=</code>    <code>a *= 5</code>等价于<code>a = a* 5</code></li><li><code>/=</code>    <code>a /= 5</code>等价于<code>a = a / 5</code></li><li><code>%=</code>    <code>a %= 5</code>等价于<code>a = a % 5</code></li></ul><h3 id="关系运算符（-gt-、-gt-、-lt-、-lt-）"><a href="#关系运算符（-gt-、-gt-、-lt-、-lt-）" class="headerlink" title="关系运算符（&gt;、&gt;=、&lt;、&lt;=）"></a>关系运算符（<code>&gt;、&gt;=、&lt;、&lt;=</code>）</h3><p>通过关系运算符可以比较两个值之间的大小关系，如果关系成立它会返回<code>true</code>，如果关系不成立则返回<code>false</code></p><ul><li>非数值情况：非数值进行比较时，会将其转换为数字再比较。</li><li>如果符号两侧都是字符串，不会将其转换为数字进行比较，而会分别比较字符串中的<code>Unicode</code>编码，比较<span style="color: #ED7D31;">字符编码</span>时是一位一位进行比较，如果两位一样，则比较下一位。</li><li>如果比较的两个字符串型的数字，可能会得到不可预期的结果</li><li>注意：在比较两个字符串型的数字时，一定一定一定要转型</li></ul><h3 id="相等运算符（-、-、-、-）"><a href="#相等运算符（-、-、-、-）" class="headerlink" title="相等运算符（==、===、!=、!==）"></a>相等运算符（<code>==、===、!=、!==</code>）</h3><p><span style="color: #ED7D31;"><code>==</code></span><strong>相等</strong>运算符，比较两个值是否相等。如果相等返回<code>true</code>，不等则返回<code>false</code>。</p><ul><li>使用相等运算符比较两个不同类型的值时，它会将其转换为相同的类型(通常转换为数值），然后再比较类型转换后值相同也会返回<code>true</code></li><li><code>null</code>和<code>undefined</code>进行相等比较时会返回<code>true</code></li><li><code>NaN</code>不和任何值相等，包括它自身</li></ul><p><span style="color: #ED7D31;"><code>===</code></span><strong>全等</strong>运算符，用来比较两个值是否全等                  <span style="color: red;"><code>！！！！</code>常用</span></p><ul><li>它<span style="color: #ED7D31;"><strong>不会进行自动的类型转换</strong></span>，如果两个值的类型不同直接返回<code>false</code></li><li><code>null</code>和<code>undefined</code>进行全等比较时会返回<code>false</code></li></ul><p><span style="color: #ED7D31;"><code>!=</code></span>   <strong>不等</strong>，用来检查两个值是否不相等。<strong>会</strong>自动的进行类型转换</p><p><span style="color: #ED7D31;"><code>!==</code></span>   <strong>不全等</strong>，比较两个值是否不全等。<strong>不会</strong>自动的类型转换       <span style="color: red;"><code>！！！！</code>常用</span></p><h3 id="条件运算符（三元运算符）"><a href="#条件运算符（三元运算符）" class="headerlink" title="条件运算符（三元运算符）"></a>条件运算符（三元运算符）</h3><p>​              <strong><em>条件表达式 ？</em></strong> <strong><em>表达式1 : 表达式2</em></strong></p><p>执行顺序：条件运算符在执行时，会先对条件表达式进行求值判断，</p><p>如果结果为<code>true</code>，则执行表达式<code>1</code>；如果结果为<code>false</code>，则执行表达式<code>2</code>。</p><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>优先级越高越先执行，优先级一样自左向右执行，优先级不需要记忆，因为（）拥有最高的优先级，使用运算符时，如果遇到拿不准的，可以直接通过（）来改变优先级即可。</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>使用<code>&#123;&#125;</code>来创建代码块，代码块可以用来对代码进行分组，同一个代码中的代码，就是同一组代码，一个代码块中的代码要么都执行要么都不执行。</p><p><strong><code>let</code>和 <code>var</code></strong>：</p><ul><li>使用<code>let</code>声明的变量具有块作用域，在代码块中声明的变量无法在代码块的外部访问</li><li>使用<code>var</code>声明的变量，不具有块作用域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)        <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)         <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="流程控制语句："><a href="#流程控制语句：" class="headerlink" title="流程控制语句："></a>流程控制语句：</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><code>if</code>语句</h3><p>流程控制语句可以用来改变程序执行的顺序：条件判断语句 → 条件分支语句 → 循环语句</p><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>执行流程：</em></strong></p><p>先对<code>if</code>后的条件表达式进行求值判断，如果结果为<code>true</code>，则执行<code>if</code>后的语句；如果为<code>false</code>则不执行。如果<code>if</code>后的添加表达式不是布尔值，会转换为布尔值然后再运算</p><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a><code>if-else</code>语句</h3><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>执行流程：</em></strong></p><p>先对条件表达式进行求值判断，若结果为<code>true</code>则执行<code>if</code>后的语句；若结果为<code>false</code>则执行<code>else</code>后的语句。</p><h3 id="if-else-if-else语句"><a href="#if-else-if-else语句" class="headerlink" title="if-else if-else语句"></a><code>if-else if-else</code>语句</h3><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>执行流程：</em></strong></p><p><code>if-else if-else</code>语句，会自上向下依次对<code>if</code>后的条件表达式进行求值判断，如果条件表达式结果为<code>true</code>，则执行当前<code>if</code>后的语句，执行完毕语句结束；如果结果为<code>false</code>，则继续向下判断，直到找到<code>true</code>为止；如果所有的结果都是<code>false</code>，则执行<code>else</code>后的语句。</p><h3 id="witch语句"><a href="#witch语句" class="headerlink" title="witch语句"></a><code>witch</code>语句</h3><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 表达式<span class="number">1</span>：</span><br><span class="line">代码...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> 表达式<span class="number">2</span>：</span><br><span class="line">代码...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> 表达式<span class="number">3</span>：</span><br><span class="line">代码...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> 表达式<span class="number">4</span>：</span><br><span class="line">代码…</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    代码…</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>执行流程：</em></strong></p><p>执行时，会依次将<code>switch</code>和<code>case</code>后的表达式进行全等比较，若结果为<code>true</code>，则自当前<code>case</code>处开始执行代码；若结果为<code>false</code>，则继续比较其他<code>case</code>后的表达式，直到找到<code>true</code>为至；若所有比较都是<code>false</code>，则执行<code>default</code>后的语句。</p><p><strong><em>注意</em></strong>：当比较结果为<code>true</code>时，会从当前<code>case</code>处开始执行代码，也就是说<code>case</code>是代码执行的起始位置，这就意味着只要是当前<code>case</code>后的代码，<strong>都会执行</strong>。可以<span style="color: #4472c4">使用<code>break</code></span>来避免执行其他的<code>case</code>。</p><h2 id="循环语句："><a href="#循环语句：" class="headerlink" title="循环语句："></a>循环语句：</h2><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a><code>while</code>语句</h3><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>执行流程：</em></strong></p><p><code>while</code>语句在执行时，会先对条件表达式进行判断。如果结果为<code>true</code>，则执行循环体，执行完毕；继续判断，如果为<code>true</code>，则再次执行循环体，执行完毕；继续判断，如此重复。直到条件表达式结果为<code>false</code>时，循环结束。</p><p>当一个循环的条件表达式恒为<code>true</code>时，这个循环就是一个<span style="color: #4472c4">死循环</span>，会一直执行（慎用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习:假设银行存款的年利率为5%，问1000块存多少年可以变成5000块</span></span><br><span class="line"><span class="keyword">var</span> money = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(money &lt; <span class="number">5000</span>)&#123;</span><br><span class="line">  money *= <span class="number">1.05</span>; <span class="comment">// money + money*0.05</span></span><br><span class="line">  year++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`1000块存<span class="subst">$&#123;year&#125;</span>年可以变到<span class="subst">$&#123;money&#125;</span>块`</span>)<span class="comment">// 1000块存33年后可以变成5003.18854203379块</span></span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a><code>do-while</code>循环</h3><p><strong><em>语法：</em></strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;<span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure><p><strong><em>执行顺序：</em></strong></p><p>执行时，会先执行<code>do</code>后的循环体，执行完毕后，对<code>while</code>后的条件表达式进行判断，如果为<code>false</code>，则循环终止；如果为<code>true</code>，则继续执行循环体，以此类推。</p><p>和while的<strong><em>\</em>区别**</strong>：while语句是先判断再执行，do-while语句是先执行再判断。</p><p>Ø 实质的区别：do-while语句可以确保循环<strong><em>\</em>至少执行一次**</strong></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h3><p><code>for</code>循环和<code>while</code>没有本质区别，都是用来反复执行代码。不同点就是语法结构，for循环更加清晰。</p><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(①初始化表达式; ②条件表达式; ③更新表达式) &#123;</span><br><span class="line">④语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>执行流程：</em></strong></p><ol><li>执行初始化表达式，初始化变量</li><li>执行条件表达式，判断循环是否执行(<code>true</code>执行，<code>false</code>终止)</li><li>判断结果为<code>true</code>，则执行循环体</li><li>执行更新表达式，对初始化变量进行修改</li><li>重复<code>2</code>，直到判断为<code>false</code>为止</li></ol><ul><li>初始化表达式，在循环的整个的生命周期中只会执行1次</li><li><code>for</code>循环中的三个表达式都可以省略   <code>for(; ; ) &#123; &#125;</code>死循环</li><li>使用<code>let</code>在<code>for</code>循环的<code>()</code>中声明的变量是局部变量，只能在<code>for</code>循环内部访问</li><li>使用<code>var</code>在<code>for</code>循环的<code>()</code>中声明的变量可以在<code>for</code>循环的外部访问</li><li>死循环：<code>while(1) &#123;&#125;</code>         <code>for(; ;) &#123;&#125;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for练习: 求100以,内所有3的倍数(求它们的个数和总和)</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> count =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i &lt; <span class="number">100</span>; i++)&#123;<span class="comment">// for(i=3; i &lt; 100; i+=3)&#123;count++;sum += sum&#125;</span></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">3</span> === <span class="number">0</span>)&#123;</span><br><span class="line">count++;</span><br><span class="line">sum = i + sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(个数为:$&#123;count&#125;);<span class="comment">//33</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`总和为:<span class="subst">$&#123;sum&#125;</span>`</span>);<span class="comment">//1683</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for练习2: 求1008以内的水仙花数</span></span><br><span class="line"><span class="comment">// 水仙花数: 一个n位数(n &gt;= 3)，且它各个位上数字的n次幂之和还等于这个类</span></span><br><span class="line"><span class="comment">// 例如: 153 --&gt;153 --&gt;1+125 + 27 = 153</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line"><span class="keyword">var</span> bai = <span class="built_in">parseInt</span>(i / <span class="number">100</span>)</span><br><span class="line"><span class="keyword">var</span> shi = <span class="built_in">parseInt</span>((i-bai*<span class="number">100</span>)/<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ge = i % <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span>(bai**<span class="number">3</span> + shi**<span class="number">3</span> + ge**<span class="number">3</span> === i)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 153 370 371 407</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for练习3: 获职用户输入的大于1的整数(暂时不考虑输错的情况)</span></span><br><span class="line"><span class="comment">// 然后编写代码检查这个数字是否是质数，并打印结果</span></span><br><span class="line"><span class="comment">// 质数:只能被1和数本身整除</span></span><br><span class="line"><span class="keyword">var</span> a= +<span class="title function_">prompt</span>(<span class="string">&quot;请输入大于1的整数:”);</span></span><br><span class="line"><span class="string">var flag = true // 判断</span></span><br><span class="line"><span class="string">for(var i = 2; i &lt; a; i++)&#123;</span></span><br><span class="line"><span class="string">if(a % i === θ)&#123;</span></span><br><span class="line"><span class="string">flag = false</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if(flag === true)&#123;</span></span><br><span class="line"><span class="string">alert(`$&#123;a&#125;是质数`)</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">alert(`$&#123;a&#125;不是质数`)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>当在网页打印图形时，外层循环为<strong><em>高度</em></strong>（横向），内层循环为<strong><em>宽度</em></strong>（纵向）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环嵌套练习1: 在网页中打印99乘法表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt; i + <span class="number">1</span>; j+)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;span&gt;<span class="subst">$&#123;j&#125;</span> * <span class="subst">$&#123;i&#125;</span> = <span class="subst">$&#123;i*j&#125;</span> &lt;/span&gt;`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环嵌套练习2: 求100以内所有的质数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; i; j+)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % j === <span class="number">0</span>)&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(flag ==- <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break-和continue"><a href="#break-和continue" class="headerlink" title="break 和continue"></a><code>break</code> 和<code>continue</code></h3><p><code>break</code>：</p><ul><li>用来终止<code>switch</code>和循环语句</li><li>执行后，当前的<code>switch</code>或循环会立刻停止（终止离它最近的循环）</li></ul><p><code>continue</code>：用来跳过当次循环</p><h2 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h2><p>数据类型：</p><ul><li><p>原始值：只能用来表示一些简单的数据，不能表示复杂数据</p><ol><li>数值<code>Number</code></li><li>大整数<code>BigInt</code></li><li>字符串<code>String</code></li><li>布尔值<code>Boolean</code></li><li>空值<code>Null</code></li><li>未定义<code>Undefined</code></li><li>符号<code>Symbol</code></li></ol></li><li><p>对象：<code>JS</code>中的一种复合数据类型，相当于容器，可以在其中存储各种不同类型数据。</p></li></ul><p>对象中可以存储多个各种类型的数据。对象中存储的数据，我们称为属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>() <span class="comment">// 创建对象</span></span><br></pre></td></tr></table></figure><p>向对象中添加属性：<code>对象.属性名 = 属性值</code>    <code>对象[&quot;属性名&quot;] = 属性值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Yeri&quot;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="string">&quot;25&quot;</span></span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&quot;女&quot;</span></span><br></pre></td></tr></table></figure><p>读取对象中的属性：<code>对象.属性名</code>。如果读取的是一个对象中没有的属性，不会报错而是返回<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span></span><br></pre></td></tr></table></figure><h3 id="属性名"><a href="#属性名" class="headerlink" title="属性名"></a>属性名</h3><p>通常属性名就是一个字符串，所以属性名可以是任何值，没有什么特殊要求。但如果属性名太特殊了，不能直接使用，需要使用<code>[]</code>来设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">&quot;12324@#$%%&quot;</span>] = <span class="string">&quot;hehe&quot;</span><span class="comment">//不建议使用</span></span><br></pre></td></tr></table></figure><p>也可以使用符号（<code>symbol</code>）作为属性名，来添加属性；获取时，也必须使用<code>symbol</code>。使用<code>symbol</code>添加的属性，通常是那些不希望被外界访问的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> newSymbol = <span class="title class_">Symbol</span>()</span><br><span class="line">obj[mySymbol] = <span class="string">&quot;通过symbol添加的属性&quot;</span> <span class="comment">// 使用symbol作为属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[mySymbol])</span><br></pre></td></tr></table></figure><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><p>对象的属性可以是任意的数据类型，也可以是一个对象。例如，<code>obj.f = Object()</code>    <code>obj.f.name = &quot;Yeri&quot;</code></p><p><code>in</code>运算符：用来检查对象中是否含有某个属性，返回<code>true/false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj)</span><br></pre></td></tr></table></figure><h3 id="对象的字面量"><a href="#对象的字面量" class="headerlink" title="对象的字面量"></a>对象的字面量</h3><p>可以直接使用<code>&#123;&#125;</code>得来创建对象。使用得所创建的对象，可以直接向对象中添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>()   ===    <span class="keyword">let</span> obj  = &#123;<span class="attr">name</span>:<span class="string">&quot;Y&quot;</span>,<span class="attr">age</span>:<span class="number">25</span>,gender：<span class="string">&quot;女&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举属性："><a href="#枚举属性：" class="headerlink" title="枚举属性："></a>枚举属性：</h2><p>指将对象中的所有的属性全部获取</p><h3 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for-in语句"></a><code>for-in</code>语句</h3><p><strong><em>语法</em></strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> propName <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for-in</code>的循环体会执行多次，有几个属性就会执行几次。每次执行时，都会将一个属性名赋值给所定义的变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;IU&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">31</span>,</span><br><span class="line">  <span class="attr">gender</span>:<span class="string">&quot;女&quot;</span>,</span><br><span class="line">  <span class="attr">address</span>:<span class="string">&quot;Seoul&quot;</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>()]:<span class="string">&quot;测试的属性&quot;</span> <span class="comment">// 符号添加的属性不能枚举</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> propName <span class="keyword">in</span> object)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(propName, object[propName]) <span class="comment">// name IU  age 31  gender 女  address Seoul</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：并不是所有的属性都可以枚举，比如使用符号添加的属性</p><h2 id="可变类型："><a href="#可变类型：" class="headerlink" title="可变类型："></a>可变类型：</h2><p><strong><em>原始值</em></strong> 都属于<strong><em>不可变类型</em></strong>，一旦创建就无法修改，在内存中不会创建重复的原始值。</p><p><strong>对象属于可变类型：</strong></p><ul><li>对象创建完成后，可以任意的添加删除修改对象中的属性</li><li>注意：当对两个对象进行相等或全等比较时，比较的是对象的内存地址</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>()</span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title class_">Object</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 === obj3) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果有两个变量同时指向一个对象，通过一个变量修改对象时，对另外一个变量也会产生影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj4 = obj</span><br><span class="line">obj4.<span class="property">name</span> = <span class="string">&quot;joy&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj&quot;</span>, obj) <span class="comment">// name:&#x27;joy&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj4&quot;</span>, obj4) <span class="comment">// name:&#x27;joy&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4 === obj) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="修改对象"><a href="#修改对象" class="headerlink" title="修改对象"></a>修改对象</h3><p> 修改对象时，如果有其他变量指向该对象，则所有指向该对象的变量都会收到影响</p><h3 id="修改变量"><a href="#修改变量" class="headerlink" title="修改变量"></a>修改变量</h3><p>修改变量时，只会影响当前的变量。在使用变量存储对象时，很容易因为改变变量指向的对象，提高代码的复杂度，所以通常情况下，声明<span style="color: #4472c4">存储对象的变量</span>时会使用<code>const</code> 。</p><p><strong><em>注意：</em></strong><code>const</code>只是禁止变量被重新赋值，对对象的修改没有任何影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;<span class="attr">name</span>:<span class="string">&quot;S&quot;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> object2 = object1</span><br><span class="line">object1.<span class="property">name</span> = <span class="string">&quot;I&quot;</span> <span class="comment">// 修改对象</span></span><br><span class="line">object2 = <span class="literal">null</span> <span class="comment">// 修改变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1) <span class="comment">// &#123;name:&quot;I&quot;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2) <span class="comment">// &#123;name:&quot;I&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="函数（Function）"><a href="#函数（Function）" class="headerlink" title="函数（Function）"></a>函数（<code>Function</code>）</h2><ul><li>函数也是一个对象，具有其他对象所有的功能</li><li>函数中可以存储代码，且可以在需要时调用这些代码</li></ul><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  函数名( )&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>就是执行函数中存储的代码</p><p><strong><em>语法</em></strong>：函数对象( )</p><p>使用<code>typeof</code>检查函数对象时会返回<code>function</code>（例如，<code>console.log(typeof  函数对象)</code>）</p><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ol><li>函数声明：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  函数名([参数])&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>函数表达式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  变量 = <span class="keyword">function</span>(<span class="params">[参数]</span>)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>箭头函数： </li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 变量 = <span class="function">(<span class="params">[参数]</span>) =&gt;</span> &#123;         <span class="keyword">const</span> 变量 = <span class="function">(<span class="params">[参数]</span>) =&gt;</span> 语句...</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>形式参数：在定义函数时，可以在函数中指定数量不等的形式参数（形参)</li></ul><p>在函数中定义形参，就相当于在函数内部声明了对应的变量，但是没有赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a, b</span>)&#123;   </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实际参数：在调用函数时，可在函数的<code>()</code>传递数量不等的实参，实参赋值给对应的形参<ul><li>参数：<ol><li>如果实参和形参数量相同，则对应的实参赋值给对应的形参</li><li>如果实参多余形参，则多余的实参不会使用 （<code>f1(1, 2, 3, 4)</code>)</li><li>如果形参多余实参，则多余的形参为<code>undefined</code>   （<code>f1(1)</code>）</li></ol></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f1</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// a = 1  b = 2</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>当箭头函数中只有一个参数时，可以省略<code>()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f2</span> = a =&gt; &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a); </span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">f2</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>定义参数时，可以为参数指定默认值，默认值，会在没有对应实参时生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f3</span> = (<span class="params">a = <span class="number">10</span>, b = <span class="number">20</span>, c = <span class="number">30</span></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b =&quot;</span>, b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c =&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f3</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// a = 1  b = 2  c = 30</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="对象作为参数"><a href="#对象作为参数" class="headerlink" title="对象作为参数"></a>对象作为参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params">a</span>)&#123; </span><br><span class="line">   a.<span class="property">name</span> = <span class="string">&quot;I&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对象可以作为参数传递</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;S&quot;</span> &#125;</span><br><span class="line"><span class="comment">// 传递实参时，传递并不是变量本身，而是变量中存储的值</span></span><br><span class="line"><span class="title function_">f4</span>(obj) <span class="comment">// &#123; name: &quot;I&quot; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; name: &quot;I&quot; &#125; 所有指向该对象的变量都会收到影响</span></span><br></pre></td></tr></table></figure><p>函数每次调用都会重新创建默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let obj1 = &#123;name:&quot;w&quot;&#125; // ② function f5(a)&#123;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f5</span>(<span class="params">a = &#123;name:<span class="string">&quot;w&quot;</span>&#125;</span>)&#123; <span class="comment">// ①</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">a.<span class="property">name</span> = <span class="string">&quot;J&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f5</span>() <span class="comment">// a=W a=J</span></span><br><span class="line"><span class="title function_">f5</span>() <span class="comment">// ① a=W a=J   ② a=J a=J</span></span><br></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>函数中，可通过<code>return</code>关键字来指定函数的返回值。</p><ul><li>返回值就是函致的执行结果，函数调用完毕返回值便会作为结果返回</li><li>任何值都可以作为返回值使用（包括对象和函数之类) </li><li>如果<code>return</code>后不跟任何值，则相当于返回<code>undefined</code>。如果不写<code>return</code>，那么函数的返回值依然是<code>undefined</code></li><li><code>return</code>一执行函数立即结束</li></ul><h4 id="箭头函数的返回值"><a href="#箭头函数的返回值" class="headerlink" title="箭头函数的返回值"></a>箭头函数的返回值</h4><p>可以直接写在箭头后（只有一个语句时）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">qiuHe</span> = (<span class="params">a, b</span>) =&gt;&#123; <span class="keyword">return</span> a+b &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a+b</span><br></pre></td></tr></table></figure><p>如果直接在箭头后设置对象字面量为返回值时，对象字面量必须使用<code>()</code>括起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt;(&#123;<span class="attr">name</span>:<span class="string">&quot;W&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（<code>scope</code>）</h3><p>指的是一个变量的可见区域。</p><p><strong>全局</strong>作用域：在网页运行时创建，在网页关闭时消耗</p><ul><li>所有直接编写到script标签中的代码都位于全局作用域中</li><li>全局作用域中的变量是全局变量，可以在任意位置访问</li></ul><p><strong>局部</strong>作用域</p><ol><li><p><strong>块作用域</strong></p><ul><li><p>块作用域在代码块执行时创建，代码块执行完毕就销毁</p></li><li><p>在块作用域中声明的变量是局部变量，只能在块内部访问，外部无法访问</p></li></ul></li><li><p><strong>函数作用域</strong></p><ul><li>函数作用域在函数调用时产生，调用结束后销毁</li><li>函数每次调用都会产生一个全新的函数作用域</li><li>在函数中定义的变量是局部变量，只能在函数内部访问，外部无法访问</li></ul></li></ol><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>当使用一个变量时，<code>JS</code>解释器会优先在当前作用域中寻找变量，如果找到了则直接使用；如果没找到，则去上一层作用域中寻找，找到了则使用如果没找到，则继续去上一层寻找，以此类……如果一直到全局作用域都没找到，则报错<code>xxx is not defined</code></p><h2 id="方法（method"><a href="#方法（method" class="headerlink" title="方法（method)"></a>方法（<code>method</code>)</h2><ul><li>当一个对象的属性指向一个函数，那么就称这个函数是该对象的方法</li><li>调用函数就称为调用对象的方法</li></ul><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a><code>window</code>对象</h3><ul><li>在浏览器中，浏览器提供了一个<code>window</code>对象，可以直接访问</li><li><code>window</code>对象代表的是浏览器窗口，通过该对象可以对浏览器窗口进行各种操作。除此之外，<code>window</code>对象还负责存储<code>JS</code>中的内置对象和浏览器的宿主对象例如，<code>window.alert(123)   window.console.log(&quot;111&quot;)</code></li><li><code>window</code>对象的属性可通过<code>window</code>对象访问，也可以直接访问。例如，<code>window.a = 10</code></li><li>函数就可以认为是<code>window</code>对象的方法</li></ul><h3 id="var"><a href="#var" class="headerlink" title="var"></a><code>var</code></h3><p>用来声明变量，作用和<code>let</code>相同，但<code>var</code>不具有块作用域（有函数作用域）</p><ul><li>在全局中使用<code>var</code>声明的变量，都会作为<code>window</code>对象的属性保存</li><li>使用<code>let</code>声明的变量不会存储在<code>window</code>对象，而存在一个秘密的小地方（无法访问）</li><li>使用<code>function</code>声明的函数，都会作为<code>window</code>的方法保存</li><li>在局部作用域中，如果没有使用<code>var</code>或<code>let</code>声明变量，则变量会自动成为<code>window</code>对象的属性，也就是全局变量</li></ul><h3 id="变量的提升"><a href="#变量的提升" class="headerlink" title="变量的提升"></a>变量的提升</h3><ul><li>使用<code>var</code>声明的变量，会在所有代码执行前被声明，所以可以在变量声明前就访问变量</li><li><code>let</code>声明的变量实际也会提升，但是在赋值之前解释器禁止对该变量的访问</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="函数的提升"><a href="#函数的提升" class="headerlink" title="函数的提升"></a>函数的提升</h3><p>使用函数声明创建的函数，会在其他代码执行前被创建，所以可在函数声明前调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f6</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f6</span>(<span class="params"></span>)&#123; </span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;function函数&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="立即执行函数（IIFE）"><a href="#立即执行函数（IIFE）" class="headerlink" title="立即执行函数（IIFE）"></a>立即执行函数（<code>IIFE</code>）</h3><ul><li>立即是一个匿名的函数，并它只会调用一次</li><li>可以利用<code>IIFE</code>来创建一个一次性的函数作用域，避免变量冲突的问题</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的<code>this</code></h3><ul><li>函数在执行时，<code>JS</code>解析器每次都会传递进一个隐含的参数，这个参数就叫做<code>this</code></li><li><p><code>this</code>会指向一个对象，且所指向的对象会根据函数调用方式的不同而不同</p><ol><li>以函数形式调用时， <code>this</code>指向的是<code>window</code></li><li>以方法的形式调用时，<code>this</code>指向的是调用方法的对象</li><li>……</li></ol></li><li><p>通过<code>this</code>可以在方法中引用调用方法的对象</p></li></ul><h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的<code>this</code></h3><p>- 箭头函数没有自己的<code>this</code>，它的<code>this</code>有外层作用域决定</p><p>- 箭头函数的<code>this</code>和它的调用方式无关</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p><code>JS</code>运行代码的<strong><em>模式</em></strong> 有两种：</p><ul><li>正常模式：默认情况下代码都运行在正常模式中，语法检查并不严格</li></ul><p>它的原则是：能不报错的地方尽量不报错。导致代码的运行性能较差</p><ul><li><strong><em>严格</em></strong> 模式：语法检查变得严格           <code>&quot;use  strict&quot;</code>// 开启严格模式<ol><li>禁止一些语法</li><li>更容易报错</li><li>提升了性能</li></ol></li></ul><p>在开发中，应尽量使用严格模式，可将一些隐藏问题尽早消灭，同时提升代码运行性能</p><h2 id="使用Object创建对象的问题"><a href="#使用Object创建对象的问题" class="headerlink" title="使用Object创建对象的问题"></a>使用<code>Object</code>创建对象的问题</h2><ol><li>无法区分出不同类型的对象</li><li>不方便批量创建对象</li></ol><p>在<code>JS</code>中可以通过类（<code>class</code>）来解决这个问题：</p><ol><li>类是对象模板，可将对象中的属性和方法直接定义在类中。定义后，就可直接通过类来创建对象</li><li>通过同一个类创建的对象，称为同类对象。可以使用<code>instanceof</code>来检查一个对象是否是由某个类创建，如果某个对象是由某个类所创建，则称该对象是这个类的实例。</li></ol><p><strong><em>语法：</em></strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  类名 &#123;&#125;  <span class="comment">// 类名要使用大驼峰命名</span></span><br><span class="line"><span class="keyword">const</span>  类名 = <span class="keyword">class</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong><em>通过类创建对象：</em></strong><code>new 类()</code></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>是创建对象的模板，要创建第一件事就是定义类。</p><ul><li>类的代码块，默认就是严格模式，用来设置对象的属性的，不是什么代码都能写</li><li>实例属性只能通过实例访问</li><li>使用<code>static</code>声明的属性是静志属性（类属性），静志属性只能通过类去访问<code>person.test</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>&#123; </span><br><span class="line">  name = <span class="string">&quot;wendy&quot;</span> <span class="comment">// person的实例属性</span></span><br><span class="line">  age = <span class="number">30</span> <span class="comment">// 实例属性只能通过实例访问//person</span></span><br><span class="line">  <span class="keyword">static</span> test = <span class="string">&quot;静态属性&quot;</span> <span class="comment">// person.test</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> person</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> person</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1) <span class="comment">// person&#123;name：&#x27;wendy&#x27;,age：30&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2) <span class="comment">// person&#123;name：&#x27;wendy&#x27;,age：30&#125;</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> &#123; </span><br><span class="line">  name = <span class="string">&quot;JOY&quot;</span></span><br><span class="line">  sayHello = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 添加方法的一种方式</span></span><br><span class="line">  <span class="comment">// 添加方法(实例方法)  实例方法中this就是当前实例     ！！！主要使用方式</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span>) </span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 静态方法(类方法)通过类来调用，静态方法中this指向的是当前类person.test</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">test</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是静态方法&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> person</span><br><span class="line">p3.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>在类中可以添加一个特殊方法<code>constructor</code>，该方法称为构造函数（构造方法）</li><li>构造函数会在我们调用类创建对象时执行</li><li>可以在构造函数中，为实例属性进行赋值在构造函数中，<code>this</code>表示当前所创建的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p4 = <span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&quot;wendy&quot;</span>, <span class="number">30</span>, <span class="string">&quot;女&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p4) <span class="comment">// person&#123;name:&quot;wendy&quot;, age:30, gender:&quot;女&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="面向对象（OOP）的特点"><a href="#面向对象（OOP）的特点" class="headerlink" title="面向对象（OOP）的特点"></a>面向对象（<code>OOP</code>）的特点</h2><p>封装、继承和多态</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>主要用来保证数据的安全</p><ul><li>对象就是一个用来存储不同属性的容器。对象不仅存储属性，还要负责数据的安全</li><li>直接添加到对象中的属性，并不安全，因为它们可以被任意的修改</li><li>确保数据的安全：<ol><li><strong><em>私有化</em></strong> 数据：将需要保护的数据设置为私有，只能在类内部使用</li><li>提供<strong><em>setter和getter方法</em></strong> 来开放对数据的操作</li></ol></li><li><p>属性设置私有，通过<code>getter setter</code>方法操作属性带来的好处：</p><ol><li>可以控制属性的读写权限</li><li>可以在方法中对属性的值进行验证</li></ol><p><strong><em>实现封装的方式</em></strong>：</p></li></ul><ol><li>属性私有化，加<code>#</code></li><li>通过<code>getter</code>和<code>setter</code>方法来操作属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get 属性名( ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.#属性</span><br><span class="line">&#125;</span><br><span class="line">set 属性名(参数) &#123;</span><br><span class="line"><span class="variable language_">this</span>.#属性 = 参数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>在<code>JS</code>中不会检查参数的类型，所以这就意味着任何数据都可以作为参数传递</li><li>要调用某个函数，无需指定的类型，只要对象满足某些条件即可</li><li>多态提供了<strong><em>灵活</em></strong> 性</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>通过<code>extends</code>关键来完成维承</p><ul><li>当一个类继承另一个类时，就相当于将另一个类的代码复制到了当前类中（简单理解)</li><li>继承发生时，被继承的类称为 父类（超类），继承的类称为 子类</li><li>通过继承可以减少重复的代码，并且可以在不修改一个类的前提对其进行<strong><em>扩展</em></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>)&#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动物&quot;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// 在子类中，可以通过创建同名方法来重写父类的方法</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;狗&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 重写构造函数时，第一行代码必须是super()</span></span><br><span class="line">    <span class="variable language_">super</span>(name)<span class="comment">// 调用父类的构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;猫&quot;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;s&quot;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>对象中存储属性的区域实际有两个：</p><ol><li><p>对象自身：</p><ol><li>直接通过对象所添加的属性，位于对象自身中</li><li>在类中通过<code>x = y</code> 的形式添加的属性，位于对象自身中</li></ol></li><li><p>原型对象（ <code>prototype</code>)</p><ul><li>对象中还有一些内容，会存储到其他的对象里（原型对象）</li><li>在对象中会有一个属性用来存储原型对象，这个属性叫做<code>__proto__</code></li><li>原型对象也负责为对象存储属性，当我们访问对象中的属性时，会优先访问对象自身的属性，对象自身不包含该属性时，才会去原型对象中寻找</li><li>会添加到原型对象中的情况：<ol><li>在类中通过<code>xxx()&#123;&#125;</code>方式添加的方法，位于原型中</li><li>主动向原型中添加的属性或方法</li></ol></li></ul></li></ol><p>访问一个对象的原型对象：</p><ol><li><code>对象.__proto</code>__  </li><li><code>Object.getPrototypeof(对象)</code>        更安全！！</li></ol><p>原型对象中的数据：</p><ol><li>对象中的数据（属性、方法等）</li><li><code>constructor</code>(对象的构造函数）</li></ol><p>注意：原型对象也有原型。这样就构成了一条原型链，根据对象的复杂程度不同，原型链的长度也不同</p><p><code>p</code>对象的原型链：<code>p对象 --&gt; 原型 --&gt; 原型 --&gt; null</code></p><p><code>obj</code>对象的原型链： <code>obj对象 --&gt;原型 --&gt; null</code></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>读取对象属性时，会优先对象自身属性，如果对象中有，则使用，没有则去对象的原型中寻找；如果原型中有，则使用，没有则去原型的原型中寻找……直到找到<code>Object</code>对象的原型（<code>Object</code>的原型没有原型（为<code>null</code>）），如里依然没有找到，则返回<code>undefined</code>。</p><p>与<strong>作用域链</strong>区别：作用域链是找<strong>变量</strong>的链，找不到会报错；原型链是找<strong><em>属性</em></strong> 的链，找不到会返回<code>undefined</code></p><p>所有的同类型对象它们的原型对象都是同一个，所以，同类型对象的原型链是一样的。</p><p><span style="color: #4472c4"><strong>原型的作用</strong></span>：原型就相当于是一个公共的区域，可以被所有该类实例访问，可以将一个该类实例中，所有的公共属性（方法）统一存储到原型中，这样只需要创建一个属性，即可被所有实例访问。</p><p>在对象中有些值是对象独有的，像属性（<code>name，age，gender</code>）每个对象都应该有自己值，但是有些值对于每个对象来说都是一样的，像各种方法，对于一样的值没必要重复创建</p><p><code>JS</code>中继承就是通过原型来实现的，当继承时，子类的原型就是一个父类的实例</p><h3 id="修改原型"><a href="#修改原型" class="headerlink" title="修改原型"></a>修改原型</h3><p>大部分情况下是不需要修改原型对象</p><ul><li>注意：千万不要通过类的实例去修改原型</li><li>处理通过<code>__proto__</code>能访问对象的原型外，还可以通过类的<code>prototype</code>属性，来访问实例的原型修改原型时，最好通过通过类去修改。</li><li>好处：① 一修改就是修改所有实例的原型  ②无需创建实例即可完成对类的修改</li></ul><h3 id="instanceof和has-Own"><a href="#instanceof和has-Own" class="headerlink" title="instanceof和has Own"></a><code>instanceof</code>和<code>has Own</code></h3><ul><li><code>instanceof</code>   - 用来检查一个对象是否是一个类的实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog <span class="keyword">instanceof</span> <span class="title class_">Dog</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>instanceof</code>检查的是对象的原型链上是否有该类实例。只要原型链上有该类实例，就会返回<code>true</code>。     <code>dog --&gt; Animal的实例 --&gt; 0bject实例 --&gt; 0bject原型</code></p><ul><li><code>object</code>是所有对象的原型，所以任何和对象和<code>Object</code>进行<code>instanceof</code>运算都会返回<code>true</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sayHello&quot;</span> <span class="keyword">in</span> p) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;sayHello&quot;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(p, <span class="string">&quot;sayHello&quot;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol><li>使用<code>in</code>运算符检查属性时，无论属性在对象自身还是在原型中，都会返回`true``</li><li><code>对象.hasOwnProperty(属性名)</code>  - 用来检查一个对象的<strong>自身</strong>是否含有某个属性</li><li><code>Object.hasOwn(对象，属性名)</code>    - 用来检查一个对象的<strong>自身</strong>是否含有某个属性</li></ol><h2 id="旧类"><a href="#旧类" class="headerlink" title="旧类"></a>旧类</h2><p> 早期<code>JS</code>中，直接通过函数来定义类</p><ul><li>一个函数如果直接调用<code>xxx()</code>，那么这个函数就是一个普通函数</li><li>一个函数如果通过<code>new</code>调用<code>new xxx()</code>，那么这个函数就是一个够早函数</li></ul><h2 id="数组（array）"><a href="#数组（array）" class="headerlink" title="数组（array）"></a>数组（array）</h2><ul><li>数组也是一种复合数据类型，在数组可以存储多个不同类型的数据</li><li>数组中存储的是有序的数据，数组中每个数据都有一个唯一的索引，可通过索引来操作获取数据</li><li>数组中存储的数据叫做元素</li><li>索引（<code>index</code>）是一组大于0的整数</li><li>创建数组：通过<code>Array()</code>来创建数组，也可以通过<code>[]</code>来创建数组</li><li>向数组中添加元素：<code>数组[索引] = 元素</code></li><li>读取数组中的元素：<code>数组[索引]</code><ul><li>如果读取了一个不存在的元素，不会报错而是返回<code>undefined</code></li></ul></li><li><code>length</code> 获取数组的<strong>长度</strong>（可以修改）。获取的实际值是数组的<strong><em>最大索引+1</em></strong><ul><li>向数组的最后添加元素 ：<code>数组[数组.length] = 元素</code></li></ul></li></ul><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>获取到数组中的每一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;Irene&quot;</span>, <span class="string">&quot;Seulgi&quot;</span>, <span class="string">&quot;Wendy&quot;</span>, <span class="string">&quot;Joy&quot;</span>, <span class="string">&quot;Yeri&quot;</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125; <span class="comment">// 正序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = arr.<span class="property">length</span>-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125; <span class="comment">// 倒序</span></span><br></pre></td></tr></table></figure><p>创建数组时尽量要确保数组中存储的数据的类型是相同</p><p>任何类型的值都可以成为数组中的元素</p><h3 id="for-of语句"><a href="#for-of语句" class="headerlink" title="for-of语句"></a><code>for-of</code>语句</h3><p>可以用来遍历<strong>可迭代对象</strong></p><p><strong><em>语法：</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">of</span>  可迭代的对象)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>执行流程：</em></strong><code>for-of</code>的循环体会执行多次，数组中有几个元素就会执行几次。每次执行时都会将一个元素赋值给变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;Irene&quot;</span>, <span class="string">&quot;Seulgi&quot;</span>, <span class="string">&quot;Wendy&quot;</span>, <span class="string">&quot;Joy&quot;</span>, <span class="string">&quot;Yeri&quot;</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><ul><li><code>Array.isArray()</code>     -  用来检查一个对象是否是数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;red&quot;</span>&#125;)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>at()</code>   -  可以根据索引获取数组中的指定元素，<code>at</code>可以接收负索引作为参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">2</span>)) <span class="comment">// Joy  console.log(arr[arr.length - 2])</span></span><br></pre></td></tr></table></figure><ul><li><code>concat()</code>  <ul><li>用来连接两个或多个数组</li><li>非破坏性方法，不会影响原数组，而是返回一个新的数组</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&quot;Irene&quot;</span>, <span class="string">&quot;Seulgi&quot;</span>, <span class="string">&quot;Wendy&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&quot;Joy&quot;</span>, <span class="string">&quot;Yeri&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr1.<span class="title function_">concat</span>(arr2, [<span class="string">&quot;Joy&quot;</span>, <span class="string">&quot;Yeri&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [&quot;I&quot;,&quot;S&quot;,&quot;W&quot;,&quot;J&quot;,&quot;Y&quot;,&quot;J&quot;,&quot;Y&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><p><code>indexOf()</code>    </p><ul><li>获取元素在数组中第一次出现的索引</li><li>参数：① 要查询的元素    ② 查询的起始位置</li></ul></li><li><p><code>lastIndexOf()</code>  </p><ul><li>获取元素在数组中最后一次出现的位置</li><li>返回值：找到了则返回元素的索引，没有找到则返回<code>-1</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">indexOf</span>(<span class="string">&quot;Wendy&quot;</span>, <span class="number">3</span>) <span class="comment">// -1</span></span><br><span class="line">result = arr.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;Joy&quot;</span>, <span class="number">3</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><ul><li><code>join( )</code>    <ul><li>将一个数组中的元素连接为一个字符串</li><li>参数：指定一个字符串作为连接符</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// Irene-Seulgi-Wendy-Joy-Yeri</span></span><br></pre></td></tr></table></figure><ul><li><code>slice()</code> <ul><li>用来截取数组（非破坏性方法)</li><li>参数：①截取的起始位置（包括该位置） ②截取的结束位置（不包括该位置）</li><li>第二个参数可以省略不写，如果省略则会一直截取到最后</li><li>索引可以是负值</li><li>如果将两个参数全都省略，则可以对数组进行浅拷贝（浅复制）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// [&quot;Irene&quot;, &quot;Seulgi&quot;]</span></span><br><span class="line">result = arr.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>) <span class="comment">// [&quot;Seulgi&quot;, &quot;Wendy&quot;, &quot;Joy&quot;]</span></span><br><span class="line">result = arr.<span class="title function_">slice</span>() <span class="comment">// [&quot;Irene&quot;, &quot;Seulgi&quot;, &quot;Wendy&quot;, &quot;Joy&quot;, &quot;Yeri&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">&quot;Irene&quot;</span>, <span class="string">&quot;Seulgi&quot;</span>, <span class="string">&quot;Wendy&quot;</span>, <span class="string">&quot;Joy&quot;</span>, <span class="string">&quot;Yeri&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> arr4 = arr3 <span class="comment">// 不是复制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3 === arr4) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 如何去复制一个对象：复制必须要产生新的对象</span></span><br><span class="line"><span class="comment">// 当调用slice时，会产生一个新的数组对象，从而完成对数组的复制</span></span><br><span class="line"><span class="keyword">const</span> arr5 = arr3.<span class="title function_">slice</span>()</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="string">&quot;RED&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3 === arr5) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3) <span class="comment">// [&quot;RED&quot;, &quot;Seulgi&quot;, &quot;Wendy&quot;, &quot;Joy&quot;, &quot;Yeri&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5) <span class="comment">// [&quot;Irene&quot;, &quot;Seulgi&quot;, &quot;Wendy&quot;, &quot;Joy&quot;, &quot;Yeri&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="浅拷贝（shallow-copy）"><a href="#浅拷贝（shallow-copy）" class="headerlink" title="浅拷贝（shallow copy）"></a>浅拷贝（shallow copy）</h4><p>只对对象的浅层进行复制（只复制一层）</p><ul><li>通常对对象的拷贝都是浅拷贝</li><li>如果对象中存储的数据是原始值，那么拷贝的深浅是不重要</li><li>浅拷贝只会对对象本身进行复制，不会复制对象中的属性（或元素）</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408211653123.jpg" alt=""> </p><h4 id="深拷贝（deep-copy）"><a href="#深拷贝（deep-copy）" class="headerlink" title="深拷贝（deep copy）"></a>深拷贝（deep copy）</h4><p>不仅复制对象本身，还复制对象中的属性和元素</p><ul><li>因为性能问题，通常不使用深拷贝</li></ul><h4 id="对象的复制"><a href="#对象的复制" class="headerlink" title="对象的复制"></a>对象的复制</h4><ul><li><p><code>…</code>（展开运算符）</p><ul><li><p>可以将一个数组中的元素展开到另一个数组中或者作为函数的参数传递</p></li><li><p>可通过展开运算符对数组进行浅复制</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const arr6 = [arr[0], arr[1], arr[2], arr[3], arr[4]]</span></span><br><span class="line"><span class="keyword">const</span> arr6 = [...arr]</span><br><span class="line"><span class="comment">// const arr6 = [&quot;red&quot;, ...arr, &quot;velvet&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><code>object.assign(目标对象，被复制的对象)</code><ul><li>将被复制对象中的属性复制到目标对象里，并将目标对象返回</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;Irene&quot;</span>, <span class="attr">age</span>: <span class="number">33</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;<span class="attr">address</span>: <span class="string">&quot;Soul&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2) <span class="comment">// &#123;address:&quot;Soul&quot;, age:33, name:&quot;Irene&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="破坏性方法"><a href="#破坏性方法" class="headerlink" title="破坏性方法"></a>破坏性方法</h3><ul><li><code>push()</code>      -  向数组的末尾添加一个或多个元素，并返回新的长度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">push</span>(<span class="string">&quot;www&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&quot;I&quot;, &quot;S&quot;, &quot;W&quot;, &quot;J&quot;, &quot;Y&quot;, &quot;www&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><ul><li><code>pop()</code>      - 删除并返回数组的最后一个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&quot;Irene&quot;, &quot;Seulgi&quot;, &quot;Wendy&quot;, &quot;Joy&quot;, &quot;Yeri&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// www</span></span><br></pre></td></tr></table></figure><ul><li><code>unshift()</code>    -  向数组的开头添加一个或多个元素，并返回新的长度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">unshift</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&quot;1&quot;,&quot;2&quot;,&quot;I&quot;, &quot;S&quot;, &quot;W&quot;, &quot;J&quot;, &quot;Y&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><ul><li><code>shift()</code>     -  删除并返回数组的第一个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&quot;2&quot;,&quot;I&quot;, &quot;S&quot;, &quot;W&quot;, &quot;J&quot;, &quot;Y&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li><code>splice()</code>     -  可以删除、添加、插入、替换数组中的元素<ol><li>参数：①删除的起始位置   ②删除的数量  ③要插入的元素（可多个）</li><li>返回值：返回被删除的元素</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&quot;Irene&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&quot;Irene&quot;, &quot;Seulgi&quot;, &quot;Wendy&quot;, &quot;Joy&quot;, &quot;Yeri&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [&quot;2&quot;, &quot;Irene&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><code>reverse()</code>     - 反转数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&quot;Yeri&quot;,&quot;Joy&quot;,&quot;Wendy&quot;,&quot;Seulgi&quot;,&quot;Irene&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [&quot;Yeri&quot;,&quot;Joy&quot;,&quot;Wendy&quot;,&quot;Seulgi&quot;,&quot;Irene&quot;]</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="练习：数组去重"><a href="#练习：数组去重" class="headerlink" title="练习：数组去重"></a>练习：数组去重</h3><p>有一数组<code>arr = [1,2,1,3,2,4,5,5,6,7]</code>，编写代码，去除数组中重复的元素<code>--&gt;[1,2,3,4,5,6,7]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line"><span class="keyword">const</span> arr8 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr8.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="comment">// 获取当前值后边的所有值</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr8.<span class="property">length</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr8[i] === arr8[j])&#123;</span><br><span class="line">arr8.<span class="title function_">splice</span>(j, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 当arr[i]和 arr[j]相同时，会自动删除j位置的元素，然后j+1位置的元素会变成</span></span><br><span class="line">      <span class="comment">// j位置的元素，而j位置已经比较过了，不会重复比较,所以会出现漏比较的情况</span></span><br><span class="line">      <span class="comment">// 解决办法：当删除一个元素后，需要将该位置的元素再比较一遍</span></span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr8) <span class="comment">// [1,2,3,4,5,6,7]</span></span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line"><span class="keyword">const</span> arr9 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr9.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> index = arr9.<span class="title function_">indexOf</span>(arr[i], i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(index !== -<span class="number">1</span>)&#123;</span><br><span class="line">        arr9.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">        i--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法三：</span></span><br><span class="line"><span class="keyword">const</span> newArr = []</span><br><span class="line"><span class="comment">// for-of的循环体每次执行时都会将一个元素赋值给变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr9)&#123;</span><br><span class="line">  <span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(value) === -<span class="number">1</span>)&#123;</span><br><span class="line">    newArr.<span class="title function_">push</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习：排序"><a href="#练习：排序" class="headerlink" title="练习：排序"></a>练习：排序</h3><p>有一个数组：<code>[9,1,3,2,8,0,5,7,6,4]</code>，编写代码对数组进行排序： <code>0 —&gt; 9</code></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>思路一：比较相邻的两个元素，然后根据大小来决定是否交换它们的位置</p><p>例：</p><ul><li>第一次排序：1，3，2，8，0，5，7，6，4，9</li><li>第二次排序：1，2，3，0，5，7，6，4，8，9</li><li>第三次排序：1，2，0，3，5，6，4，7，8，9</li><li>…</li><li>倒数第二次：0，1，2，3，4，5，6，7，8，9</li></ul><p>冒泡排序是<strong><em>最慢</em></strong> 的排序方式，不适用于数据量较大的排序</p><p><strong><em>优化：</em></strong><code>for(let j = 0; j &lt; arr.length - 1 - i; j++)&#123;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>-<span class="number">1</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;arr.<span class="property">length</span>-<span class="number">1</span>; j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[j]</span><br><span class="line">      arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">      arr[j+<span class="number">1</span>] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>思路二：取出一个元素，然后将其他元素和该元素进行比较，如果其他元素比该元素小则交换两个元素的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>-<span class="number">1</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">      arr[i] = arr[j]</span><br><span class="line">      arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><ul><li><code>sort()</code>    - 用来对数组进行排序（会对<strong><em>改变</em></strong> 原数组），默认会将数组<strong><em>升序</em></strong> 排列<ol><li>注意： <code>sort</code>默认会按照<code>Unicode</code>编码进行排序，所以如果直接通过<code>sort</code>对数字进行排序，可能会得到一个不正确的结果。</li><li>参数：可以传递一个回调函数作为参数，通过回调函数来指定排序规则</li><li><code>(a，b) =&gt; a – b</code>  升序排列              <code>(a，b) =&gt; b – a</code>  降序排列</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line">arr1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) <span class="comment">//升序</span></span><br><span class="line">arr1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a) <span class="comment">//降序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure><ul><li><code>forEach()</code>  - 用来遍历数组<ol><li>它需要一个回调函数作为参数，这个回调函数会被调用多次，数组中有几个元素，回调 函数就会调用几次，每次调用，都会将数组中的数据作为参数传递。</li><li>回调函数中有三个参数：<code>element</code> 当前的元素<br>​                                        <code>index</code>    当前元素的索引<br>​                                        <code>array</code>    被遍历的数组</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr2 =[<span class="string">&quot;Irene&quot;</span>,<span class="string">&quot;Seulgi&quot;</span>,<span class="string">&quot;Wendy&quot;</span>,<span class="string">&quot;Joy&quot;</span>,<span class="string">&quot;Yeri&quot;</span>]</span><br><span class="line">arr2.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array)</span><br><span class="line">&#125;)</span><br><span class="line">arr2.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index, element)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>filter()</code>      将数组中符合条件的元素保存到一个新数组中返回<ol><li>需要一个回调函数作为参数，会为每一个元素去调用回调函数，并根据返回值来决定是否将元素添加到新数组中</li><li>非破坏性方法，不会影响原数组</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = arr1.<span class="title function_">filter</span>(<span class="function"><span class="params">a</span> =&gt;</span> a % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [10, 8, 6, 4, 2, 0]</span></span><br></pre></td></tr></table></figure><ul><li><code>map()</code>     根据当前数组生成一个新数组<ol><li>需要一个回调函数作为参数，回调函数的返回值会成为新数组中的元素</li><li>非破坏性方法，不会影响原数组</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> ele * <span class="number">2</span>) <span class="comment">// arr = [0, ..., 9]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [0, ..., 18]</span></span><br></pre></td></tr></table></figure><ul><li><code>reduce()</code>   可以用来将—个数组中的所有元素整合为一个值<ol><li>参数：①回调函数，通过回调函数来指定合并的规则    ②可选参数，初始值</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;<span class="keyword">return</span> a+b&#125;)</span><br><span class="line">result = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a+b, <span class="number">10</span>) <span class="comment">// a初始值10, b=0 -&gt; a=10, b=1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 55 = 10+0+...+9</span></span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>如果一个函数的参数或返回值是函数</p><ul><li>为什么要将函数作为参数传递?（回调函数有什么作用?）</li><li>将<strong><em>函数作为参数</em></strong> ，意味着可以对另一个函数<strong><em>动态</em></strong> 的传递代码</li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array =[</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;Irene&quot;</span>,<span class="attr">age</span>:<span class="number">33</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">&quot;Seulgi&quot;</span>,<span class="attr">age</span>:<span class="number">30</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;Wendy&quot;</span>,<span class="attr">age</span>:<span class="number">30</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">&quot;Joy&quot;</span>,<span class="attr">age</span>:<span class="number">27</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;Yeri&quot;</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">array, hd</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Array</span> =[] <span class="comment">// 非破坏性，创建新数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">hd</span>(array[i]))&#123;</span><br><span class="line">            <span class="title class_">Array</span>.<span class="title function_">push</span>(array[i])</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调函数，这种形式较少见，通常都是匿名函数</span></span><br><span class="line"><span class="comment">// function fn(a)&#123;</span></span><br><span class="line"><span class="comment">//     return a.age &gt;= 30</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//result = filter(array, fn)</span></span><br><span class="line">result = <span class="title function_">filter</span>(array, <span class="function"><span class="params">a</span> =&gt;</span> a.<span class="property">age</span> &gt;= <span class="number">30</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包就是能访问到外部函数作用域中变量的函数</p><p>使用场景：当需要隐藏一些不希望被别人访问的内容时就可以使用闭包</p><p>构成闭包的要件：</p><ol><li>函数的嵌套</li><li>内部函数要引用外部函数中的变量</li><li>内部函数要作为返回值返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;fn2中的a&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fn3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn3 = <span class="title function_">fn2</span>()</span><br><span class="line"><span class="title function_">fn3</span>() <span class="comment">// fn2中的a</span></span><br></pre></td></tr></table></figure><p>   函数作用域，在函数创建时就己经确定的（词法作用域），和调用的位置无关。闭包利用的就是词法作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;全局变量a&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a全局作用域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;fn1中的a&quot;</span> <span class="comment">// a函数作用域</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>() <span class="comment">// 全局变量a</span></span><br></pre></td></tr></table></figure><p>​    </p><p><strong><em>闭包的生命周期：</em></strong></p><ol><li>闭包在外部函数调用时产生，外部函数每次调用都会产生一个<strong><em>全新的闭包</em></strong></li><li>在内部函数丢失时销毁（内部函数被垃圾回收了，闭包才会消失）</li></ol><p>注意事项：</p><ul><li>闭包主要用来隐藏一些不希望被外部访问的内容，这就意味着闭包需要占用一定的内存空间</li><li>相较于类来说，闭包比较浪费内存空间（类可以使用原型而闭包不能），需要执行次数较少时，使用闭包；需要大量创建实例时，使用类</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">      num++</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn4 = <span class="title function_">outer</span>() <span class="comment">// 独立闭包</span></span><br><span class="line"><span class="keyword">let</span> fn5 = <span class="title function_">outer</span>() <span class="comment">// 独立闭包</span></span><br><span class="line"><span class="title function_">fn4</span>() <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">fn5</span>() <span class="comment">// 1</span></span><br><span class="line">fn4 = <span class="literal">null</span> <span class="comment">// 销毁，被回收</span></span><br><span class="line">fn5 = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>调用自身的函数称为递归函数</p><ul><li>递归的作用与循环基本一致</li><li>不同点在于，递归思路的比较清晰简洁，循环的执行性能比较好。在开发中，一般的问题都可以通过循环解决，也是尽量去使用循环，少用递归。只在一些使用循环解决比较麻烦的场景下，才使用递归</li><li>编写递归函数，一定要包含两个要件：<ol><li><span style="color: #4472c4"><strong><em>基线条件</em></strong></span> — 递归的终止条件</li><li><span style="color: #4472c4"><strong><em>递归条件</em></strong></span> — 如何对问题进行拆分</li></ol></li></ul><p><strong><em>练习1：</em></strong>创建函数求任意数的阶乘（<code>factorial</code>）    <code>5！= 4！× 5  4！= 3！× 4 ...</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(num === <span class="number">1</span>)&#123; <span class="comment">// 基线条件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">factorial</span>(num-<span class="number">1</span>)*num <span class="comment">// 递归条件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> value = <span class="title function_">factorial</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">//120</span></span><br></pre></td></tr></table></figure><p><strong><em>练习2：</em></strong>一对兔子出生后的两个月后每个月都能生一对小兔子，编写一个函数，可以用来计算第n个月的兔子的数量</p><ul><li>月：1   2   3   4   5   6   7    8    9     10   11   12</li><li>对：1   1   2   3   5   8   13  21  34   55   89   ….</li><li>规律：当前数等于前两个数之和（斐波那契数列）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rabbit</span>(<span class="params">month</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(month === <span class="number">1</span> || month === <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">rabbit</span>(month-<span class="number">1</span>) + <span class="title function_">rabbit</span>(month-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">rabbit</span>(<span class="number">8</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第n个月的兔子的数量(只):&quot;</span>+ sum*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a><code>arguments</code></h3><p>是一个类数组对象（伪数组），函数中又一个隐含参数</p><ul><li>和数组相似，可以通过索引来读取元素，也可以通过<code>for</code>循环变量，但它不是一个数组对象，不能调用数组的方法</li><li><code>arguments</code>用来<strong><em>存储函数的实参</em></strong>，无论用户是否定义形参，实参都会存储到<code>arguments</code>对象中可以通过该对象直接访问实参</li></ul><h3 id="可变参数-1"><a href="#可变参数-1" class="headerlink" title="可变参数"></a>可变参数</h3><p>在定义函数时可以将参数指定为可变参数</p><ul><li>可变参数可以接收任意数量实参，并将他们统一<strong><em>存储到一个数组中返回</em></strong></li><li>可变参数的作用和<code>arguments</code>基本一致<ul><li>不同点：<ol><li>可变参数的名字可以自己指定</li><li>可变参数就是一个数组，可以直接使用数组的方法</li><li>可变参数可以配合其他参数一起使用</li></ol></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...num</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> num.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a+b, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当可变参数和普通参数一起使用时，需要将可变参数写到最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, ...args</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>, <span class="number">222</span>, <span class="string">&quot;red&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;1111&quot;</span>) <span class="comment">// [&quot;red&quot;, true, &quot;1111&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="call和apply"><a href="#call和apply" class="headerlink" title="call和apply"></a><code>call</code>和<code>apply</code></h3><p>调用函数除了通过 <code>函数()</code> 这种形式外，还可以通过其他的方式来调用函数。比如，可以通过调用函数的<code>call()</code>和<code>apply()</code>两个方法来调用函数</p><ul><li><code>call</code>和<code>apply</code>除了可以调用函数，还可以用来<strong><em>指定函数中的this</em></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Call</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数已执行&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>:<span class="string">&quot;www&quot;</span>, <span class="title class_">Call</span> &#125; </span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">call</span>(obj) <span class="comment">// 函数已执行 &#123;name:&#x27;www&#x27;, Call:f&#125;</span></span><br><span class="line"><span class="title class_">Call</span>.<span class="title function_">apply</span>() <span class="comment">// 函数已执行 window&#123;window:window, se...&#125;</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>call</code>方法调用函数，函数的实参直接在第一个参数后一个一个的列出来</li><li>通过<code>apply</code>方法调用函数，函数的实参需要通过一个数组传递</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a,b</span>)&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a =&quot;</span>, a, <span class="string">&quot;b =&quot;</span>, b, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">f.<span class="title function_">call</span>(obj, <span class="string">&quot;111&quot;</span>, <span class="number">2</span>) <span class="comment">//a = 111 b = 2 &#123;name:&#x27;www&#x27;, Call:f&#125;</span></span><br><span class="line">f.<span class="title function_">apply</span>(obj, [<span class="string">&quot;111&quot;</span>, <span class="number">2</span>]) <span class="comment">//a =111 b = 2 &#123;name:&#x27;www&#x27;, Call:f&#125;</span></span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a><code>bind</code></h3><p>函数的方法，可以用来创建一个新的函数</p><ul><li><code>bind</code>可以为新函数绑定<code>this</code></li><li><code>bind</code>可以为新函数绑定参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bind</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数已执行&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> abc = &#123;<span class="attr">name</span>:<span class="string">&quot;sss&quot;</span>&#125;</span><br><span class="line"><span class="comment">// a=1, b=2, c=3已绑定，在新函数内不可更改，对象指定为abc</span></span><br><span class="line"><span class="keyword">const</span> newBind = <span class="title class_">Bind</span>.<span class="title function_">bind</span>(abc, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="title function_">newBind</span>()</span><br></pre></td></tr></table></figure><p>箭头函数没有自身的<code>this</code>，它的<code>this</code>由外层作用域决定，也无法通过<code>call apply</code> 和 <code>bind</code>修改它的<code>this</code>。箭头函数中没有<code>arguments</code></p><h2 id="内建对象"><a href="#内建对象" class="headerlink" title="内建对象"></a>内建对象</h2><h3 id="解构复值"><a href="#解构复值" class="headerlink" title="解构复值"></a>解构复值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;pjx&quot;</span>, <span class="string">&quot;jsq&quot;</span>, <span class="string">&quot;ssw&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> a, b, c</span><br><span class="line">[a, b, c] = arr <span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [d, e] = [<span class="string">&quot;pxr&quot;</span>, <span class="string">&quot;jyl&quot;</span>] <span class="comment">// 声明同步解构</span></span><br><span class="line">[a, b, c, d=d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 1 2 3 &#x27;pxr&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [n1, n2, ...n3] = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] <span class="comment">// 4 5 [6, 7]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> [<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>]&#125;</span><br><span class="line"><span class="keyword">let</span> [name1, name2] = <span class="title function_">f</span>() <span class="comment">// 111 222</span></span><br></pre></td></tr></table></figure><p>​    快速交换两个变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1=<span class="number">10</span>, a2=<span class="number">2</span></span><br><span class="line">[a1, a2] = [a2, a1]</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>数组解构用中括号<code>[]</code>，对象解构用大括号<code>&#123;&#125;</code></p><p>当先声明变量，再解构时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>:“aaa”，b：<span class="number">11</span>，c：“<span class="number">11</span>”&#125;</span><br><span class="line"><span class="keyword">let</span>  a, b, c </span><br><span class="line">( &#123;a, b, c&#125; = obj )  <span class="comment">// 大括号可能会解析成代码块，外套（）解决</span></span><br></pre></td></tr></table></figure><h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><p>指将对象转换为一个可以存储的格式</p><ul><li><code>JS</code>中的对象使用时都是存在于计算机内存中的</li><li>在<code>JS</code>中对象的序列化通常是将一个对象转换为字符串（<code>JSON</code>字符串）</li><li>序列化的用途：对象转换为字符串后，可将字符串在不同语言之间进行传递。甚至人可以直接对字符串进行读写操作，使<code>JS</code>对象可不同的语言之间传递。<br>①作为数据交换的格式          ② 用来编写配置文件</li><li>如何进行序列化：在<code>JS</code>中有一个工具类<code>JSON</code>（<code>Javascript object Notation</code>）<code>JS</code>对象表示法<ul><li><code>JS</code>对象序列化后会换字符串，这个字符串称其为<code>JSON</code>字符串</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) <span class="comment">// 将对象转换为字符串</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str) <span class="comment">// 将JSON格式的字符串转换为JS对象</span></span><br></pre></td></tr></table></figure><ul><li>也可以手动的编写<code>JSON</code>字符串，在很多程序的配置文件就是使用<code>JSON</code>编写的</li><li>编写<code>JSON</code>的注意事项： <ol><li><code>JSON</code>字符串有两种类型：<code>JSON</code>对象<code>&#123;&#125;</code>     <code>JSON</code>数组<code>[]</code></li><li><code>JSON</code>字符串的属性名必须使用双引号引起来</li><li><code>JSON</code>中可以使用的属性值（元素）：<ol><li>数字（<code>Number</code>）  </li><li>字符串（<code>String</code>）必须使用双引号</li><li>布尔值（<code>Boolean</code>）</li><li>空值（<code>Null</code>）</li><li>对象（<code>Object&#123;&#125;</code>） </li><li>数组（<code>Array []</code>）</li></ol></li><li><code>JSON</code>的格式和<code>JS</code>对象的格式基本上一致<ul><li>注意：<code>JSON</code>字符串如果属性是最后一个，则不要再加逗号</li></ul></li></ol></li></ul><h4 id="使用JSON进行深复制"><a href="#使用JSON进行深复制" class="headerlink" title="使用JSON进行深复制"></a>使用<code>JSON</code>进行深复制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dx = &#123; </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;qqq&quot;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;<span class="attr">name</span>: <span class="string">&quot;www&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dx2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, dx) <span class="comment">// 对dx进行浅复制</span></span><br><span class="line"><span class="keyword">const</span> dx3 = <span class="title function_">structuredClone</span>(dx) <span class="comment">// 对dx进行深复制</span></span><br><span class="line"><span class="comment">// 利用JSON完成深复制</span></span><br><span class="line"><span class="keyword">const</span> dx4 =<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(dx))</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><code>Map</code></h3><p>用来存储键值对结构的数据（<code>key-value</code>）</p><ul><li><code>0bject</code>中存储的数据就可以认为是一种键值对结构</li><li><code>Map</code>和<code>Object</code>的主要区别：<ul><li><code>object</code>中的属性名只能是字符串或符号，如果传递了一个其他类型的属性名，<code>JS</code>解释器会自动将其转换为字符串</li><li><code>Map</code>中任何类型的值都可以称为数据的<code>key</code></li></ul></li></ul><p><strong><em>创建：</em></strong><code>new Map ()</code></p><p>属性和方法：</p><ol><li><code>map.size()</code>                   获取<code>map</code>中<code>键-值对</code>的数量</li><li><code>map.set(key，value)</code>     向<code>map</code>中添加<code>键-值对</code></li><li><code>map.get(key)</code>             根据<code>key</code>获取值</li><li><code>map.delete(key)</code>           删除指定数据</li><li><code>map.has(key)</code>                检查<code>map</code>中是否包含指定键</li><li><code>map.clear()</code>                  清除所有内容</li><li><code>map.keys()</code>                    获取<code>map</code>的所有的<code>key</code></li><li><code>map.values()</code>                获取<code>map</code>的所有的<code>value</code></li></ol><h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><p>用来创建一个集合</p><ul><li>它的功能和数组类似，不同点在于<code>Set</code>中<strong><em>不能存储重复</em></strong> 的数据</li><li>创建：<code>new Set()</code>          <code>new Set ([...])</code></li><li>方法：<code>set.size()</code>   - 获取数量        <code>set.add()</code>    - 添加元素</li></ul><p>set. has( )   检查元素        set. delete( )   删除元素</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a><code>Math</code></h3><p>一个工具类</p><ul><li><code>Math</code>中提供了数学运算相关的一些常量和方法</li><li>常量：<code>Math.PI</code>   圆周率</li><li>方法：<ol><li><code>Math.abs()</code>       求一个数的绝对值</li><li><code>Math.min()</code>      求多个值中的最小值</li><li><code>Math.max()</code>       求多个值中的最大值</li><li><code>Math.pow(x，y)</code>   求x的y次幂       <code>===    x ** y</code></li><li><code>Math.sqrt()</code>       求一个数的平方根   <code>===  x ** .5</code></li><li><strong>取整</strong>：<ol><li><code>Math.floor()</code>  向下取整       例，<code>1.999 —&gt; 1  -1.2 —&gt; -2</code></li><li><code>Math.ceil()</code>    向上取整       例，<code>1.001 —&gt; 2  -1.2 —&gt; -1</code></li><li><code>Math.round()</code>  四舍五入取整</li><li><code>Math.trunc()</code>  直接去除小数位</li></ol></li><li><code>Math.random()</code>       随机生成一个<code>0~1</code>的小数<ol><li>生成<code>0-x</code>之间的随机数：<ul><li><code>Math.round(Math.random() * x)</code></li><li><code>Math. floor(Math. random( ) *(× + 1))</code></li></ul></li><li>生成<code>x-y</code>之间的随机数：<code>Math.round(Math.random() * (y-x) + ×)</code></li></ol></li></ol></li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a><code>Date</code></h3><p>在<code>JS</code>中所有的和时间相关的数据都由<code>Date</code>对象来表示</p><ul><li>直接通过<code>new Date()</code>创建时间对象时，它创建的是当前的时间的对象。<code>new Date(年份, 月, 日, 时, 分, 秒, 毫秒)</code></li><li>可以在<code>Date()</code>的构造函数中，传递一个表示时间的字符串<ul><li>字符串的格式：<ol><li><code>月/日/年 时:分:秒</code>    <code>1/11/2024 15:26:33</code></li><li><code>年-月-日T时:分:秒</code>    <code>2024-1-11T15:26:33</code></li></ol></li></ul></li><li>对象的方法：<ol><li><code>getFullYear()</code>    获取<code>4</code>位年份</li><li><code>getMonth()</code>         返当前日期的月份（<code>0-11</code>）</li><li><code>getDate()</code>           返回当前是几日</li><li><code>getDay()</code>             返回当前日期是周几（<code>0-6</code>）  <code>0</code>表示周日</li><li><code>getTime()</code>         返回当前日期对象的时间戳<ul><li>时间戳：自<code>1970年1月1日0时0分0秒</code>到当前时间所经历的<strong>毫秒数</strong>计算机底层存储时间时，使用都是时间戳。</li></ul></li><li><code>Date.now()</code>        获取当前的时间戳</li></ol></li></ul><h4 id="日期的格式化"><a href="#日期的格式化" class="headerlink" title="日期的格式化"></a>日期的格式化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">Data</span>()</span><br><span class="line"><span class="keyword">let</span> time = data.<span class="title function_">toLocalDataString</span>() <span class="comment">// 将日期转换为本地的字符串</span></span><br><span class="line">time = data.<span class="title function_">toLocalTimeString</span>() <span class="comment">// 将时间转换为本地的字符串</span></span><br><span class="line">time = data.<span class="title function_">toLocalString</span>() <span class="comment">// 将时间转换为本地时间格式的字符串</span></span><br></pre></td></tr></table></figure><p><code>toLocalestring()</code>           - 可以将一个日期转换为本地时间格式的字符串</p><ul><li>参数：<ol><li>描述语言和国家信息的字符串：<code>zh-CN</code>中文中国    <code>zh-HK</code>中文香港    <code>en-US</code>英文美国</li><li>需要一个对象作为参数，在对象中可通过对象的属性来对日期的格式进行配置<ul><li><code>dateStyle</code>   日期的风格</li><li><code>timeStyle</code>   时间的风格              <code>full  long  medium  short</code></li><li><code>hour12</code>        是否采用<code>12</code>小时值        <code>true  false</code></li><li><code>…</code></li></ul></li></ol></li></ul><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>在<code>JS</code>中，除了直接创建原始值外，也可以创建原始值的对象</p><p><span style="color:red">不要用：</span></p><ul><li>通过<code>new String()</code> 可以创建<code>String</code>类型的对象</li><li>通过<code>new Number()</code> 可以创建<code>Number</code>类型的对象</li><li>通过<code>new Boolean()</code> 可以创建<code>Boolean</code>类型的对象</li></ul><p><strong><em>包装类：</em></strong><code>JS</code>中一共有<code>5</code>个包装类</p><ol><li><code>String  --&gt;</code>  字符串包装为<code>String</code>对象</li><li><code>Number  --&gt;</code>  数值包装为<code>Number</code>对象</li><li><code>Boolean --&gt;</code>  布尔值包装为<code>Boolean</code>对象</li><li><code>BigInt  --&gt;</code>  大整数包装为<code>BigInt</code>对象</li><li><code>Symbol  --&gt;</code>  符号包装为<code>Symbol</code>对象</li></ol><ul><li>通过包装类可以将一个原始值包装为一个对象，当我们对一个原始值调用方法或属性时，<code>JS</code>解释器会临时将原始值包装为对应的对象，然后调用这个对象的属性或方法</li><li>由于原始值会被临时转换为对应的对象，这就意味着对象中的方法都可以直接通过原始值来调用</li></ul><h3 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h3><ul><li>字符串其本质就是一个字符数组，<code>&quot;hello&quot; --&gt; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;，&quot;l&quot;, &quot;o&quot;]</code> </li><li>属性和方法：<ol><li><code>length</code>    获取字符串的长度</li><li><code>字符串[索引]</code>    获取指定位置的字符</li><li><code>str.charAt()</code>     根据索引获取字符</li><li><code>str.concat()</code>      用来连接两个或多个字符串</li><li><code>str.includes()</code> 用来检查字符串中是否包含某个内容（返回<code>true、false</code>）</li><li><code>str.indexof()</code></li><li><code>str.lastIndexof()</code>   查询字符串中是否包含某个内容</li><li><code>str.startswith()</code>    检查一个字符串是否以指定内容开头</li><li>……</li></ol></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li>用来定义一个规则，通过这个规则计算机可以检查一个字符串是否符合规则，或者将字符串中符合规则的内容提取出来</li><li>也是<code>JS</code>中的一个对象，所以要使用正则表达式，需要先创建正则表达式的对象。</li></ul><p><strong><code>new RegExp()</code></strong>可以接收两个参数（字符串）：</p><ol><li>正则表达 </li><li>匹配模式（<code>i:ignore，g:global</code>）</li></ol><p>通过构造函致来创建一个正则表达式的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br></pre></td></tr></table></figure><p> 使用字面量来创建正则表达式： <code>/正则表达式/匹配模式</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/a/i</span> <span class="comment">// /a/表示，检查一个字符串中是否有a</span></span><br></pre></td></tr></table></figure><ol><li>在正则表达式中大部分字符都可以直接写</li><li><code>|</code>在正则表达式中表示或</li><li><code>[]</code>表示<strong><em>或</em></strong>（字符集）：<ul><li><code>[a-z]</code>任意的小写字母   </li><li><code>[A-Z]</code>任意的大写字母</li><li><code>[a-zA-Z]</code>任意的字母  </li><li><code>[0-9]</code>任意数字     </li><li><code>[a-zA-Z0-9]</code></li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/[a-z]/i</span> <span class="comment">// 匹配模式i表示忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> result = reg.<span class="title function_">test</span>(<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol><li><code>[^]</code>表示除了    例，<code>[^x]</code>除了<code>x</code></li><li><code>.</code>表示除了换行外的任意字符</li><li>在正则表达式中使用<code>\</code>作为转义字符</li><li><p>其他的字符集：</p><ul><li><code>\w</code>  任意的单词字符  <code>===  [ A-Za-z0-9_ ]</code></li><li><code>\W</code>  除了单词字符      <code>===  [ A-Za-z0-9_ ]</code></li><li><code>\d</code>  任意数字  <code>===  [0-9]</code>       </li><li><code>\D</code>  除了数字  <code>===  [^0-9]</code> </li><li><code>\s</code>   空格           <code>\S</code>  除了空格</li><li><code>\b</code>   单词边界    <code>\B</code>  除了单词边界</li></ul></li><li><p>开头和结尾：  <code>^</code>  表示字符串的开头      <code>$</code>  表示字符串的结尾</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/^abc$/</span> <span class="comment">// 完全匹配,要求字符串必须和正则完全一致</span></span><br><span class="line"><span class="keyword">let</span> result = reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>) <span class="comment">// ab ≠ abc</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>​         </p><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p> <code>&#123;m&#125;</code>     正好<code>m</code>个           <code>+</code>  一个以上，相当于<code>&#123;1, &#125;</code></p><p> <code>&#123;m, &#125;</code>  至少<code>m</code>个           <code>*</code>   任意数量    例，<code>reg = /ba*/</code>，任意数量的<code>a</code></p><p> <code>&#123;m,n&#125;</code>  <code>m-n</code>个               <code>？</code>  <code>0-1</code>次，相当于<code>&#123;0, 1&#125;</code></p><h4 id="exec方法"><a href="#exec方法" class="headerlink" title="exec方法"></a><code>exec</code>方法</h4><p><code>re.exec()</code>     获取字符串中符合正则表达式的内容</p><p>提取出<code>str1</code>中符合<code>axc</code>格式的内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;abcaecafcacc&quot;</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/a([a-z])c/ig</span> <span class="comment">// g表示全局匹配</span></span><br><span class="line">result = re.<span class="title function_">exec</span>(str1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// abc b    aec e   afc f    acc c</span></span><br><span class="line"><span class="comment">// while(result = re.exec(str1))&#123;</span></span><br><span class="line"><span class="comment">//    console.log(result[0], result[1])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>​    </p><p><strong><em>练习：</em></strong><code>dajdh13715678903jasddkjg13457890657djasha13811678908sdaasd</code>，取出手机号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/1[3-9]\d&#123;9&#125;/g</span></span><br><span class="line"><span class="comment">//reg1 = /(1[3-9]\d)\d&#123;4&#125;(\d&#123;4&#125;)/g</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;dajdh13715678903jasddkjg13457890657djasha13811678908sdaasd&quot;</span></span><br><span class="line"><span class="keyword">while</span>( result = reg1.<span class="title function_">exec</span>(str2) )&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>])</span><br><span class="line">  <span class="comment">// console.log(result[1] + &quot;****&quot; + result[2])</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ol><li><code>split()</code>      -  可以根据正则表达式来对一个字符串进行拆分</li><li><code>search()</code>    -  可以去搜索符合正则表达式的内容第一次在字符串中出现的位置</li><li><code>replace()</code>   -  根据正则表达式替换字符串中的指定内容</li><li><code>match()</code>      -  根据正则表达式去匹配字符串中符合要求的内容</li><li><code>matchAll()</code>  -  根据正则表达式去匹配字符串中符合要求的内容（必须设置g 全局匹配）。它返回的是一个迭代器</li></ol><h3 id="垃圾回收（Garbage-collection）"><a href="#垃圾回收（Garbage-collection）" class="headerlink" title="垃圾回收（Garbage collection）"></a>垃圾回收（<code>Garbage collection</code>）</h3><p>在程序的世界中，什么是垃圾?</p><ul><li>如果一个对象<strong><em>没有</em></strong> 任何的变量对其进行<strong><em>引用</em></strong>，那么这个对象就是一个垃圾</li><li>垃圾对象的存在，会严重的影响程序的性能</li><li>在<code>JS</code>中有自动的垃圾回收机制，这些垃圾对象会被解释器自动回收，无需手动处理</li><li>对于垃圾回收来说，我们唯一能做的事情就是将不再使用的变量设置为<code>null</code></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>要使用<code>DOM</code>来操作网页，需要浏览器至少得先给我一个对象，才能去完成各种操作，所以浏览器已经为我们提供了一个<code>document</code>对象，它是一个全局变量可以直接使用，<code>document</code>代表的是整个网页。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>) <span class="comment">// 获取btn对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn.<span class="property">innerText</span> = <span class="string">&quot;button&quot;</span> <span class="comment">// 修改btn中的文字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="文档节点"><a href="#文档节点" class="headerlink" title="文档节点"></a>文档节点</h3><p><code>document</code>对象：表示的是整个网页</p><ul><li><code>document</code>对象的原型链：</li></ul><p><code>HTMLDocument -&gt; Document -&gt; Node -&gt; EventTarget -&gt; 0bject.prototype -&gt; null</code></p><ul><li>凡是在原型链上存在的对象的属性和方法都可以通过Document去调用</li><li>部分属性：<ol><li><code>document.documentElement --&gt; html</code>根元素</li><li><code>document.head    --&gt;  head</code>元素</li><li><code>document.title   --&gt;  title</code>元素</li><li><code>document.body    --&gt;  body</code>元素</li><li><code>document.links   --&gt;</code>  获取页面中所有的超链接</li><li><code>……</code></li></ol></li></ul><h3 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h3><p>元素节点对象（<code>element</code>）</p><ul><li>在网页中，每一个标签都是一个元素节点</li><li>获取元素节点对象：<ol><li>通过<code>document</code>对象来获取元素节点</li><li>通过<code>document</code>对象来创建元素节点</li></ol></li><li>通过<code>document</code>来<span style="color:red"><strong><em>获取</em></strong> </span>已有的元素节点：<ol><li><code>document.getElementById()</code>          根据<code>id</code>获取一个元素节点对象</li><li><code>document.getElementsByClassName()</code>  根据元素的<code>class</code>属性值获取<strong><em>一组</em></strong>元素节点对象。返回的是一个类数组对象，是一个实时更新的集合，当网页中新添加元素时，集合也会实时的刷新</li><li><code>document-getElementsByTagName()</code>    根据标签名获取一组元素节点对象。返回的结果是可以实时更新的集合</li><li><code>document.getElementsByTagName(&quot; * &quot;)</code>    获取页面中所有的元素</li><li><code>document.getElementsByName()</code>      根据<code>name</code>属性获取一组元素节点对象。返回一个实时更新的集合，主要用于表单项</li><li><code>document.querySelectorAll()</code>   根据选择器去页面中查询元素。会返回一个类数组（不会实时更新）</li><li><code>document.querySelector()</code> 根据选择器去页面中查询第一个符合条件的元素</li></ol></li><li><span style="color:red"><strong><em>创建</em></strong> </span>一个元素节点：<ul><li><code>document.createElement()</code>        根据标签名创建一个元素节点对象</li></ul></li></ul><h4 id="元素的属性和方法"><a href="#元素的属性和方法" class="headerlink" title="元素的属性和方法"></a>元素的属性和方法</h4><p><code>div</code>元素的原型链：<code>HTMLDivElement -&gt; HTMLElement -&gt; Element -&gt; Node -&gt; ...</code></p><p>通过元素节点对象获取其他节点的方法：</p><ol><li><code>element.childNodes</code>             获取当前元素的子节点（会包含空白的子节点)</li><li><code>element.children</code>                 获取当前元素的子元素</li><li><code>element.firstElementchild</code>            获取当前元素的第一个子元素</li><li><code>element.lastElementChild</code>              获取当前元素的最后一个子元素</li><li><code>element.nextElementSibling</code>           获取当前元素的下一个兄弟元素</li><li><code>element.previousElementSibling</code>    获取当前元素的前一个兄弟元素</li><li><code>element.parentNode</code>           获取当前元素的父节点</li><li><code>element.tagName</code>                获取当前元素的标签名</li></ol><h3 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h3><p>在<code>DOM</code>中，网页中所有的文本内容都是文本节点对象，可以通过元素来获取其中的文本节点对象，但是我们通常不会这么做，我们可以直接通过元素去修改其中的文本</p><p><strong><em>修改文本</em></strong> 的三个属性：</p><ol><li><p><code>element.textContent</code>    获取或修改元素中的文本内容。</p><ul><li>获取的是标签中的内容，不会考虑<code>css</code>样式</li></ul></li><li><p><code>element.innerText</code>   获取或修改元素中的文本内容，获取内容时会<strong><em>考虑css样式</em></strong></p><ul><li><p>通过<code>innerText</code>去读取<code>CSS</code>样式，会触发网页的重排（计算<code>CSS</code>样式）</p></li><li><p>当字符串中有标签时，会自动对标签进行转义。例：<code>&lt;li&gt; --&gt; δlt;liδgt;</code></p></li></ul></li><li><p><code>`element.innerHTML</code>    获取或修改元素中的<code>html</code>代码</p><ul><li>可直接向元素中添加<code>html</code>代码，但插入内容时，有被<code>xss</code>注入的风险</li></ul></li></ol><h3 id="属性节点（attr）"><a href="#属性节点（attr）" class="headerlink" title="属性节点（attr）"></a>属性节点（<code>attr</code>）</h3><ul><li>在<code>DOM</code>也是一个对象，通常不需要获取对象而是直接通过元素即可完成对其的操作</li><li>如何操作属性节点：<ol><li>方式一：<ol><li>读取：<code>元素.属性名</code>（注意，<code>class</code>属性需要使用<code>className</code>来读取）<ul><li>读取一个布尔值时，会返回<code>true</code>或<code>false</code></li></ul></li><li>修改：<code>元素.属性名 = 属性值</code></li></ol></li><li>方式二：<ol><li>读取：<code>元素.getAttribute(属性名)</code></li><li>修改：<code>元素.setAttribute(属性名，属性值)</code></li><li>删除：<code>元素.removeAttribute(属性名)</code></li></ol></li></ol></li></ul><h3 id="事件（event）"><a href="#事件（event）" class="headerlink" title="事件（event）"></a>事件（<code>event</code>）</h3><ul><li>事件就是用户和页面之间发生的交互行为。比如：点击按钮、鼠标移动、…..</li><li>可以通过为事件绑定响应函数（回调函数），来完成和用户之间的交互</li><li>绑定响应函数的方式：<ol><li>可以直接在元素的属性中设置</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;警告!警告!&#x27;)&quot;</span>&gt;</span>点击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    2. 可以通过为元素的指定属性设置回调函数的形式来绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElemetById</span>(<span class="string">&quot;btn&quot;</span>)</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;警告!警告!&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure><p>​    3. 可以通过元素<code>addEventListener()</code>方法来绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="网页的加载"><a href="#网页的加载" class="headerlink" title="网页的加载"></a>网页的加载</h3><p>网页是自上向下加载的，如果将<code>js</code>代码编写到网页的上边，<code>js</code>代码在执行时，网页还没有加载完毕，这时会出现无法获取到<code>DOM</code>对象的情况</p><p>如何解决这个问题：</p><ol><li>将<code>script</code>标签编写到<code>body</code>的最后</li><li>将代码编写到<code>window.onload</code>的回调函数中</li><li>将代码编写到<code>document</code>对象的<code>DOMContentLoaded</code>的回调函数中（执行时机更早） <code>document.addEventListener(&quot;DOMContentLoaded&quot;, function()&#123;&#125;</code></li><li>将代码编写到<strong><em>外部js文件</em></strong> 中，然后以<code>defer</code>的形式进行引入（执行时机更早，早于<code>DOMContentLoaded</code>)    <span style="color:red">⭐⭐⭐⭐</span></li></ol><p><strong><em>注：</em></strong></p><ul><li><code>window.onload</code>事件会在窗口中的内容加载完毕之后才触发</li><li><code>document</code>的<code>DOMContentLoaded</code>事件会在当前文档加载完毕之后触发</li></ul><h3 id="元素的修改"><a href="#元素的修改" class="headerlink" title="元素的修改"></a>元素的修改</h3><ol><li><strong>添加元素：</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>)</span><br><span class="line">btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">  li.<span class="property">textContent</span> = <span class="string">&quot;Joy&quot;</span></span><br><span class="line">  li.<span class="property">id</span> = <span class="string">&quot;pxr&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>appendchild()</code>    用于给一个节点添加子节点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="title function_">appendChild</span>(li)<span class="comment">//添加元素①</span></span><br></pre></td></tr></table></figure><ul><li><code>linsertAdjacentElement()</code>   可以向元素的任意位置添加元素<ul><li>两个参数：1. 要添加的位置   2. 要添加的元素<ul><li><code>beforeend</code>  标签的最后      <code>afterbegin</code>  标签的开始</li><li><code>beforebegin</code>  在元素的前边插入元素（兄弟元素）</li><li><code>afterend</code>     在元素的后边插入元素（兄弟元素）</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="title function_">insertAdjacentElement</span>(<span class="string">&quot;afterend&quot;</span>, li) <span class="comment">//添加元素②</span></span><br></pre></td></tr></table></figure><ul><li><code>insertAdjacentHTML(&quot; beforeend &quot;,  &quot; &lt;li id= &#39; ** &#39;&gt; **** &lt;/li&gt; &quot;)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeend&quot;</span>, <span class="string">&quot;&lt;li id=&#x27;jyl&#x27;&gt;Yeri&lt;/li&gt;&quot;</span>)<span class="comment">//添加③</span></span><br></pre></td></tr></table></figure><ol><li><strong>替换元素：</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pjx = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pjx&quot;</span>)</span><br><span class="line">pjx.<span class="title function_">replaceWith</span>(li)</span><br></pre></td></tr></table></figure><ol><li><strong>删除元素：</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pjx.<span class="title function_">remove</span>(li)</span><br></pre></td></tr></table></figure><p>练习3：员工信息（增删）       见js11_DOMexercise\03_employeeInfo.html\</p><h3 id="节点的复制"><a href="#节点的复制" class="headerlink" title="节点的复制"></a>节点的复制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newPjx = pjx.<span class="title function_">cloneNode</span>();</span><br></pre></td></tr></table></figure><p>使用<code>cloneNode()</code>方法对节点进行复制时，它会复制节点的所有特点包括各种属性。这个方法默认<strong><em>只会复制当前节点</em></strong>，而不会复制节点的子节点，可以传递一个<strong><em>true</em></strong> 作为参数，这样该方法也会将元素的子节点一起复制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newPjx = pjx.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line">newPjx.<span class="property">id</span> = <span class="string">&quot;newPjx&quot;</span></span><br><span class="line">list2.<span class="title function_">appendChild</span>(newPjx)</span><br></pre></td></tr></table></figure><h3 id="修改CSS样式"><a href="#修改CSS样式" class="headerlink" title="修改CSS样式"></a>修改<code>CSS</code>样式</h3><p>方式：<code>元素.style.样式名 = 样式值</code></p><p>注：如果样式名中含有<code>-</code>，则需要将样式表修改为驼峰命名法。如，<code>background-color -&gt; backgroundColor</code></p><h3 id="读取样式"><a href="#读取样式" class="headerlink" title="读取样式"></a>读取样式</h3><p><code>getComputedStyle()</code></p><ul><li>它会返回一个一个对象，这个对象中包含了当前元素所有的<strong><em>生效</em></strong>的样式</li><li>参数：1. 要获取样式的对象      2. 要获取的伪元素</li><li>返回值：返回的一个对象，对象中存储了当前元素的样式</li><li>注意：样式对象中返回的样式值，不一定能来拿来直接计算（若获取<code>auto</code>时）。所以使用时，一定要确保 值是可以计算的 才去计算</li></ul><h4 id="通过属性读取样式"><a href="#通过属性读取样式" class="headerlink" title="通过属性读取样式"></a>通过属性读取样式</h4><ol><li>获取元素内部的宽度和高度（包括内容区和内边距）：<ol><li><code>元素.clientHeight</code></li><li><code>元素.clientWidth</code></li></ol></li><li>获取元素的可见框的大小（包括内容区、内边距和边框）：<ol><li><code>元素.offsetHeight</code></li><li><code>元素.offsetWidth</code></li></ol></li><li>获取元素滚动区域的大小：<ol><li><code>元素.scrollHeight</code></li><li><code>元素.scrollWidth</code></li></ol></li><li>获取元素的定位父元素：<code>元素.offsetParent</code><ul><li>定位父元素：离当前元素最近的开启了定位的祖先元素，如果所有的元素都没有开启定位则返回<code>body</code></li></ul></li><li>获取元素相对于其定位父元素的偏移量：<ol><li><code>元素.offsetTop</code></li><li><code>元素.offsetLeft</code></li></ol></li><li>获取或设置元素滚动条的偏移量：<ol><li><code>元素.scrollTop</code></li><li><code>元素.scrollLeft</code></li></ol></li></ol><h3 id="操作class属性修改css样式"><a href="#操作class属性修改css样式" class="headerlink" title="操作class属性修改css样式"></a>操作class属性修改css样式</h3><p>通过class修改样式的好处：1. 可以一次性修改多个样式      2．对<code>JS</code>和<code>CSS</code>进行解耦</p><ul><li><code>元素.classList</code>是一个对象，对象中提供了对当前元素的类的各种操作方法</li><li><code>元素.classList.add()</code>     向元素中添加一个或多个<code>class</code> <ul><li>例：<code>box1.classList.add(&quot;box2&quot;, &quot;box3&quot;)</code></li></ul></li><li><code>元素.classList.remove()</code>  移除元素中的一个或多个<code>class</code></li><li><code>元素.classList.toggle()</code>   切换元素中的class     <ul><li>例：<code>box1.classList.toggle(&quot;box2&quot;)</code></li></ul></li><li><code>元素.classList.replace()</code>  替换<code>class</code></li><li><code>元素.classList.contains()</code> 检查<code>class</code>，返回<code>true/false</code></li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>事件对象是由浏览器在事件触发时所创建的，这个对象中封装了事件相关的各种信息</p><p>通过事件对象可以获取到事件的详细信息。比如。鼠标的坐标、键盘的按键…..</p><p>浏览器在创建事件对象后，会将事件对象作为响应函数的参数传递，所以可以在事件的回调函数中定义一个形参来接收事件对象</p><h4 id="Event对象"><a href="#Event对象" class="headerlink" title="Event对象"></a><code>Event</code>对象</h4><p>在<code>DOM</code>中存在着多种不同类型的事件对象，多种事件对象有—个共同的祖先<code>Event</code></p><ul><li><code>event-target</code>            触发事件的对象</li><li><code>event-currentTarget</code>      绑定事件的对象（同<code>this</code>）</li><li><code>event.stopPropagation( )</code>  停止事件的传导</li><li><code>event. preventDefault( )</code>  取消默认行为</li></ul><p><strong><em>事件的冒泡（bubble）</em></strong>：事件的冒泡就是指事件的向上传导</p><ul><li>当元素上的某个事件被触发后，其祖先元素上的相同事件也会同时被触发</li><li>冒泡的存在简化了代码的编写，但在一些情况下不希望冒泡存在。可以通过事件对象来取消冒泡：<code>event.stopPropagation()</code>  停止事件的传导</li></ul><p>在事件的响应函数中：</p><ul><li><code>event.target</code>   表示的是触发事件的对象</li><li><code>this</code>  绑定事件的对象</li></ul><h4 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h4><p>见<code>js\13_event\Bubble.html</code></p><p>事件的冒泡和元素的样式无关，只和结构相关</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box2.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span>&#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>() <span class="comment">// 停止冒泡</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h4><p>见<code>js\14_eventDelegation.html</code></p><p>委派就是将本该绑定给多个元素的事件，统一绑定给<strong><em>document</em></strong>，降低代码复杂度方便维护</p><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><p>事件的传播机制：</p><ul><li><p>在<code>DOM</code>中，事件的传播可以分为三个阶段：</p><ol><li>捕获阶段（由祖先元素向目标元素进行事件的捕获）（默认情况下，事件不会在捕获阶段触发）</li><li>目标阶段（触发事件的对象）</li><li>冒泡阶段（由目标元素向祖先元素进行事件的冒泡）</li></ol></li><li><p>事件的捕获，指事件从外向内的传导。</p><ul><li>当前元素触发事件以后，会先从当前元素最大的祖先元素开始向当前元素进行事件的捕获</li></ul></li><li><p>如果希望在捕获阶段触发事件，可以将<code>addEventListener</code>的第三个参数设置为<code>true</code>。一般情况下我们不希望事件在捕获阶段触发，所以通常都不需要设置第三个参数</p></li></ul><h3 id="BOM：浏览器对象模型"><a href="#BOM：浏览器对象模型" class="headerlink" title="BOM：浏览器对象模型"></a>BOM：浏览器对象模型</h3><ul><li><code>BOM</code>为我们提供了一组对象，通过这组对象可以完成对浏览器的各种操作</li><li><p><code>BOM</code>对象：</p><ul><li><code>window</code>    —    代表浏览器窗口（全局对象）</li><li><code>Navigator</code> —  浏览器的对象（可以用来识别浏览器）</li><li><code>Location</code>  —   浏览器的地址栏信息</li><li><code>History</code>   —    浏览器的历史记录（控制浏览器前进、后退）</li><li><code>Screen</code>    —     屏幕的信息</li></ul></li><li><p><code>BOM</code>对象都是作为<code>window</code>对象的属性保存的，所以可以直接在<code>JS</code>中访问这些对象</p></li></ul><h4 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a><code>Navigator</code></h4><p>浏览器的对象（可以用来识别浏览器）</p><p><code>userAgent</code>  返回一个用来描述浏览器信息的字符串。例，<code>console.log( navigator.userAgent)</code></p><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a><code>Location</code></h4><p>浏览器地址栏的信息</p><ul><li>可以直接将<code>location</code>的值修改为一个新的地址，这样会使得网页发生跳转</li><li><code>location.assign()</code>   跳转到一个新的地址，例，<code>location.assign(&quot;https: //www.izdloyl.cn&quot;)</code></li><li><code>location.replace()</code>   跳转到一个新的地址（无法通过回退按钮回退）</li><li><code>location.reload()</code>   刷新页面，可以传递一个<code>true</code>来强制清缓存刷新 —- <code>location.reload(true)</code></li><li><code>location.href</code>   获取当前地址</li></ul><h4 id="History"><a href="#History" class="headerlink" title="History"></a><code>History</code></h4><ul><li><code>history.back()</code>   - 回退按钮</li><li><code>history.forward()</code>  - 前进按钮</li><li><code>history.go()</code>   - 可以向前跳转也可以向后跳转。例，<code>history.go(-2)</code>  向后回退两个页面</li></ul><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>通过定时器，可以使代码在指定时间后执行</p><ul><li>设置定时器的方式有两种：<ol><li><code>setTimeout()</code>      <ul><li>参数：1．回调函数（要执行的代码）   2．间隔的时间（毫秒）</li><li>关闭定时器：<code>clearTimeout()</code></li></ul></li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;开启定时器&quot;</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"><span class="built_in">clearTimeout</span>(timer)</span><br></pre></td></tr></table></figure><pre><code> 2. `setInterval()`        每间隔一段时间代码就会执行一次 - 参数：1．回调函数（要执行的代码）2．间隔的时间（毫秒） - 关闭定时器：`clearInterval()`</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numH1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">  num++</span><br><span class="line">  numH1.<span class="property">textContent</span> = num</span><br><span class="line">  <span class="keyword">if</span>(num === <span class="number">200</span>)&#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(timer) <span class="comment">// 计数达到200则关闭定时器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>事件循环（<code>event loop</code>）：</p><ul><li>函数在每次执行时，都会产生一个执行环境，执行环境负责存储函数执行时产生的一切数据</li><li>问题：函数的执行环境要存储到哪里呢？   ——  存储在调用栈</li><li><strong><em>栈</em></strong>，是一种数据结构，特点<span style="color: #4472c4"><strong><em>后进先出（先入后出）</em></strong></span></li><li><strong><em>队列</em></strong>，是一种数据结构，特点<span style="color: #4472c4"><strong><em>先进先出</em></strong></span></li></ul><p>调用栈（<code>call stack</code>）：负责存储函数的执行环境</p><ul><li>当一个函数被调用时，它的执行环境会作为一个栈帧插入到调用栈的栈顶，函数执行完毕其栈帧会自动从栈中弹出</li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>负责存储将要执行的函数</p><ul><li>当我们触发—个事件时，其响应函数并不是直接就添加到调用栈中的。因为调用栈中有可能会存在一些还没有执行完的代码（像点击事件……）</li><li>事件触发后，<code>JS</code>引擎是将事件响应函数插入到消息队列中排队</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408221034178.jpg" alt=""> </p><h4 id="定时器（补充）"><a href="#定时器（补充）" class="headerlink" title="定时器（补充）"></a>定时器（补充）</h4><p>定时器的本质，就是在指定时间后将函数添加到消息队列中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>()<span class="comment">//6020.81201171875 ms</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器已执行&quot;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"><span class="comment">// 使程序卡6s</span></span><br><span class="line"><span class="keyword">const</span> begin = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"><span class="keyword">while</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - begin &lt; <span class="number">6000</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>  <code>setInterval()</code>     每间隔一段时间就将函数添加到消息队列中。但是如果函数执行的速度比较慢，则无法确保每次执行的间隔都是一样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;间隔&quot;</span>)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;间隔&quot;</span>)</span><br><span class="line">  <span class="comment">// console.log(&quot;定时器已执行&quot;)</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;定时器执行&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;间隔&quot;</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2024/08/23/frontEnd-TypeScript/"/>
      <url>/2024/08/23/frontEnd-TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript快速上⼿"><a href="#TypeScript快速上⼿" class="headerlink" title="TypeScript快速上⼿"></a>TypeScript快速上⼿</h1><h2 id="⼀、TypeScript简介"><a href="#⼀、TypeScript简介" class="headerlink" title="⼀、TypeScript简介"></a>⼀、TypeScript简介</h2><ol><li>TypeScript由微软开发，是基于JavaScript的⼀个扩展语⾔。</li><li>TypeScript包含了JavaScript的所有内容，即：TypeScript是JavaScript的<span  style="color:red"><strong>超集</strong></span>。</li><li>TypeScript增加了：静态类型检查、接口、 泛型等很多现代开发特性，更适合<span  style="color:red"><strong>⼤型项⽬</strong></span>的开发。</li><li>TypeScript需要<span  style="color:red"><strong>编译</strong></span>为JavaScript，然后交给浏览器或其他JavaScript运⾏环境执⾏。</li></ol><h2 id="⼆、为何需要TypeScript"><a href="#⼆、为何需要TypeScript" class="headerlink" title="⼆、为何需要TypeScript"></a>⼆、为何需要TypeScript</h2><p>1️⃣今⾮昔⽐的JavaScript（了解）</p><ul><li>JavaScript当年诞⽣时的定位是浏览器<strong><em>脚本语⾔</em></strong>，⽤于在⽹⻚中嵌⼊简单的逻辑，且代码量很少。</li><li>随着时间的推移，JavaScript变得越来越流⾏，如今的JavaScript已经可以全栈编程了。</li><li>现如今的JavaScript应⽤场景⽐当年丰富的多，代码量也⽐当年⼤很多，随便⼀个JavaScript项⽬的代码量，可以轻松的达到⼏万⾏，甚⾄⼗⼏万⾏！</li><li>然⽽JavaScript当年“出⽣简陋”，没考虑到如今的应⽤场景和代码量，逐渐就出现了很多困扰。</li></ul><p>2️⃣JavaScript中的困扰</p><p>😞 1. 不清楚的数据类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> welcome = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="title function_">welcome</span>() <span class="comment">// 此⾏报错：TypeError: welcome is not a function</span></span><br></pre></td></tr></table></figure><p>😞 2. 有漏洞的逻辑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> ? <span class="string">&#x27;奇数&#x27;</span> : <span class="string">&#x27;偶数&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(str !== <span class="string">&#x27;奇数&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str === <span class="string">&#x27;偶数&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>😞 3. 访问不存在的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">width</span>: <span class="number">10</span>, <span class="attr">height</span>: <span class="number">15</span> &#125;</span><br><span class="line"><span class="keyword">const</span> area = obj.<span class="property">width</span> * obj.<span class="property">heigth</span></span><br></pre></td></tr></table></figure><p>😞 4. 低级的拼写错误</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line">message.<span class="title function_">toUperCase</span>()</span><br></pre></td></tr></table></figure><p>3️⃣『<strong><em>静态类型检查</em></strong> 』</p><p>● 在代码运⾏前进⾏检查，发现代码的错误或不合理之处，减⼩运⾏时出现异常的⼏率，此种检查叫『<span  style="color:red"><strong>静态类型检查</strong></span>』，TypeScript和核⼼就是『静态类型检查』，简⾔之就是<span  style="color:red"><strong>把运⾏时的错误前置</strong></span>。</p><p>● 同样的功能，TypeScript的代码量要<span  style="color:red"><strong>⼤于</strong></span>JavaScript，但由于TypeScript的代码结构更加清晰，在后期代码的维护中TypeScript却<span  style="color:red"><strong>胜于</strong></span>JavaScript。</p><h2 id="三、编译TypeScript"><a href="#三、编译TypeScript" class="headerlink" title="三、编译TypeScript"></a>三、编译<code>TypeScript</code></h2><p>浏览器不能直接运⾏TypeScript代码，需要编译为JavaScript再交由浏览器解析器执⾏。</p><h3 id="1-命令⾏编译"><a href="#1-命令⾏编译" class="headerlink" title="1. 命令⾏编译"></a><strong>1.</strong> 命令⾏编译</h3><p>要把<code>.ts</code>⽂件编译为<code>.js</code>⽂件，需要配置TypeScript的编译环境，步骤如下：</p><ol><li>创建⼀个<code>demo.ts</code>⽂件，例如：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;person.name&#125;</span>，我今年<span class="subst">$&#123;person.age&#125;</span>岁了`</span>)</span><br></pre></td></tr></table></figure><ol><li>全局安装<code>TypeScript</code></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g</span><br></pre></td></tr></table></figure><ol><li>使⽤命令编译<code>.ts</code>⽂件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc demo.<span class="property">ts</span></span><br></pre></td></tr></table></figure><h3 id="2-自动化编译"><a href="#2-自动化编译" class="headerlink" title="2. 自动化编译"></a>2. 自动化编译</h3><ol><li>创建<code>TypeScript</code>编译控制文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><ul><li>⼯程中会⽣成⼀个<code>tsconfig.json</code>配置⽂件，其中包含着很多编译时的配置。</li><li>观察发现，默认编译的<code>JS</code>版本是<code>ES7</code>，我们可以⼿动调整为其他版本。</li></ul><ol><li>监视⽬录中的<code>.ts</code>⽂件变化</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --watch 或 tsc -w</span><br></pre></td></tr></table></figure><ol><li>小优化，当编译出错时不生成<code>.js</code>文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --noEmitOnError --watch</span><br></pre></td></tr></table></figure><p>备注：当然也可以修改<code>tsconfig.json</code>中的<code>noEmitOnError</code>配置</p><h2 id="四、类型声明"><a href="#四、类型声明" class="headerlink" title="四、类型声明"></a>四、类型声明</h2><p>使⽤<code>:</code>来对变量或函数形参，进⾏类型声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> <span class="comment">// 变量a只能存储字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span> <span class="comment">// 变量b只能存储数值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">boolean</span> <span class="comment">// 变量c只能存储布尔值</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">a = <span class="number">100</span> <span class="comment">// 警告：不能将类型“number”分配给类型“string”</span></span><br><span class="line">b = <span class="number">666</span></span><br><span class="line">b = <span class="string">&#x27;你好&#x27;</span><span class="comment">// 警告：不能将类型“string”分配给类型“number”</span></span><br><span class="line">c = <span class="literal">true</span></span><br><span class="line">c = <span class="number">666</span> <span class="comment">// 警告：不能将类型“number”分配给类型“boolean”</span></span><br><span class="line"><span class="comment">// 参数x必须是数字，参数y也必须是数字，函数返回值也必须是数字</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="built_in">number</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>(<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line"><span class="title function_">demo</span>(<span class="number">100</span>,<span class="string">&#x27;200&#x27;</span>) <span class="comment">// 警告：类型“string”的参数不能赋给类型“number”的参数</span></span><br><span class="line"><span class="title function_">demo</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>) <span class="comment">// 警告：应有 2 个参数，但获得 3 个</span></span><br><span class="line"><span class="title function_">demo</span>(<span class="number">100</span>) <span class="comment">// 警告：应有 2 个参数，但获得 1 个</span></span><br></pre></td></tr></table></figure><p>在<code>:</code>后也可以写字⾯量类型，不过实际开发中⽤的不多。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="string">&#x27;你好&#x27;</span> <span class="comment">// a的值只能为字符串“你好”</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="number">100</span> <span class="comment">// b的值只能为数字100</span></span><br><span class="line">a = <span class="string">&#x27;欢迎&#x27;</span> <span class="comment">// 警告：不能将类型“&quot;欢迎&quot;”分配给类型“&quot;你好&quot;”</span></span><br><span class="line">b = <span class="number">200</span> <span class="comment">// 警告：不能将类型“200”分配给类型“100”</span></span><br></pre></td></tr></table></figure><h2 id="五、类型推断"><a href="#五、类型推断" class="headerlink" title="五、类型推断"></a>五、类型推断</h2><p><code>TS</code> 会根据我们的代码，进⾏类型推导，例如下⾯代码中的变量 <code>d</code> ，只能存储数字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d = -<span class="number">99</span> <span class="comment">// TypeScript会推断出变量d的类型是数字</span></span><br><span class="line">d = <span class="literal">false</span> <span class="comment">// 警告：不能将类型&quot;boolean&quot;分配给类型&quot;number&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>但要注意，类型推断不是万能的，⾯对复杂类型时推断容易出问题，所以尽量还是明确的编写类型声明！</p></blockquote><h2 id="六、类型总览"><a href="#六、类型总览" class="headerlink" title="六、类型总览"></a>六、类型总览</h2><h3 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a><code>JavaScript</code>的数据类型</h3><ol><li><strong><code>string</code></strong></li><li><strong><code>number</code></strong></li><li><strong><code>boolean</code></strong></li><li><strong><code>null</code></strong></li><li><strong><code>undefined</code></strong></li><li><strong><code>bigint</code></strong></li><li><strong><code>symbol</code></strong></li><li><strong><code>object</code></strong></li></ol><blockquote><p>备注：其中 <strong><code>object</code></strong> 包含： <strong><code>Array</code></strong> 、 <strong><code>Function</code></strong> 、 <strong><code>Date</code></strong> 、 <strong><code>Error</code></strong> 等……</p></blockquote><h3 id="TavaScript的数据类型"><a href="#TavaScript的数据类型" class="headerlink" title="TavaScript的数据类型"></a><code>TavaScript</code>的数据类型</h3><ol><li>上述所有<code>JavaScript</code>类型</li><li>六个新类型：<ol><li><strong><code>any</code></strong></li><li><strong><code>unknown</code></strong></li><li><strong><code>never</code></strong></li><li><strong><code>void</code></strong></li><li><strong><code>tuple</code></strong></li><li><strong><code>enum</code></strong></li></ol></li><li>两个⽤于⾃定义类型的⽅式：<ol><li><strong><code>type</code></strong></li><li><strong><code>interface</code></strong></li></ol></li></ol><h3 id="注意点！"><a href="#注意点！" class="headerlink" title="注意点！"></a>注意点！</h3><p>在<code>JavaScript</code>中的这些内置构造函数：<code>Number</code>、<code>String</code>、<code>Boolean</code>，⽤于创建对应的包装对象， 在⽇常开发时很少使⽤，在<code>TypeScript</code>中也是同理，所以在<code>TypeScript</code>中进⾏类型声明时，通常都是⽤⼩写的<code>number</code>、<code>string</code>、<code>boolean</code></p><p>例如下面这段代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>: <span class="built_in">string</span></span><br><span class="line">str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>: <span class="title class_">String</span></span><br><span class="line">str2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str2)</span><br></pre></td></tr></table></figure><ol><li><p>原始类型 VS 包装对象</p><ul><li>原始类型：如<code>number</code> 、<code>string</code> 、<code>boolean</code> ，在JavaScript中是简单数据类型，它们在内存中占⽤空间少，处理速度快。</li><li>包装对象：如<code>Number</code>对象、<code>String</code>对象、<code>Boolean</code>对象，是复杂类型，在内存中占⽤更多空间，在⽇常开发时很少由开发⼈员⾃⼰创建包装对象。</li></ul></li><li><p>⾃动装箱：JavaScript在必要时会⾃动将原始类型包装成对象，以便调⽤⽅法或访问属性</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始类型字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// 当访问str.length时，JavaScript引擎做了以下⼯作：</span></span><br><span class="line"><span class="keyword">let</span> size = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. ⾃动装箱：创建⼀个临时的String对象包装原始字符串</span></span><br><span class="line">  <span class="keyword">let</span> tempStringObject = <span class="keyword">new</span> <span class="title class_">String</span>(str)</span><br><span class="line">  <span class="comment">// 2. 访问String对象的length属性</span></span><br><span class="line">  <span class="keyword">let</span> lengthValue = tempStringObject.<span class="property">length</span></span><br><span class="line">  <span class="comment">// 3. 销毁临时对象，返回⻓度值</span></span><br><span class="line">  <span class="comment">// （JavaScript引擎⾃动处理对象销毁，开发者⽆感知）</span></span><br><span class="line">  <span class="keyword">return</span> lengthValue</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(size) <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><h2 id="七、常⽤类型与语法"><a href="#七、常⽤类型与语法" class="headerlink" title="七、常⽤类型与语法"></a>七、常⽤类型与语法</h2><h3 id="1-any"><a href="#1-any" class="headerlink" title="1.any"></a>1.<code>any</code></h3><p><code>any</code>的含义是：任意类型，⼀旦将变量类型限制为<code>any</code>，那就意味着<strong>放弃</strong>了对该变量的类型检查。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明确的表示a的类型是 any —— 【显式的any】</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span></span><br><span class="line"><span class="comment">// 以下对a的赋值，均⽆警告</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">a = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">a = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 没有明确的表示b的类型是any，但TS主动推断出来b是any —— 隐式的any</span></span><br><span class="line"><span class="keyword">let</span> b</span><br><span class="line"><span class="comment">// 以下对b的赋值，均⽆警告</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">b = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">b = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注意点：<code>any</code>类型的变量，可以赋值给任意类型的变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意点：any类型的变量，可以赋值给任意类型的变量 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="built_in">any</span></span><br><span class="line">c = <span class="number">9</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">string</span></span><br><span class="line">x = c <span class="comment">// ⽆警告</span></span><br></pre></td></tr></table></figure><h3 id="2-unknown"><a href="#2-unknown" class="headerlink" title="2.unknown"></a>2.<code>unknown</code></h3><p><code>unknown</code>的含义是：<strong><em>未知类型</em></strong>，适⽤于：起初不确定数据的具体类型，要后期才能确定</p><ol><li><code>unknown</code>可以理解为⼀个类型安全的<code>any</code>。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置a的类型为unknown</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span></span><br><span class="line"><span class="comment">//以下对a的赋值，均符合规范</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">a = <span class="literal">false</span></span><br><span class="line">a = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="comment">// 设置x的数据类型为string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">string</span></span><br><span class="line">x = a <span class="comment">//警告：不能将类型“unknown”分配给类型“string”</span></span><br></pre></td></tr></table></figure><ol><li><code>unknown</code>会强制开发者在使⽤之前进⾏类型检查，从⽽提供更强的类型安全性。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置a的类型为unknown</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">//第⼀种⽅式：加类型判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">  x = a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第⼆种⽅式：加断⾔</span></span><br><span class="line">x = a <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line"><span class="comment">//第三种⽅式：加断⾔</span></span><br><span class="line">x = &lt;<span class="built_in">string</span>&gt;a</span><br></pre></td></tr></table></figure><ol><li>读取<code>any</code>类型数据的任何属性都不会报错，⽽<code>unknown</code>正好与之相反。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>: <span class="built_in">string</span></span><br><span class="line">str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str1.<span class="title function_">toUpperCase</span>() <span class="comment">//⽆警告</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>: <span class="built_in">any</span></span><br><span class="line">str2 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str2.<span class="title function_">toUpperCase</span>() <span class="comment">//⽆警告</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str3</span>: <span class="built_in">unknown</span></span><br><span class="line">str3 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str3.<span class="title function_">toUpperCase</span>() <span class="comment">//警告：“str3”的类型为“未知”</span></span><br><span class="line"><span class="comment">// 使⽤断⾔强制指定str3的类型为string</span></span><br><span class="line">(str3 <span class="keyword">as</span> <span class="built_in">string</span>).<span class="title function_">toUpperCase</span>() <span class="comment">//⽆警告</span></span><br></pre></td></tr></table></figure><h3 id="3-never"><a href="#3-never" class="headerlink" title="3.never"></a>3.<code>never</code></h3><p><code>never</code>的含义是：任何值都不是，即：不能有值，例如<code>undefined</code>、<code>null</code>、<code>&#39;&#39;</code>、<code>0</code>都不⾏！</p><ol><li>⼏乎不⽤<code>never</code>去直接限制变量，因为没有意义，例如：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 指定a的类型为never，那就意味着a以后不能存任何的数据了 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">never</span></span><br><span class="line"><span class="comment">// 以下对a的所有赋值都会有警告</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="literal">true</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line">a = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ol><li><code>never</code>⼀般是<code>TypeScript</code>主动推断出来的，例如：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定a的类型为string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line"><span class="comment">// 给a设置⼀个值</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toUpperCase</span>()) <span class="comment">// toUpperCase() 将字符串转换为大写字母</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// TypeScript会推断出此处的a是never，因为没有任何⼀个值符合此处的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>never</code>也可⽤于限制函数的返回值。（函数要么永远循环不完要么不正常结束）</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制throwError函数不需要有任何返回值，任何值都不⾏，像undeifned、null都不⾏</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;程序异常退出:&#x27;</span> + str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-void"><a href="#4-void" class="headerlink" title="4.void"></a>4.<code>void</code></h3><p><code>void</code>的含义是空，即：函数不返回任何值，调⽤者也不应依赖其返回值进⾏任何操作！</p><ol><li><code>void</code>通常⽤于函数返回值声明</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">msg:<span class="built_in">string</span></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">logMessage</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意：编码者没有编写<code>return</code>指定函数返回值，所以<code>logMessage</code>函数是没有 <em>显式返回值</em> 的，但会有⼀个<span style="color:red">隐式返回值</span> ，是<code>undefined</code>，虽然函数返回类型为<code>void</code>，但也是可以接受<code>undefined</code>的，简单记：<strong><code>undefined</code></strong>是<strong><code>void</code></strong>可以接受的⼀种“空”。</p><ol><li>以下写法均符合规范</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⽆警告</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">msg:<span class="built_in">string</span></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ⽆警告</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">msg:<span class="built_in">string</span></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ⽆警告</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">msg:<span class="built_in">string</span></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>那限制函数返回值时，是不是<code>undefined</code>和<code>void</code>就没区别呢？—— 有区别。因为还有这句话 ：【<strong><em>返回值类型为<code>void</code>的函数，调⽤者不应依赖其返回值进⾏任何操作！</em></strong>】对⽐下⾯两段代码：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">msg:<span class="built_in">string</span></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">logMessage</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(result)&#123; <span class="comment">// 此⾏报错：⽆法测试 &quot;void&quot; 类型的表达式的真实性</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;logMessage有返回值&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">msg:<span class="built_in">string</span></span>):<span class="literal">undefined</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">logMessage</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(result)&#123; <span class="comment">// 此⾏⽆警告</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;logMessage有返回值&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>理解<code>void</code>与<code>undefined</code></em></strong></p><ul><li><code>void</code>是⼀个⼴泛的概念，⽤来表达“空”，⽽<code>undefined</code>则是这种“空”的具体实现。</li><li>因此可以说<code>undefined</code>是<code>void</code>能接受的⼀种“空”的状态。</li><li>也可以理解为：<code>void</code>包含<code>undefined</code>，但<code>void</code>所表达的语义超越了<code>undefined</code>，<code>void</code>是⼀种意图上的约定，⽽不仅仅是特定值的限制。 </li></ul><p><strong><em>总结：</em></strong></p><p>如果⼀个函数返回类型为<code>void</code>，那么：</p><ol><li><p>从<strong>语法</strong>上讲：函数是可以返回<code>undefined</code>的，⾄于显式返回，还是隐式返回，这⽆所谓！</p></li><li><p>从<strong>语义</strong>上讲：函数调⽤者不应关⼼函数返回的值，也不应依赖返回值进⾏任何操作！即使我们知道它返回了<code>undefined</code>。</p></li></ol><h3 id="5-object"><a href="#5-object" class="headerlink" title="5.object"></a>5.<code>object</code></h3><p>关于<span style="color: #4472c4"><strong><code>object</code></strong></span>与<span style="color: red"><strong><code>Object</code></strong></span>，直接说结论：实际开发中⽤的相对较少，因为范围太⼤了。</p><h4 id="object（⼩写）"><a href="#object（⼩写）" class="headerlink" title="object（⼩写）"></a><span style="color: #4472c4"><strong><em>object（⼩写）</em></strong></span></h4><p><strong><code>object</code></strong>（⼩写）的含义是：所有<strong>⾮原始类型</strong>，可存储：对象、函数、数组等，由于限制的范围<strong>⽐较宽泛</strong>，在实际开发中使⽤的<strong>相对较少</strong>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">object</span> <span class="comment">// a的值可以是任何【⾮原始类型】，包括：对象、函数、数组等</span></span><br><span class="line"><span class="comment">// 以下代码，是将【⾮原始类型】赋给a，所以均符合要求</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">a = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// 原始类型的包装对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码，是将【原始类型】赋给a，有警告</span></span><br><span class="line">a = <span class="number">1</span> <span class="comment">// 警告：不能将类型“number”分配给类型“object”</span></span><br><span class="line">a = <span class="literal">true</span> <span class="comment">// 警告：不能将类型“boolean”分配给类型“object”</span></span><br><span class="line">a = <span class="string">&#x27;你好&#x27;</span> <span class="comment">// 警告：不能将类型“string”分配给类型“object” </span></span><br><span class="line">a = <span class="literal">null</span> <span class="comment">// 警告：不能将类型“null”分配给类型“object”</span></span><br><span class="line">a = <span class="literal">undefined</span> <span class="comment">// 警告：不能将类型“undefined”分配给类型“object”</span></span><br></pre></td></tr></table></figure><h4 id="Object（大写）"><a href="#Object（大写）" class="headerlink" title="Object（大写）"></a><span style="color: red"><strong><em>Object（大写）</em></strong></span></h4><ul><li>官⽅描述：所有可以调⽤<strong><code>Object</code></strong>⽅法的类型。</li><li>简单记忆：除了<code>undefined</code>和<code>null</code>的任何值。</li><li>由于限制的范围实在太⼤了！所以实际开发中使⽤频率极低。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Object</span> <span class="comment">// b的值必须是Object的实例对象（除去undefined和null的任何值）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码，均⽆警告，因为给a赋的值，都是Object的实例对象</span></span><br><span class="line">b = &#123;&#125;</span><br><span class="line">b = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">b = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">b = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line">b = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">b = <span class="number">1</span> <span class="comment">// 1不是Object的实例对象，但其包装对象是Object的实例</span></span><br><span class="line">b = <span class="literal">true</span> <span class="comment">// truue不是Object的实例对象，但其包装对象是Object的实例</span></span><br><span class="line">b = <span class="string">&#x27;你好&#x27;</span> <span class="comment">// “你好”不是Object的实例对象，但其包装对象是Object的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码均有警告</span></span><br><span class="line">b = <span class="literal">null</span> <span class="comment">// 警告：不能将类型“null”分配给类型“Object”</span></span><br><span class="line">b = <span class="literal">undefined</span> <span class="comment">// 警告：不能将类型“undefined”分配给类型“Object”</span></span><br></pre></td></tr></table></figure><h4 id="声明对象类型"><a href="#声明对象类型" class="headerlink" title="声明对象类型"></a><em>声明对象类型</em></h4><ol><li>实际开发中，限制⼀般对象，通常使⽤以下形式</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制person1对象必须有name属性，age为可选属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person1</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 含义同上，也能⽤分号做分隔</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person2</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; age?: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 含义同上，也能⽤换⾏做分隔</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person3</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下赋值均可以</span></span><br><span class="line">person1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line">person2 = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">person3 = &#123;<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下赋值不合法，因为person3的类型限制中，没有对gender属性的说明</span></span><br><span class="line">person3 = &#123;<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>索引签名</strong>： 允许定义对象可以具有<span style="color: red">任意数量的属性</span>，这些属性的<span style="color: red">键</span>和<span style="color: red">类型</span>是<span style="color: red">可变的</span>，常⽤于：描述类型不确定的属性，（具有动态属性的对象）。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制person对象必须有name属性，可选age属性但值必须是数字，同时可以有任意数量、任意类型的其他属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">// 索引签名，完全可以不⽤key这个单词，换成其他的也可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值合法</span></span><br><span class="line">person = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明函数类型"><a href="#声明函数类型" class="headerlink" title="声明函数类型"></a><em>声明函数类型</em></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">count = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li><code>TypeScript</code>中的<code>=&gt;</code>在函数类型声明时表示<strong>函数类型</strong>，描述其<strong>参数类型</strong>和<strong>返回类型</strong>。</li><li><code>JavaScript</code>中的<code>=&gt;</code>是⼀种定义函数的语法，是具体的函数实现。</li><li>函数类型声明还可以使⽤：接口、⾃定义类型等⽅式，下⽂中会详细讲解。</li></ul><h4 id="声明数组类型"><a href="#声明数组类型" class="headerlink" title="声明数组类型"></a><em>声明数组类型</em></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">string</span>[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; <span class="comment">// 泛型</span></span><br><span class="line"></span><br><span class="line">arr1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr2 = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="6-tuple"><a href="#6-tuple" class="headerlink" title="6.tuple"></a>6.<code>tuple</code></h3><p>元组 (<code>Tuple</code>) 是⼀种特殊的<strong>数组类型</strong>，可以存储<strong>固定数量</strong>的元素，并且每个元素的类型是已知的且可以不同。元组⽤于精确描述⼀组值的类型，<code>?</code>表示可选元素。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第⼀个元素必须是 string 类型，第⼆个元素必须是 number 类型。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line"><span class="comment">// 第⼀个元素必须是 number 类型，第⼆个元素是可选的，如果存在，必须是 boolean 类型。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: [<span class="built_in">number</span>, <span class="built_in">boolean</span>?]</span><br><span class="line"><span class="comment">// 第⼀个元素必须是 number 类型，后⾯的元素可以是任意数量的 string 类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: [<span class="built_in">number</span>, ...<span class="built_in">string</span>[]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以赋值</span></span><br><span class="line">arr1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>]</span><br><span class="line">arr2 = [<span class="number">100</span>, <span class="literal">false</span>]</span><br><span class="line">arr2 = [<span class="number">200</span>]</span><br><span class="line">arr3 = [<span class="number">100</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line">arr3 = [<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可以赋值，arr1声明时是两个元素，赋值的是三个</span></span><br><span class="line">arr1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>, <span class="literal">false</span>]</span><br></pre></td></tr></table></figure><h3 id="7-enum"><a href="#7-enum" class="headerlink" title="7.enum"></a>7.<code>enum</code></h3><p>枚举（<code>enum</code>）可以定义<span style="color: red">⼀组命名常量</span>，它能增强代码的可读性，也让代码更好维护。</p><p>如下代码的功能是：根据调⽤<code>walk</code>时传⼊的不同参数，执⾏不同的逻辑，存在的问题是调⽤<code>walk</code>时传参时没有任何提示，编码者很容易写错字符串内容；并且⽤于判断逻辑的<code>up</code>、<code>down</code>、<code>left</code>、<code>right</code>是<span style="color: red">连续且相关的⼀组值</span>，那此时就特别适合使⽤<span style="color: red">枚举（<code>enum</code>）</span>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">str:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (str === <span class="string">&#x27;up&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【上】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str === <span class="string">&#x27;down&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【下】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str === <span class="string">&#x27;left&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【左】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str === <span class="string">&#x27;right&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【右】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未知⽅向&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&#x27;up&#x27;</span>)</span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&#x27;down&#x27;</span>)</span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&#x27;right&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-数字枚举"><a href="#1-数字枚举" class="headerlink" title="1.数字枚举"></a>1.数字枚举</h4><p>数字枚举⼀种最常⻅的枚举类型，其成员的值会<strong><em>⾃动递增</em></strong>，且数字枚举还具备<strong><em>反向映射</em></strong>的特点，在下⾯代码的打印中，不难发现：可以通过<strong>值</strong>来获取对应的枚举<em>成员名称</em> 。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义⼀个描述【上下左右】⽅向的枚举Direction</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>) <span class="comment">// 打印Direction会看到如下内容</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment">  0:&#x27;Up&#x27;, </span></span><br><span class="line"><span class="comment">  1:&#x27;Down&#x27;, </span></span><br><span class="line"><span class="comment">  2:&#x27;Left&#x27;, </span></span><br><span class="line"><span class="comment">  3:&#x27;Right&#x27;, </span></span><br><span class="line"><span class="comment">  Up:0, </span></span><br><span class="line"><span class="comment">  Down:1, </span></span><br><span class="line"><span class="comment">  Left:2,</span></span><br><span class="line"><span class="comment">  Right:3</span></span><br><span class="line"><span class="comment"> &#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向映射</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此⾏代码报错，枚举中的属性是只读的</span></span><br><span class="line"><span class="title class_">Direction</span>.<span class="property">Up</span> = <span class="string">&#x27;shang&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以指定枚举成员的初始值，其后的成员值会⾃动递增。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="number">6</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// 输出: 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Down</span>); <span class="comment">// 输出: 7</span></span><br></pre></td></tr></table></figure><p>使⽤数字枚举完成刚才<code>walk</code>函数中的逻辑，此时我们发现： 代码更加直观易读，⽽且类型安全，同时也更易于维护。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">n: Direction</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="title class_">Direction</span>.<span class="property">Up</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【上】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="title class_">Direction</span>.<span class="property">Down</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【下】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="title class_">Direction</span>.<span class="property">Left</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【左】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="title class_">Direction</span>.<span class="property">Right</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向【右】⾛&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未知⽅向&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">walk</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>)</span><br><span class="line"><span class="title function_">walk</span>(<span class="title class_">Direction</span>.<span class="property">Down</span>)</span><br></pre></td></tr></table></figure><h4 id="2-字符串枚举"><a href="#2-字符串枚举" class="headerlink" title="2.字符串枚举"></a>2.字符串枚举</h4><p>枚举成员的值是字符串</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="string">&quot;up&quot;</span>,</span><br><span class="line">  <span class="title class_">Down</span> = <span class="string">&quot;down&quot;</span>,</span><br><span class="line">  <span class="title class_">Left</span> = <span class="string">&quot;left&quot;</span>,</span><br><span class="line">  <span class="title class_">Right</span> = <span class="string">&quot;right&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">dir</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dir); <span class="comment">// 输出: &quot;up&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-常量枚举"><a href="#3-常量枚举" class="headerlink" title="3.常量枚举"></a>3.常量枚举</h4><p>官⽅描述：常量枚举是⼀种特殊枚举类型，它使⽤<code>const</code>关键字定义，在编译时会被<strong><em>内联</em></strong>，避免⽣成⼀些额外的代码。</p><p>何为<strong><em>编译时内联</em></strong> ？</p><p>所谓“内联”其实就是TypeScript在编译时，会将枚举<strong><em>成员引⽤</em></strong> 替换为它们的<strong><em>实际值</em></strong>，⽽不是⽣成额外的枚举对象。这可以减少⽣成的JavaScript代码量，并提⾼运⾏时性能。</p><p>使⽤普通枚举的TypeScript代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Directions</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="title class_">Directions</span>.<span class="property">Up</span>;</span><br></pre></td></tr></table></figure><p>编译后⽣成的JavaScript代码量较⼤ ：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Directions</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Directions</span>) &#123;</span><br><span class="line">  <span class="title class_">Directions</span>[<span class="title class_">Directions</span>[<span class="string">&quot;Up&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">  <span class="title class_">Directions</span>[<span class="title class_">Directions</span>[<span class="string">&quot;Down&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">  <span class="title class_">Directions</span>[<span class="title class_">Directions</span>[<span class="string">&quot;Left&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">  <span class="title class_">Directions</span>[<span class="title class_">Directions</span>[<span class="string">&quot;Right&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Directions</span> || (<span class="title class_">Directions</span> = &#123;&#125;));</span><br><span class="line"><span class="keyword">let</span> x = <span class="title class_">Directions</span>.<span class="property">Up</span>;</span><br></pre></td></tr></table></figure><p>使⽤常量枚举的TypeScript代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Directions</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="title class_">Directions</span>.<span class="property">Up</span>;</span><br></pre></td></tr></table></figure><p>编译后⽣成的JavaScript代码量较⼩：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span> <span class="comment">/* Directions.Up */</span>;</span><br></pre></td></tr></table></figure><h3 id="8-type"><a href="#8-type" class="headerlink" title="8.type"></a>8.<code>type</code></h3><p><code>type</code>可以为任意类型创建别名，让代码更简洁、可读性更强，同时能更⽅便地进⾏类型复⽤和扩展。</p><ol><li>基本⽤法</li></ol><p>类型别名使⽤<code>type</code>关键字定义，<code>type</code>后跟类型名称，例如下⾯代码中<code>num</code>是类型别名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> num = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">price</span>: num</span><br><span class="line">price = <span class="number">100</span></span><br></pre></td></tr></table></figure><ol><li>联合类型</li></ol><p>联合类型是⼀种⾼级类型，它表示⼀个值可以是⼏种不同类型之⼀。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Status</span> = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Gender</span> = <span class="string">&#x27;男&#x27;</span> | <span class="string">&#x27;⼥&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printStatus</span>(<span class="params">status: Status</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logGender</span>(<span class="params">str:Gender</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printStatus</span>(<span class="number">404</span>);</span><br><span class="line"><span class="title function_">printStatus</span>(<span class="string">&#x27;200&#x27;</span>);</span><br><span class="line"><span class="title function_">printStatus</span>(<span class="string">&#x27;501&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">logGender</span>(<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="title function_">logGender</span>(<span class="string">&#x27;⼥&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>交叉类型</li></ol><p>交叉类型（<code>Intersection Types</code>）允许将多个类型合并为⼀个类型。合并后的类型将拥有所有被合并类型的成员。交叉类型通常⽤于对象类型。 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//⾯积</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Area</span> = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>; <span class="comment">//⾼</span></span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>; <span class="comment">//宽</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Address</span> = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="built_in">number</span>; <span class="comment">//楼号</span></span><br><span class="line">  <span class="attr">cell</span>: <span class="built_in">number</span>; <span class="comment">//单元号</span></span><br><span class="line">  <span class="attr">room</span>: <span class="built_in">string</span>; <span class="comment">//房间号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类型House，且House是Area和Address组成的交叉类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">House</span> = <span class="title class_">Area</span> &amp; <span class="title class_">Address</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">house</span>: <span class="title class_">House</span> = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">75</span>,</span><br><span class="line">  <span class="attr">num</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">cell</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">room</span>: <span class="string">&#x27;702&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="9-⼀个特殊情况"><a href="#9-⼀个特殊情况" class="headerlink" title="9.⼀个特殊情况"></a>9.⼀个特殊情况</h3><p>先来观察如下两段代码：</p><p><strong><em>代码段1（正常）</em></strong>：在函数定义时，限制函数返回值为<code>void</code>，那么函数的返回值就必须是空。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="comment">// 返回undefined合法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 以下返回均不合法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>()</span><br></pre></td></tr></table></figure><p><strong><em>代码段2（特殊）</em></strong></p><p>使⽤ <span style="color: #4472c4"><strong><em>类型声明</em></strong></span> 限制函数返回值为<code>void</code>时， <span style="color:red"><code>TypeScript</code>并不会严格要求函数返回空</span>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LogFunc</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f1</span>: <span class="title class_">LogFunc</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>; <span class="comment">// 允许返回⾮空值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f2</span>: <span class="title class_">LogFunc</span> = <span class="function">() =&gt;</span> <span class="number">200</span>; <span class="comment">// 允许返回⾮空值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f3</span>: <span class="title class_">LogFunc</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">300</span>; <span class="comment">// 允许返回⾮空值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>为什么会这样？</strong></p><p>是为了确保如下代码成⽴，我们知道<code>Array.prototype.push</code>的返回值是⼀个数字，⽽ <code>Array.prototype.forEach</code>⽅法期望其回调的返回类型是<code>void</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> src = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> dst = [<span class="number">0</span>];</span><br><span class="line">src.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> dst.<span class="title function_">push</span>(el));</span><br></pre></td></tr></table></figure><p>官⽅⽂档的说明：<a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#assignability-of-functions">Assignability of Functions</a></p><h3 id="10-复习类相关知识"><a href="#10-复习类相关知识" class="headerlink" title="10.复习类相关知识"></a>10.复习类相关知识</h3><p>本⼩节是复习类相关知识，如果有相关基础可以跳过。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 属性声明</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ⽅法</span></span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person实例</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;周杰伦&#x27;</span>, <span class="number">38</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="attr">grade</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, grade: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 备注本例中若Student类不需要额外的属性，Student的构造器可以省略</span></span><br><span class="line">  <span class="comment">// 重写从⽗类继承的⽅法</span></span><br><span class="line">  <span class="keyword">override</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是学⽣，我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁，在读<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>年级`</span>,)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ⼦类⾃⼰的⽅法</span></span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>正在努⼒学习中......`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-属性修饰符"><a href="#11-属性修饰符" class="headerlink" title="11.属性修饰符"></a>11.属性修饰符</h3><div class="table-container"><table><thead><tr><th>修饰符</th><th>含义</th><th>具体规则</th></tr></thead><tbody><tr><td><code>public</code></td><td>公开的</td><td>可以被：<strong>类内部、⼦类、类外部</strong>访问 。</td></tr><tr><td><code>protected</code></td><td>受保护的</td><td>可以被：<strong>类内部、⼦类</strong>访问。</td></tr><tr><td><code>private</code></td><td>私有的</td><td>可以被：<strong>类内部</strong>访问。</td></tr><tr><td><code>readonly</code></td><td>只读属性</td><td>属性⽆法修改。</td></tr></tbody></table></div><h4 id="public修饰符"><a href="#public修饰符" class="headerlink" title="public修饰符"></a><code>public</code>修饰符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// name写了public修饰符，age没写修饰符，最终都是public修饰符</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 类的【内部】可以访问public修饰的name和age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment">// 类的【外部】可以访问public修饰的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 【⼦类中】可以访问⽗类中public修饰的：name属性、age属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁的<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>正在努⼒学习`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>属性的简写形式</em></strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整写法 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写形式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> age: <span class="built_in">number</span></span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="protected修饰符"><a href="#protected修饰符" class="headerlink" title="protected修饰符"></a><code>protected</code>修饰符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// name和age是受保护属性，不能在类外部访问，但可以在【类】与【⼦类】中访问</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">protected</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">protected</span> age: <span class="built_in">number</span></span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// getDetails是受保护⽅法，不能在类外部访问，但可以在【类】与【⼦类】中访问</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">getDetails</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// 类中能访问受保护的name和age属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，年龄是：<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// introduce是公开⽅法，类、⼦类、类外部都能使⽤</span></span><br><span class="line">  <span class="title function_">introduce</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 类中能访问受保护的getDetails⽅法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">getDetails</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;杨超越&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment">// 可以在类外部访问introduce</span></span><br><span class="line">p1.<span class="title function_">introduce</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码均报错</span></span><br><span class="line"><span class="comment">// p1.getDetails()</span></span><br><span class="line"><span class="comment">// p1.name</span></span><br><span class="line"><span class="comment">// p1.age</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(name,age)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ⼦类中可以访问introduce</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">introduce</span>()</span><br><span class="line">    <span class="comment">// ⼦类中可以访问name</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>正在努⼒学习`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">17</span>)</span><br><span class="line">s1.<span class="title function_">introduce</span>()</span><br></pre></td></tr></table></figure><h4 id="private修饰符"><a href="#private修饰符" class="headerlink" title="private修饰符"></a><code>private</code>修饰符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> age: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"> <span class="comment">// IDCard属性为私有的(private)属性，只能在【类内部】使⽤</span></span></span><br><span class="line"><span class="params"> <span class="keyword">private</span> IDCard: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"> </span>) &#123; &#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="title function_">getPrivateInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="comment">// 类内部可以访问私有的(private)属性 —— IDCard</span></span><br><span class="line"> <span class="keyword">return</span> <span class="string">`身份证号码为：<span class="subst">$&#123;<span class="variable language_">this</span>.IDCard&#125;</span>`</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 类内部可以访问受保护的(protected)属性 —— name和age</span></span><br><span class="line"> <span class="keyword">return</span> <span class="string">`我叫: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, 今年刚满<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">getFullInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="comment">// 类内部可以访问公开的getInfo⽅法，也可以访问私有的getPrivateInfo⽅法</span></span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getInfo</span>() + <span class="string">&#x27;，&#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">getPrivateInfo</span>()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;110114198702034432&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getFullInfo</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getInfo</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码均报错</span></span><br><span class="line"><span class="comment">// p1.name</span></span><br><span class="line"><span class="comment">// p1.age</span></span><br><span class="line"><span class="comment">// p1.IDCard</span></span><br><span class="line"><span class="comment">// p1.getPrivateInfo()</span></span><br></pre></td></tr></table></figure><h4 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a><code>readonly</code>修饰符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> <span class="keyword">readonly</span> vin: <span class="built_in">string</span>, <span class="comment">//⻋辆识别码，为只读属性</span></span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> <span class="keyword">readonly</span> year: <span class="built_in">number</span>,<span class="comment">//出⼚年份，为只读属性</span></span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> color: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> sound: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"> </span>) &#123; &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 打印⻋辆信息</span></span><br><span class="line"> <span class="title function_">displayInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`</span></span><br><span class="line"><span class="string"> 识别码：<span class="subst">$&#123;<span class="variable language_">this</span>.vin&#125;</span>,</span></span><br><span class="line"><span class="string"> 出⼚年份：<span class="subst">$&#123;<span class="variable language_">this</span>.year&#125;</span>,</span></span><br><span class="line"><span class="string"> 颜⾊：<span class="subst">$&#123;<span class="variable language_">this</span>.color&#125;</span>,</span></span><br><span class="line"><span class="string"> ⾳响：<span class="subst">$&#123;<span class="variable language_">this</span>.sound&#125;</span></span></span><br><span class="line"><span class="string"> `</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;1HGCM82633A123456&#x27;</span>, <span class="number">2018</span>, <span class="string">&#x27;⿊⾊&#x27;</span>, <span class="string">&#x27;Bose⾳响&#x27;</span>);</span><br><span class="line">car.<span class="title function_">displayInfo</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码均错误：不能修改 readonly 属性</span></span><br><span class="line"><span class="comment">// car.vin = &#x27;897WYE87HA8SGDD8SDGHF&#x27;; </span></span><br><span class="line"><span class="comment">// car.year = 2020;</span></span><br></pre></td></tr></table></figure><h3 id="12-抽象类"><a href="#12-抽象类" class="headerlink" title="12.抽象类"></a>12.抽象类</h3><ul><li><strong>概述</strong>：抽象类是⼀种<strong><em>⽆法被实例化</em></strong> 的类，专⻔⽤来定义类的<strong>结构和⾏为</strong>，类中可以写抽象⽅法，也可以写具体实现。抽象类主要⽤来为其派⽣类提供⼀个基础结构，要求其派⽣类必须实现其中的抽象⽅法。</li><li><strong>简记</strong>：抽象类<strong>不能实例化</strong>，其意义是<strong>可以被继承</strong>，抽象类⾥可以有普通⽅法、也可以有抽象⽅法。</li></ul><p>通过以下场景，理解抽象类：</p><blockquote><p>我们定义⼀个抽象类<code>Package</code>，表示所有包裹的基本结构，任何包裹都有重量属性<code>weight</code>，包裹都需要计算运费。但不同类型的包裹（如：标准速度、特快专递）都有不同的运费计算⽅式，因此⽤于计算运费的<code>calculate</code>⽅法是⼀个抽象⽅法，必须由具体的⼦类来实现。 </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package 类 </span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Package</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> weight: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">  <span class="comment">// 抽象⽅法：⽤来计算运费，不同类型包裹有不同的计算⽅式</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">calculate</span>(): <span class="built_in">number</span></span><br><span class="line">  <span class="comment">// 通⽤⽅法：打印包裹详情</span></span><br><span class="line">  <span class="title function_">printPackage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`包裹重量为: <span class="subst">$&#123;<span class="variable language_">this</span>.weight&#125;</span>kg，运费为: <span class="subst">$&#123;<span class="variable language_">this</span>.calculate()&#125;</span>元`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>StandardPackage</code>类继承了<code>Package</code>，实现了<code>calculate</code>⽅法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StandardPackage 类 （标快包裹） </span></span><br><span class="line"><span class="comment">// 标准包裹</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandardPackage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Package</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params"> weight: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> unitPrice: <span class="built_in">number</span> <span class="comment">// 每公⽄的固定费率</span></span></span><br><span class="line"><span class="params"> </span>) &#123; <span class="variable language_">super</span>(weight) &#125;</span><br><span class="line"> <span class="comment">// 实现抽象⽅法：计算运费</span></span><br><span class="line"> <span class="title function_">calculate</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">weight</span> * <span class="variable language_">this</span>.<span class="property">unitPrice</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建标准包裹实例</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">StandardPackage</span>(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line">s1.<span class="title function_">printPackage</span>()</span><br></pre></td></tr></table></figure><p><code>ExpressPackage</code>类继承了<code>Package</code>，实现了<code>calculate</code>⽅法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExpressPackage 类（特快包裹） </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpressPackage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Package</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params"> weight: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"> <span class="keyword">private</span> unitPrice: <span class="built_in">number</span>, <span class="comment">// 每公⽄的固定费率（快速包裹更⾼）</span></span></span><br><span class="line"><span class="params"> <span class="keyword">private</span> additional: <span class="built_in">number</span> <span class="comment">// 超出10kg以后的附加费</span></span></span><br><span class="line"><span class="params"> </span>) &#123; <span class="variable language_">super</span>(weight) &#125;</span><br><span class="line"> <span class="comment">// 实现抽象⽅法：计算运费</span></span><br><span class="line"> <span class="title function_">calculate</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">weight</span> &gt; <span class="number">10</span>)&#123;</span><br><span class="line"> <span class="comment">// 超出10kg的部分，每公⽄多收additional对应的价格</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">10</span> * <span class="variable language_">this</span>.<span class="property">unitPrice</span> + (<span class="variable language_">this</span>.<span class="property">weight</span> - <span class="number">10</span>) * <span class="variable language_">this</span>.<span class="property">additional</span></span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">weight</span> * <span class="variable language_">this</span>.<span class="property">unitPrice</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建特快包裹实例</span></span><br><span class="line"><span class="keyword">const</span> e1 = <span class="keyword">new</span> <span class="title class_">ExpressPackage</span>(<span class="number">13</span>,<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">e1.<span class="title function_">printPackage</span>()</span><br></pre></td></tr></table></figure><p><strong><em>总结：何时使⽤抽象类？</em></strong></p><ol><li>定义<span style="color: #4472c4"><strong><em>通用接口</em></strong></span> ：为⼀组相关的类定义通⽤的⾏为（⽅法或属性）时。</li><li>提供<span style="color: #4472c4"><strong><em>基础实现</em></strong> </span>：在抽象类中提供某些⽅法或为其提供基础实现，这样派⽣类就可以继承这些实现。</li><li>确保<span style="color: #4472c4"><strong><em>关键实现</em></strong> </span>：强制派⽣类实现⼀些关键⾏为。</li><li><span style="color: #4472c4"><strong><em>共享</em></strong> </span> 代码和逻辑：当多个类需要共享部分代码时，抽象类可以避免代码重复。 </li></ol><h3 id="13-interface（接⼝）"><a href="#13-interface（接⼝）" class="headerlink" title="13.interface（接⼝）"></a>13.<code>interface</code>（接⼝）</h3><p><code>interface</code>是⼀种<strong>定义结构</strong>的⽅式，主要作⽤是为：类、对象、函数等规定<strong>⼀种契约</strong>，这样可以确保代码的⼀致性和类型安全，但要注意<code>interface</code>只能定义格式，不能包含任何实现 ！</p><h4 id="定义类结构"><a href="#定义类结构" class="headerlink" title="定义类结构"></a>定义类结构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PersonInterface接⼝，⽤与限制Person类的格式</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"> <span class="title function_">speak</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义⼀个类 Person，实现 PersonInterface 接⼝</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"> <span class="keyword">public</span> age: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"> </span>) &#123; &#125;</span><br><span class="line"> <span class="comment">// 实现接⼝中的 speak ⽅法</span></span><br><span class="line"> <span class="title function_">speak</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"> <span class="comment">// 打印出包含名字和年龄的问候语句</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我的年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建⼀个 Person 类的实例 p1，传⼊名字 &#x27;tom&#x27; 和年龄 18</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p1.<span class="title function_">speak</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="定义对象结构"><a href="#定义对象结构" class="headerlink" title="定义对象结构"></a>定义对象结构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UserInterface</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line"> <span class="keyword">readonly</span> <span class="attr">gender</span>: <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line"> age?: <span class="built_in">number</span> <span class="comment">// 可选属性</span></span><br><span class="line"> <span class="attr">run</span>: <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">UserInterface</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"> <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"> <span class="title function_">run</span>(<span class="params">n</span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`奔跑了<span class="subst">$&#123;n&#125;</span>⽶`</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="定义函数结构"><a href="#定义函数结构" class="headerlink" title="定义函数结构"></a>定义函数结构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CountInterface</span> &#123;</span><br><span class="line"> (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">count</span>: <span class="title class_">CountInterface</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口之间的继承"><a href="#接口之间的继承" class="headerlink" title="接口之间的继承"></a>接口之间的继承</h4><p>⼀个<code>interface</code>继承另⼀个<code>interface</code>，从⽽实现代码的复⽤</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">// 姓名</span></span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span> <span class="comment">// 年龄</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StudentInterface</span> <span class="keyword">extends</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="attr">grade</span>: <span class="built_in">string</span> <span class="comment">// 年级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">stu</span>: <span class="title class_">StudentInterface</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line"> <span class="attr">grade</span>: <span class="string">&#x27;⾼三&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口⾃动合并（可重复定义）"><a href="#接口⾃动合并（可重复定义）" class="headerlink" title="接口⾃动合并（可重复定义）"></a>接口⾃动合并（可重复定义）</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PersonInterface接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">  <span class="comment">// 属性声明</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给PersonInterface接⼝添加新属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">  <span class="comment">// ⽅法声明</span></span><br><span class="line">  <span class="title function_">speak</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person类实现PersonInterface</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ⽅法</span></span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好！我是⽼师:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：何时使⽤接口？</strong></p><ol><li>定义对象的格式： 描述数据模型、<code>API</code>响应格式、配置对象……..等等，是开发中⽤的最多的场景。</li><li>类的契约：规定⼀个类需要实现哪些属性和⽅法。</li><li>扩展已有接口：⼀般⽤于扩展第三⽅库的类型， 这种特性在⼤型项⽬中可能会⽤到。</li></ol><h3 id="14-⼀些相似概念的区别"><a href="#14-⼀些相似概念的区别" class="headerlink" title="14.⼀些相似概念的区别"></a>14.⼀些相似概念的区别</h3><h4 id="interface与type的区别"><a href="#interface与type的区别" class="headerlink" title="interface与type的区别"></a><code>interface</code>与<code>type</code>的区别</h4><p><strong>相同点</strong>：<code>interface</code>和<code>type</code>都可以⽤于定义<strong>对象结构</strong>，在定义对象结构时两者可以互换。</p><p><strong>不同点</strong>：</p><p>1️⃣ <code>interface</code>：更专注于定义<span style="color:red">对象</span>和<span style="color:red">类</span>的结构，⽀持<span style="color:red">继承</span>、<span style="color:red">合并</span>。</p><p>2️⃣ <code>type</code>：可以定义<span style="color:red">类型别名、联合类型、交叉类型</span>，但不⽀持继承和⾃动合并。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface 和 type 都可以定义对象结构 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使⽤ interface 定义 Person 对象</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"> <span class="title function_">speak</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使⽤ type 定义 Person 对象</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"> <span class="title function_">speak</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使⽤PersonInterface</span></span><br><span class="line"><span class="comment">/* let person: PersonInterface = &#123;</span></span><br><span class="line"><span class="comment"> name:&#x27;张三&#x27;,</span></span><br><span class="line"><span class="comment"> age:18,</span></span><br><span class="line"><span class="comment"> speak()&#123;</span></span><br><span class="line"><span class="comment"> console.log(`我叫：$&#123;this.name&#125;，年龄：$&#123;this.age&#125;`)</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使⽤PersonType</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">PersonType</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"> <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"> <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，年龄：<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface 可以继承、合并 </span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">// 姓名</span></span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span> <span class="comment">// 年龄</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="attr">speak</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StudentInterface</span> <span class="keyword">extends</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"> <span class="attr">grade</span>: <span class="built_in">string</span> <span class="comment">// 年级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">student</span>: <span class="title class_">StudentInterface</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"> <span class="attr">grade</span>: <span class="string">&#x27;⾼⼆&#x27;</span>,</span><br><span class="line"> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>,<span class="variable language_">this</span>.<span class="property">age</span>,<span class="variable language_">this</span>.<span class="property">grade</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type 的交叉类型 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使⽤ type 定义 Person 类型，并通过交叉类型实现属性的合并</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 姓名</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>; <span class="comment">// 年龄</span></span><br><span class="line">&#125; &amp; &#123;</span><br><span class="line">  <span class="attr">speak</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使⽤ type 定义 Student 类型，并通过交叉类型继承 PersonType</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StudentType</span> = <span class="title class_">PersonType</span> &amp; &#123;</span><br><span class="line">  <span class="attr">grade</span>: <span class="built_in">string</span>; <span class="comment">// 年级</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">student</span>: <span class="title class_">StudentType</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">grade</span>: <span class="string">&#x27;⾼⼆&#x27;</span>,</span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>, <span class="variable language_">this</span>.<span class="property">grade</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="interface与抽象类的区别"><a href="#interface与抽象类的区别" class="headerlink" title="interface与抽象类的区别"></a><code>interface</code>与抽象类的区别</h4><p><strong>相同点</strong>：都能定义⼀个<span style="color:red">类的格式</span>（定义类应遵循的契约）</p><p><strong>不相同</strong>：</p><p>1️⃣ 接口：只能描述结构，不能有任何实现代码，⼀个类可以实现<strong>多个</strong>接口。</p><p>2️⃣ 抽象类：既可以包含<strong>抽象⽅法</strong>，也可以包含<strong>具体⽅法</strong>， ⼀个类只能继承⼀个抽象类。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⼀个类可以实现多个接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FlyInterface 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FlyInterface</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 SwimInterface 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SwimInterface</span> &#123;</span><br><span class="line">  <span class="title function_">swim</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Duck 类实现了 FlyInterface 和 SwimInterface 两个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">implements</span> <span class="title class_">FlyInterface</span>, <span class="title class_">SwimInterface</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鸭⼦可以⻜&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">swim</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鸭⼦可以游泳&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建⼀个 Duck 实例</span></span><br><span class="line"><span class="keyword">const</span> duck = <span class="keyword">new</span> <span class="title class_">Duck</span>();</span><br><span class="line">duck.<span class="title function_">fly</span>(); <span class="comment">// 输出: 鸭⼦可以⻜</span></span><br><span class="line">duck.<span class="title function_">swim</span>(); <span class="comment">// 输出: 鸭⼦可以游泳</span></span><br></pre></td></tr></table></figure><h2 id="⼋、泛型"><a href="#⼋、泛型" class="headerlink" title="⼋、泛型"></a>⼋、泛型</h2><p>泛型允许我们在定义函数、类或接口时，使⽤类型参数来表示<strong><em>未指定的类型</em></strong>，这些参数在具体使⽤时，才被指定具体的类型，泛型能让同⼀段代码适⽤于多种类型，同时仍然保持类型的安全性。</p><p>举例：如下代码中<code>&lt;T&gt;</code>就是泛型，（不⼀定⾮叫<code>T</code>），设置泛型后即可在函数中使⽤<code>T</code>来表示该类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型函数 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> logData&lt;T&gt;(<span class="attr">data</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logData&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>)</span><br><span class="line">logData&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型可以有多个 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> logData&lt;T, U&gt;(<span class="attr">data1</span>: T, <span class="attr">data2</span>: U): T | U &#123; <span class="comment">// 返回联合类型可能T可能U</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data1, data2)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> ? data1 : data2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logData&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">100</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">logData&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;(<span class="string">&#x27;ok&#x27;</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span>&lt;T&gt; &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line"> <span class="attr">extraInfo</span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">PersonInterface</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">PersonInterface</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line">p1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">extraInfo</span>: <span class="string">&#x27;⼀个好⼈&#x27;</span> &#125;</span><br><span class="line">p2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">extraInfo</span>: <span class="number">250</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型约束 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LengthInterface</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束规则是：传⼊的类型T必须具有 length 属性</span></span><br><span class="line"><span class="keyword">function</span> logPerson&lt;T <span class="keyword">extends</span> <span class="title class_">LengthInterface</span>&gt;(<span class="attr">data</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logPerson&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">// logPerson&lt;number&gt;(100) // 报错：因为number不具备length属性</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> age: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> extraInfo: T</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line">  <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">extraInfo</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码1</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;<span class="built_in">number</span>&gt;(<span class="string">&quot;tom&quot;</span>, <span class="number">30</span>, <span class="number">250</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码2</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">JobInfo</span> = &#123;</span><br><span class="line"> <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"> <span class="attr">company</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;<span class="title class_">JobInfo</span>&gt;(<span class="string">&quot;tom&quot;</span>, <span class="number">30</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;研发总监&#x27;</span>, <span class="attr">company</span>: <span class="string">&#x27;发发发</span></span><br><span class="line"><span class="string">科技公司&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="九、类型声明⽂件"><a href="#九、类型声明⽂件" class="headerlink" title="九、类型声明⽂件"></a>九、类型声明⽂件</h2><p>类型声明⽂件是<code>TypeScript</code>中的⼀种特殊⽂件，通常以<code>.d.ts</code>作为扩展名。它的主要作⽤是为现有的<code>JavaScript</code>代码提供<strong>类型信息</strong>，使得<code>TypeScript</code>能够在使⽤这些<code>JavaScript</code>库或模块时进⾏<strong>类型检查和提示</strong>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js 文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.d.ts文件</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; add, mul &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, mul &#125; <span class="keyword">from</span> <span class="string">&quot;./demo.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// x 类型为 number</span></span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">mul</span>(<span class="number">4</span>, <span class="number">5</span>); <span class="comment">// y 类型为 number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x,y)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前中台解决方案项目（中）</title>
      <link href="/2024/08/19/project-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
      <url>/2024/08/19/project-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="26、实现全屏展示功能"><a href="#26、实现全屏展示功能" class="headerlink" title="26、实现全屏展示功能"></a>26、实现全屏展示功能</h3><p>在原生<code>dom</code>上，提供了一些方法来供我们开启或关闭全屏：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/requestFullScreen"><code>Element.requestFullscreen()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/exitFullscreen"><code>Document.exitFullscreen()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/fullscreen"><code>Document.fullscreen</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/fullscreenElement"><code>Document.fullscreenElement</code></a></li></ul><p>想要让页面的指定区域进行全屏展示，可以使用 全屏APL。其中提供了两个方法：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/requestFullScreen"><code>Element.requestFullscreen()</code></a>：让指定元素进行全屏</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="title function_">requestFullscreen</span>()</span><br></pre></td></tr></table></figure><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/exitFullscreen"><code>Document.exitFullscreen()</code></a>：退出全屏</li></ol><p>但是这个 API 比较原始，使用起来没有那么方便，可以使用vueuse中的更加简便的<br>API ：useFullScreen</p><ol><li>利用 <code>useFullScreen</code> 生成<code>img</code>图片的全屏方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useFullscreen &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 生成全屏方法</span></span><br><span class="line"><span class="keyword">const</span> imgTarget = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">enter</span>: onImgFullScreen &#125; = <span class="title function_">useFullscreen</span>(imgTarget)</span><br></pre></td></tr></table></figure><ol><li>将<code>onImgFullScreen</code>绑定至全屏按钮点击事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 图片内按钮 - 全屏 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">m-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">class</span>=<span class="string">&quot;absolute bottom-1.5 right-1.5 bg-zinc-100/70&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">type</span>=<span class="string">&quot;info&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">icon</span>=<span class="string">&quot;full&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">iconClass</span>=<span class="string">&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  @<span class="attr">click</span>=<span class="string">&quot;onImgFullScreen&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="27、floating基础布局"><a href="#27、floating基础布局" class="headerlink" title="27、floating基础布局"></a>27、<code>floating</code>基础布局</h3><p>在<code>view/layout/components/floating.vue</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;fixed bottom-10 right-2&quot;&gt;</span><br><span class="line">    &lt;!-- 引导页 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;guide-start w-4 h-4 mb-1 bg-white dark:bg-zinc-900 border dark:border-0 border-zinc-200 rounded-full flex justify-center items-center cursor-pointer duration-200 group hover:shadow-lg&quot;</span><br><span class="line">      @click=&quot;onGuideClick&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        name=&quot;guide&quot;</span><br><span class="line">        class=&quot;w-2 h-2&quot;</span><br><span class="line">        fillClass=&quot;fill-zinc-900 dark:fill-zinc-200 group-hover:fill-main &quot;</span><br><span class="line">      &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 反馈 --&gt;</span><br><span class="line">    &lt;m-popover class=&quot;flex items-center guide-feedback&quot; placement=&quot;top-left&quot;&gt;</span><br><span class="line">      &lt;template #reference&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;w-4 h-4 bg-white dark:bg-zinc-900 border dark:border-0 border-zinc-200 rounded-full flex justify-center items-center cursor-pointer duration-200 group hover:shadow-lg&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;m-svg-icon</span><br><span class="line">            name=&quot;feedback&quot;</span><br><span class="line">            class=&quot;w-2 h-2&quot;</span><br><span class="line">            fillClass=&quot;fill-zinc-900 dark:fill-zinc-200 group-hover:fill-main &quot;</span><br><span class="line">          &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;!-- 鼠标移入 - 立即吐槽弹出框 --&gt;</span><br><span class="line">      &lt;div class=&quot;w-[140px] overflow-hidden&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;flex items-center p-1 cursor-pointer rounded hover:bg-zinc-100/60 dark:hover:bg-zinc-800&quot;</span><br><span class="line">          @click=&quot;onToFeedback&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;m-svg-icon</span><br><span class="line">            name=&quot;feedback&quot;</span><br><span class="line">            class=&quot;w-1.5 h-1.5 mr-1&quot;</span><br><span class="line">            fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">          &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">          &lt;span class=&quot;text-zinc-800 dark:text-zinc-300 text-sm&quot;&gt;立即吐槽&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/m-popover&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="处理scrollBar样式"><a href="#处理scrollBar样式" class="headerlink" title="处理scrollBar样式"></a>处理scrollBar样式</h4><p>对于 tailwind 而言，默认并没有提供 scrollBar 的样式类名，想要处理 scrollBar 的样式，需要安装单独的插件：<a href="https://www.npmjs.com/package/tailwind-scrollbar">tailwind-scrollbar</a></p><ol><li>安装插件：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">--save-dev</span> tailwind<span class="literal">-scrollbar</span></span><br></pre></td></tr></table></figure><ol><li>在<code>tailwind.config.js</code>中注册该插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&#x27;tailwind-scrollbar&#x27;</span>)]</span><br></pre></td></tr></table></figure><ol><li>在<code>tailwind.config.js</code>中，让<code>scrollBar</code>支持<code>dark</code>模式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme</span>: &#123;</span><br><span class="line">  <span class="attr">extend</span>: &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="attr">variants</span>: &#123;</span><br><span class="line">      <span class="attr">scrollbar</span>: [<span class="string">&#x27;dark&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>在<code>main/index.vue</code>的<code>div class</code>和<code>libs/search/index.vue</code>中的<code>下拉区class</code>使用</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrollbar-thin scrollbar-thumb-transparent xl:scrollbar-thumb-zinc-<span class="number">200</span> xl:dark:scrollbar-thumb-zinc-<span class="number">900</span> scrollbar-track-transparent</span><br></pre></td></tr></table></figure><ol><li>在<code>styles/index.scss</code>中为<code>scrollBar</code>指定弧度（1.3.1通过属性指定弧度无效）</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现网站引导功能"><a href="#实现网站引导功能" class="headerlink" title="实现网站引导功能"></a>实现网站引导功能</h4><ol><li>安装<code>driver.js</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">--save</span> driver.js</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/floating/index.vue</code>中导入对应模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; driver &#125; <span class="keyword">from</span> <span class="string">&#x27;driver.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;driver.js/dist/driver.css&quot;</span></span><br></pre></td></tr></table></figure><ol><li>初始化<code>Driver</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引导页处理</span></span><br><span class="line"><span class="keyword">let</span> driverObj = <span class="literal">null</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  driverObj = <span class="title function_">driver</span>(&#123;</span><br><span class="line">    <span class="comment">// 禁止点击蒙版关闭</span></span><br><span class="line">    <span class="attr">allowClose</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">closeBtnText</span>: <span class="string">&#x27;关闭&#x27;</span>,</span><br><span class="line">    <span class="attr">nextBtnText</span>: <span class="string">&#x27;下一步&#x27;</span>,</span><br><span class="line">    <span class="attr">prevBtnText</span>: <span class="string">&#x27;上一步&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/floating/steps.js</code>中设置引导步骤</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">element</span>: <span class="string">&#x27;.guide-home&#x27;</span>, <span class="comment">// 在哪个元素中高亮</span></span><br><span class="line">      <span class="comment">// 配置对象</span></span><br><span class="line">      <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;logo&#x27;</span>, <span class="comment">// 标题</span></span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;点击可返回首页&#x27;</span> <span class="comment">// 描述</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">element</span>: <span class="string">&#x27;.guide-search&#x27;</span>,</span><br><span class="line">      <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;搜索&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;搜索您期望的图片&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">element</span>: <span class="string">&#x27;.guide-theme&#x27;</span>,</span><br><span class="line">      <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;风格&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;选择一个您喜欢的风格&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span> <span class="comment">// 弹出的位置</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">element</span>: <span class="string">&#x27;.guide-my&#x27;</span>,</span><br><span class="line">      <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;账户&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;这里标记了您的账户信息&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">element</span>: <span class="string">&#x27;.guide-start&#x27;</span>,</span><br><span class="line">      <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;引导&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;这里可再次查看引导信息&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">element</span>: <span class="string">&#x27;.guide-feedback&#x27;</span>,</span><br><span class="line">      <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;反馈&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;您的任何不满都可以在这里告诉我们&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/floating/index.vue</code>中设置引导点击事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;fixed bottom-10 right-2&quot;&gt;</span><br><span class="line">    &lt;!-- 引导页 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;guide-start w-4 h-4 mb-1 bg-white dark:bg-zinc-900 border dark:border-0 border-zinc-200 rounded-full flex justify-center items-center cursor-pointer duration-200 group hover:shadow-lg&quot;</span><br><span class="line">      @click=&quot;onGuideClick&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      .......</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">......</span><br><span class="line">import steps from &#x27;./steps&#x27;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">......</span><br><span class="line">// 点击floating引导</span><br><span class="line">const onGuideClick = () =&gt; &#123;</span><br><span class="line">  driverObj.setSteps(steps) // 设置步骤</span><br><span class="line">  driverObj.drive() //从头开始</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="处理引导样式问题"><a href="#处理引导样式问题" class="headerlink" title="处理引导样式问题"></a>处理引导样式问题</h4><ol><li>在<code>styles/index.scss</code>中解决<code>引导</code>功能按钮不在同一水平线的问题</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.driver-fix-stacking</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.driver-navigation-btns</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/floating/index.vue</code>中解决<code>引导到floating</code>时<code>引导</code>和<code>反馈</code>发生错位的情况</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.driver-fix-stacking &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 100004 !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="28、首页跳转到图片详情页"><a href="#28、首页跳转到图片详情页" class="headerlink" title="28、首页跳转到图片详情页"></a>28、首页跳转到图片详情页</h3><ul><li>当点击某一个图片时、跳转到对应图片的详情页</li><li>并且在跳转的过程中有从小到放大的动画的效果（类似于全屏效果的动画）</li></ul><p>在 vue 中，两个路由进行跳转的时候，有时候会为其增加一些跳转的过渡动画，这是一个非常常见的需求。通常情况下，这种过渡动画，可以直接使用 <a href="https://router.vuejs.org/zh/guide/advanced/transitions.html">过渡动效 | Vue Router</a> 来进行实现。</p><p>对于本项目而言，当点击 图片item 进入 详情页 的时候，需要有一个对应的过渡动效，从而提升用户体验。</p><p>这个过渡动效需要<br>    1、同时在 <code>PC 端</code> 和 <code>移动端</code> 生效<br>    2、进入新页面时：在点击的具体 item 中呈现 <strong>由小到大的缩放动画</strong><br>    3、退出新页面时：呈现 <strong>由大到小的缩放动画</strong> 缩回至点击的具体 item 中</p><h4 id="VueRouter过渡动效分析"><a href="#VueRouter过渡动效分析" class="headerlink" title="VueRouter过渡动效分析"></a>VueRouter过渡动效分析</h4><p>在<a href="https://router.vuejs.org/zh/guide/advanced/transitions.html">vue-router</a>页面跳转如果要实现跳转到动画，需要借助于<a href="https://cn.vuejs.org/guide/built-ins/transition.html#the-transition-component">transition</a>组件来进行实现动画</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用动态过渡名称 --&gt;</span><br><span class="line">&lt;router-view v-slot=&quot;&#123; Component, route &#125;&quot;&gt;</span><br><span class="line">  &lt;transition :name=&quot;route.meta.transition&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;Component&quot; /&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><p>以上这段代码是实现过渡动效的关键代码。其中涉及到了三个组件：<br>    1、router-view：路由出口<br>    2、transition：动画组件<br>    3、component：动态组件</p><p>据此可知，<code>vue-router</code> 过渡动效产生的关键就是 <code>transition</code> 动画组件。但对于 <code>transition</code> 而言，它能够产生动画的关键，其实是其内部元素<code>component</code> 的动态组件切换。</p><p>但这样的切换一定是基于整个<strong>页面组件</strong>的。也就是说如果利用这种过渡动效，那么一定是：<strong>从 <code>home</code> 页面到<code>detall</code>页面</strong> 的整体页面组件的切换。所以是 无法 实现期望的这种路由过渡效果的。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>路由的跳转指的是两个部分：<br>​    1、浏览器的url 发生了变化<br>    2、浏览器中展示的页面组件发生了变化</p><p>只要满足这两点，就可以认为路径进行了跳转。</p><p><strong>不去进行真实的路由跳转，而是先修改浏览器的<code>URL</code>，再切换展示的页面(以组件的形式覆盖整个浏览器的可视区域)。这样对于用户而言，就完成了整个的路由跳转工作。</strong></p><p>所以说问题就变成了：</p><ul><li>1、如何让浏览器的<code>url</code>发生变化,但是不跳转页面</li><li>2、如何让一个新的组件以包含动画的形式进行展示<ul><li>那么想要完成第一个功能我们可以使用：<code>History.pushState()</code>方法</li><li>而第二个功能我们可以使用 <code>GSAP</code>这个动画库来进行实现。</li></ul></li></ul><ol><li>在<code>view/main/components/list/item.vue</code>中设置点击进入图片详情事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white dark:bg-zinc-900 xl:dark:bg-zinc-800 rounded pb-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;relative w-full rounded cursor-zoom-in group&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: randomRGB() &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">&quot;onToPinsClick&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        ........</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;click&#x27;</span>])</span><br><span class="line"><span class="comment">// 点击进入图片详情事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onToPinsClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">emits</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: props.<span class="property">data</span>.<span class="property">id</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在父组件<code>list/index.vue</code>中修改浏览器的URL路径</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ......</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item, width &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">itemVue</span> <span class="attr">:data</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;width&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onToPins&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">m-waterfall</span>&gt;</span></span></span><br><span class="line">    &lt;/m-infinite&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 进入 pins</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onToPins</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">  history.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">`/pins/<span class="subst">$&#123;item.id&#125;</span>`</span>) <span class="comment">// 修改浏览器的URL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于GSAP实现"><a href="#基于GSAP实现" class="headerlink" title="基于GSAP实现"></a>基于GSAP实现</h4><p>当<code>url</code>发生变化之后，接下来就只需要处理对应的动画就可以了，动画的处理依赖于 <a href="https://github.com/greensock/GSAP">GSAP</a> 进行实现。对于<code>GSAP</code>而言，主要依赖两个方法：</p><ol><li>gsap.set()：这个方法通常使用在动画开始之前，表示设置动画开始前的元素属性</li><li>gsap.to()：这个方法表示 <strong>最终元素展示的状态</strong></li></ol><p><code>GSAP</code>会基于<code>set</code>和<code>to</code>的状态，来自动执行中间的补间动画<br>所以只需要：</p><ol><li>创建一个对应的组件，使用<code>transition</code>进行包裹</li><li>计算出<code>set</code>时，组件元素对应的样式属性</li><li>计算出<code>to</code>时，组件元素对应的样式属性</li></ol><p>然后就可以由<code>GSAP</code>自动实现对应的补间动画了</p><p>具体实现步骤：</p><ol><li><p>创建<code>view/pins/index.vue</code>组件</p></li><li><p>创建<code>view/pins/components/pins.vue</code>组件，该组件即为图片详情组件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;fixed left-0 top-0 w-screen h-screen z-20 backdrop-blur-4xl bg-white dark:bg-zinc-800 pb-2 overflow-y-auto xl:p-2 xl:bg-transparent&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; id &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  id: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>在 <code>view/main/components/list/index.vue</code>中使用 pins 组件，并使用<code>transition</code>进行包裹，并利用 <a href="https://cn.vuejs.org/guide/built-ins/transition.html#javascript-hooks">JavaScript钩子</a> 绑定对应的三个状态，并添加<code>:css=false</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 点击图片详情展示 --&gt;</span><br><span class="line">&lt;transition</span><br><span class="line">  :css=&quot;false&quot;</span><br><span class="line">  @before-enter=&quot;beforeEnter&quot;</span><br><span class="line">  @enter=&quot;enter&quot;</span><br><span class="line">  @leave=&quot;leave&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;pins-vue v-if=&quot;isVisiblePins&quot; :id=&quot;currentPins.id&quot; /&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><ol><li>修改对应的<code>onToPins</code>方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isVisiblePins = <span class="title function_">ref</span>(<span class="literal">false</span>) <span class="comment">// 控制 pins 展示</span></span><br><span class="line"><span class="keyword">const</span> currentPins = <span class="title function_">ref</span>(&#123;&#125;) <span class="comment">// 当前选中的 pins 属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击图片item - 进入 pins</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onToPins</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">  history.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">`/pins/<span class="subst">$&#123;item.id&#125;</span>`</span>) <span class="comment">// 修改浏览器的URL</span></span><br><span class="line">  currentPins.<span class="property">value</span> = item</span><br><span class="line">  isVisiblePins.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>此时点击即可展示出对应的<code>pins</code>组件</li></ol><p>接下来就是对应的动画内容了。</p><ol><li>在<code>view/main/components/list/item.vue</code>中记录点击时当时item图片的中心位置，该位置即为动画的起点，此处将使用到useElementBounding方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击图片进入详情页动画 记录图片中心点 = 图片距页面（左侧 | 顶部）距离 + 图片自身（宽 | 高）的一半）</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: imgContainerX,</span><br><span class="line">  <span class="attr">y</span>: imgContainerY,</span><br><span class="line">  <span class="attr">width</span>: imgContainerWidth,</span><br><span class="line">  <span class="attr">height</span>: imgContainerHeight</span><br><span class="line">&#125; = <span class="title function_">useElementBounding</span>(imgTarget)</span><br><span class="line"><span class="keyword">const</span> imgContainerCenter = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">translateX</span>: <span class="built_in">parseInt</span>(imgContainerX.<span class="property">value</span> + imgContainerWidth.<span class="property">value</span> / <span class="number">2</span>),</span><br><span class="line">    <span class="attr">translateY</span>: <span class="built_in">parseInt</span>(imgContainerY.<span class="property">value</span> + imgContainerHeight.<span class="property">value</span> / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>在<code>onToPinsClick</code>中，传递计算出的值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击进入图片详情事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onToPinsClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">emits</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: props.<span class="property">data</span>.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">localtion</span>: <span class="title function_">imgContainerCenter</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>安装<code>GSAP</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm i <span class="literal">--save</span> gsap</span><br></pre></td></tr></table></figure><ol><li>在<code>view/main/components/list/index.vue</code>中，填充三个<code>transition</code>钩子</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gsap <span class="keyword">from</span> <span class="string">&#x27;gsap&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击图片进入详情页 - 动画开始前</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">beforeEnter</span> = (<span class="params">el</span>) =&gt; &#123;</span><br><span class="line">  gsap.<span class="title function_">set</span>(el, &#123;</span><br><span class="line">    <span class="attr">scaleX</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">scaleY</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">transformOrigin</span>: <span class="string">&#x27;0 0&#x27;</span>,</span><br><span class="line">    <span class="attr">translateX</span>: currentPins.<span class="property">value</span>.<span class="property">localtion</span>?.<span class="property">translateX</span>,</span><br><span class="line">    <span class="attr">translateY</span>: currentPins.<span class="property">value</span>.<span class="property">localtion</span>?.<span class="property">translateY</span>,</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击图片进入详情页 - 动画执行中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">enter</span> = (<span class="params">el, done</span>) =&gt; &#123;</span><br><span class="line">  gsap.<span class="title function_">to</span>(el, &#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0.3</span>,</span><br><span class="line">    <span class="attr">scaleX</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">scaleY</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">translateX</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">translateY</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">onComplete</span>: done</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 离开图片详情页 - 离开动画执行中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">leave</span> = (<span class="params">el, done</span>) =&gt; &#123;</span><br><span class="line">  gsap.<span class="title function_">to</span>(el, &#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0.3</span>,</span><br><span class="line">    <span class="attr">scaleX</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">scaleY</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">x</span>: currentPins.<span class="property">value</span>.<span class="property">localtion</span>?.<span class="property">translateX</span>,</span><br><span class="line">    <span class="attr">y</span>: currentPins.<span class="property">value</span>.<span class="property">localtion</span>?.<span class="property">translateY</span>,</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>当需要关闭<code>Pins</code>组件时： 需要监听页面的回退事件<code>popState</code>，当回退时间被调用时关闭<code>Pins</code>组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听浏览器后退按钮事件</span></span><br><span class="line"><span class="title function_">useEventListener</span>(<span class="variable language_">window</span>, <span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  isVisiblePins.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="29、移动端详情页navbar"><a href="#29、移动端详情页navbar" class="headerlink" title="29、移动端详情页navbar"></a>29、移动端详情页<code>navbar</code></h3><p>接下来就需要处理<code>pins</code>中对应的页面样式了。<code>pins</code>的页面样式同时可以应用到<code>PC端</code>和<code>移动端</code>。在<code>移动端</code>中，会展示对应的<code>navbar</code>的内容，所以首先要构建出<code>navbar</code>通用组件，然后再基于<code>navbar</code>构建对应的<code>pins</code>样式。</p><p>对于 navbar 而言：</p><ol><li>它分为 左、中、右 三个大的部分，三个部分都可以通过插槽进行指定</li><li>左、右 两边的插槽可以自定义点击事件</li><li>同时<code>navbar</code>有时候会存在吸顶的效果，所以最好还可以通过一个<code>prop</code>指定对应的吸顶展示</li></ol><h4 id="构建navbar"><a href="#构建navbar" class="headerlink" title="构建navbar"></a>构建<code>navbar</code></h4><ol><li>创建<code>libs/navbar/index.vue</code>通用组件，并构建对应的<code>props</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">clickLeft</span>: <span class="title class_">Function</span>, <span class="comment">// 左侧按钮的点击</span></span><br><span class="line">  <span class="attr">clickRight</span>: <span class="title class_">Function</span>, <span class="comment">// 右侧按钮的点击</span></span><br><span class="line">  <span class="attr">sticky</span>: <span class="title class_">Boolean</span> <span class="comment">// 是否吸顶</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>在<code>libs/navbar/index.vue</code>中渲染视图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;w-full h-5 border-b flex items-center z-10 bg-white dark:bg-zinc-800 border-b-zinc-200 dark:border-b-zinc-700&quot;</span><br><span class="line">    :class=&quot;[sticky ? &#x27;sticky top-0 left-0&#x27; : &#x27;relative&#x27;]&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 左 - 点击后退 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;h-full w-5 absolute left-0 flex items-center justify-center&quot;</span><br><span class="line">      @click=&quot;onClickLeft&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;slot name=&quot;left&quot;&gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          name=&quot;back&quot;</span><br><span class="line">          class=&quot;w-2 h-2&quot;</span><br><span class="line">          fillClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 中 - 图片信息 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;h-full flex items-center justify-center m-auto font-bold text-base text-zinc-900 dark:text-zinc-200&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 右 - 点击上传 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;h-full w-5 absolute right-0 flex items-center justify-center&quot;</span><br><span class="line">      @click=&quot;onClickRight&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;slot name=&quot;right&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li><code>navbar</code>左右侧按钮点击事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左侧按钮点击事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClickLeft</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="property">clickLeft</span>) &#123;</span><br><span class="line">    props.<span class="title function_">clickLeft</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  router.<span class="title function_">back</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右侧按钮点击事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClickRight</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="property">clickRight</span>) &#123;</span><br><span class="line">    props.<span class="title function_">clickRight</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应式的pins页面"><a href="#响应式的pins页面" class="headerlink" title="响应式的pins页面"></a>响应式的<code>pins</code>页面</h4><ol><li>在<code>api/pexels.js</code>中新增获取指定图片数据的<code>api</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指定图片数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getPexelsFromId</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/pexels/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/pins/components/pins.vue</code>中获取指定图片数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getPexelsFromId &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/pexels&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取详情数据</span></span><br><span class="line"><span class="keyword">const</span> pexelData = <span class="title function_">ref</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getPexelData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getPexelsFromId</span>(props.<span class="property">id</span>)</span><br><span class="line">  pexelData.<span class="property">value</span> = data</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getPexelData</span>()</span><br></pre></td></tr></table></figure><ol><li>根据获取的数据渲染<code>pins</code>对应的视图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;fixed left-0 top-0 w-screen h-screen z-20 backdrop-blur-4xl bg-white dark:bg-zinc-800 pb-2 overflow-y-auto xl:p-2 xl:bg-transparent&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 移动端下展示 navbar --&gt;</span><br><span class="line">    &lt;m-navbar</span><br><span class="line">      v-if=&quot;isMobileTerminal&quot;</span><br><span class="line">      sticky</span><br><span class="line">      @clickLeft=&quot;onPop&quot;</span><br><span class="line">      @clickRight=&quot;onPop&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; pexelData.title &#125;&#125;</span><br><span class="line">      &lt;template #right&gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          name=&quot;share&quot;</span><br><span class="line">          class=&quot;w-3 h-3&quot;</span><br><span class="line">          fillClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/m-navbar&gt;</span><br><span class="line">    &lt;!-- pc 端下展示关闭按钮图标 --&gt;</span><br><span class="line">    &lt;m-svg-icon</span><br><span class="line">      v-else</span><br><span class="line">      name=&quot;close&quot;</span><br><span class="line">      class=&quot;w-3 h-3 ml-1 p-0.5 cursor-pointer duration-200 rounded-sm hover:bg-zinc-100 absolute right-2 top-2&quot;</span><br><span class="line">      fillClass=&quot;fill-zinc-400&quot;</span><br><span class="line">      @click=&quot;onPop&quot;</span><br><span class="line">    &gt;&lt;/m-svg-icon&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 内容区 --&gt;</span><br><span class="line">    &lt;div class=&quot;xl:w-[80%] xl:h-full xl:mx-auto xl:rounded-lg xl:flex&quot;&gt;</span><br><span class="line">      &lt;img</span><br><span class="line">        class=&quot;w-screen mb-2 xl:w-3/5 xl:h-full xl:rounded-tl-lg xl:rounded-bl-lg&quot;</span><br><span class="line">        :src=&quot;pexelData.photo&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;xl:w-2/5 xl:h-full xl:bg-white xl:dark:bg-zinc-900 xl:rounded-tr-lg xl:rounded-br-lg xl:p-3&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div v-if=&quot;!isMobileTerminal&quot; class=&quot;flex justify-between mb-2&quot;&gt;</span><br><span class="line">          &lt;!-- PC端：分享 --&gt;</span><br><span class="line">          &lt;m-svg-icon</span><br><span class="line">            name=&quot;share&quot;</span><br><span class="line">            class=&quot;w-4 h-4 p-1 cursor-pointer hover:bg-zinc-200 dark:hover:bg-zinc-800 duration-300 rounded&quot;</span><br><span class="line">            fillClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">          &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">          &lt;!-- PC端：收藏 --&gt;</span><br><span class="line">          &lt;m-button</span><br><span class="line">            class=&quot;&quot;</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            icon=&quot;heart&quot;</span><br><span class="line">            iconClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图片标题 --&gt;</span><br><span class="line">        &lt;p</span><br><span class="line">          class=&quot;text-base text-zinc-900 dark:text-zinc-200 ml-1 font-bold xl:text-xl xl:mb-5&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; pexelData.title &#125;&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;!-- 作者：头像 名字 --&gt;</span><br><span class="line">        &lt;div class=&quot;flex items-center mt-1 px-1&quot;&gt;</span><br><span class="line">          &lt;img</span><br><span class="line">            v-lazy</span><br><span class="line">            class=&quot;h-3 w-3 rounded-full&quot;</span><br><span class="line">            :src=&quot;pexelData.avatar&quot;</span><br><span class="line">            alt=&quot;&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;span class=&quot;text-base text-zinc-900 dark:text-zinc-200 ml-1&quot;&gt;&#123;&#123;</span><br><span class="line">            pexelData.author</span><br><span class="line">          &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; getPexelsFromId &#125; from &#x27;@/api/pexels&#x27;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">......</span><br><span class="line">// PC端下关闭按钮处理事件</span><br><span class="line">const router = useRouter()</span><br><span class="line">const store = useStore()</span><br><span class="line">const onPop = () =&gt; &#123;</span><br><span class="line">  // 配置跳转方式</span><br><span class="line">  store.commit(&#x27;app/changeRouterType&#x27;, &#x27;back&#x27;)</span><br><span class="line">  router.back()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="解决刷新空白问题"><a href="#解决刷新空白问题" class="headerlink" title="解决刷新空白问题"></a>解决刷新空白问题</h4><p>当点击图片进入详情页时，再进行刷新操作，会出现页面空白的情况。</p><p>原因：刷新页面时，浏览器会重新加载<code>URL</code>，而此时的<code>URL</code>没有对应的路由。</p><p><strong>解决方案：</strong></p><ol><li>在路由表中配置对应连接的路由对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PC端图片详情页路由：router/modules/pc-route.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    ......,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/pins/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;pins&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/pins/index.vue&#x27;</span>), </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动端图片详情页路由：router/modules/mobile-route.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    ......,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/pins/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;pins&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/pins/index.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li>路由对象中的组件中使用到我们上面定义的<code>pins.vue</code>组件</li><li>这样刷新时就会通过路由匹配到对应的路由组件，在路由初始化时获取<code>id</code>参数传递给组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;w-full h-full bg-zinc-200 dark:bg-zinc-800&quot;&gt;</span><br><span class="line">    &lt;pinsVue :id=&quot;$route.params.id&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import pinsVue from &#x27;./components/pins.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="30、登录-注册模块"><a href="#30、登录-注册模块" class="headerlink" title="30、登录/注册模块"></a>30、登录/注册模块</h3><h4 id="构建登录模块"><a href="#构建登录模块" class="headerlink" title="构建登录模块"></a>构建登录模块</h4><ol><li>在<code>view/layout/components/header/header-my.vue</code>中新建登录按钮及点击事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;m-popover class=&quot;flex items-center&quot; placement=&quot;bottom-left&quot;&gt;</span><br><span class="line">    &lt;template #reference&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;false&quot;</span><br><span class="line">        ......</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 用户头像 --&gt;</span><br><span class="line">        ......</span><br><span class="line">        &lt;!-- 用户头像右边下箭头 --&gt;</span><br><span class="line">        ......</span><br><span class="line">        &lt;!-- vip 标记 --&gt;</span><br><span class="line">        ......</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 登录按钮 --&gt;</span><br><span class="line">      &lt;div v-else&gt;</span><br><span class="line">        &lt;m-button</span><br><span class="line">          class=&quot;guide-my&quot;</span><br><span class="line">          icon=&quot;profile&quot;</span><br><span class="line">          iconColor=&quot;#fff&quot;</span><br><span class="line">          @click=&quot;onToLogin&quot;</span><br><span class="line">        &gt;&lt;/m-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 气泡框 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;false&quot; .....&gt;</span><br><span class="line">      .......</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/m-popover&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const router = useRouter()</span><br><span class="line"></span><br><span class="line">// 构建 menu 数据源</span><br><span class="line">const menuArr = [</span><br><span class="line">  ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 登录按钮点击事件</span><br><span class="line">const onToLogin = () =&gt; &#123;</span><br><span class="line">  router.push(&#x27;/login&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>在<code>mobile-routes.js</code>和<code>pc-routes.js</code>新建登录路由</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/login-register/login/index.vue&#x27;</span>), </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/index.vue</code>构建登录页基本样式结构</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;relative h-screen bg-white dark:bg-zinc-800 text-center xl:bg-zinc-200&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 头部图标：PC端和移动端 --&gt;</span><br><span class="line">    &lt;!-- 头部图标：PC端 --&gt;</span><br><span class="line">    &lt;div class=&quot;hidden pt-5 h-8 xl:block&quot;&gt;</span><br><span class="line">      &lt;img</span><br><span class="line">        v-lazy</span><br><span class="line">        class=&quot;m-auto&quot;</span><br><span class="line">        src=&quot;https://res.lgdsunday.club/signlogo.png&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 头部图标：移动端 --&gt;</span><br><span class="line">    &lt;div class=&quot;h-[111px] xl:hidden&quot;&gt;</span><br><span class="line">      &lt;img</span><br><span class="line">        v-lazy</span><br><span class="line">        class=&quot;dark:hidden&quot;</span><br><span class="line">        src=&quot;https://res.lgdsunday.club/login-bg.png&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;img</span><br><span class="line">        v-lazy</span><br><span class="line">        class=&quot;h-5 absolute top-[5%] left-[50%] translate-x-[-50%]&quot;</span><br><span class="line">        src=&quot;https://m.imooc.com/static/wap/static/common/img/logo-small@2x.png&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 表单区 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;block px-3 mt-4 dark:bg-zinc-800 xl:bg-white xl:w-[388px] xl:dark:bg-zinc-900 xl:m-auto xl:mt-8 xl:py-4 xl:rounded-sm xl:shadow-lg&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;h3</span><br><span class="line">        class=&quot;mb-2 font-semibold text-base text-main dark:text-zinc-300 hidden xl:block&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        账号登录</span><br><span class="line">      &lt;/h3&gt;</span><br><span class="line">      &lt;!-- 表单 --&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input </span><br><span class="line">        class=&quot;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900&quot;</span><br><span class="line">          name=&quot;username&quot;</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          placeholder=&quot;用户名&quot;</span><br><span class="line">          autocomplete=&quot;on&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;input </span><br><span class="line">          class=&quot;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900&quot;</span><br><span class="line">          name=&quot;password&quot;</span><br><span class="line">          type=&quot;password&quot;</span><br><span class="line">          placeholder=&quot;密码&quot;</span><br><span class="line">          autocomplete=&quot;on&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;div class=&quot;pt-1 pb-3 leading-[0px] text-right&quot;&gt;</span><br><span class="line">          &lt;span&gt;还没有账号？&lt;/span&gt;</span><br><span class="line">          &lt;a</span><br><span class="line">            class=&quot;inline-block p-1 text-zinc-400 text-right dark:text-zinc-600 hover:text-zinc-600 dark:hover:text-zinc-400 text-sm duration-400 cursor-pointer&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            立即注册</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;m-button</span><br><span class="line">          class=&quot;w-full dark:bg-zinc-900 xl:dark:bg-zinc-800&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          登录</span><br><span class="line">        &lt;/m-button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">      &lt;!-- 第三方登录：QQ 微信 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex justify-around mt-4&quot;&gt;</span><br><span class="line">        &lt;m-svg-icon class=&quot;w-4 cursor-pointer&quot; name=&quot;qq&quot;&gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;m-svg-icon class=&quot;w-4 cursor-pointer&quot; name=&quot;weixin&quot;&gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li>将<code>头部图标：PC端和移动端</code>封装在<code>view/login-register/components/header.vue</code>中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 头部图标：PC端和移动端 --&gt;</span><br><span class="line">&lt;headerVue&gt;&lt;/headerVue&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import headerVue from &#x27;../components/header.vue&#x27;</span><br></pre></td></tr></table></figure><h4 id="使用vee-validate进行表单校验"><a href="#使用vee-validate进行表单校验" class="headerlink" title="使用vee-validate进行表单校验"></a>使用<code>vee-validate</code>进行表单校验</h4><p>以往开发项目都是借助于第三方组件库俩实现登录注册的表单和表单校验。在当前项目中，由于风格与第三方库的风格互斥、没有采用第三方库。</p><p><strong>表单校验的实现原理</strong>：</p><ol><li>在某一个时机下（失去焦点、内容变化）</li><li>检查表单元素中的 <code>value</code> 是否符合某个条件（校验条件）</li><li>如果不符合，则给出对应的提示</li></ol><p>根据以上原理描述，<strong>自定义表单校验的功能逻辑：</strong></p><ol><li>创建对应的<code>field</code>输入框组件</li><li>该组件中，包含两个元素:<ol><li><code>input</code> 输入框</li><li><code>span</code> 表示错误提示</li></ol></li><li>监听 <code>input</code> 输入框的 <code>blur</code>失去焦点 事件</li><li>根据 <code>input</code>的<code>value</code> 判断是否满足一个或多个指定的条件（比如：是否为空）</li><li>如果不满足，则展示 <code>span</code> 标签，表示错误提示消息</li></ol><p>由于时间比较紧、并且自己封装的表单校验可能复用性不是那么好，所以采用<strong>使用第三方表单校验库</strong></p><p><strong>使用第三方表单校验库优点：</strong></p><ul><li>包比较小、一般这种包只做一种功能</li><li>适用性比较强</li></ul><p>本项目中采用的第三方表单校验库： <a href="https://vee-validate.logaretm.com/v4/tutorials/dynamic-form-generator/">vee-validate</a></p><ol><li>首先安装<code>vee-validate</code>依赖包</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm i vee<span class="literal">-validate</span></span><br></pre></td></tr></table></figure><ol><li><code>vee-validate</code>中提供了非常详细的基础使用流程，在这一套流程中，涉及到了三个组件，分别为：<ol><li><code>Form</code>：表单</li><li><code>Field</code>：输入框</li><li><code>ErrorMessage</code>： 错误提示</li></ol></li><li>使用这三个组件，代替默认的表单域，其中每个单独的表单域都具备一个<code>name</code>，该<code>name</code>为对应<strong>表单域和错误提示</strong>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">      &lt;!-- 表单 --&gt;</span><br><span class="line">      &lt;vee-form @submit=&quot;onLoginHandler&quot;&gt;</span><br><span class="line">        &lt;vee-field</span><br><span class="line">          class=&quot;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900&quot;</span><br><span class="line">          name=&quot;username&quot;</span><br><span class="line">          :rules=&quot;validateUsername&quot;</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          placeholder=&quot;用户名&quot;</span><br><span class="line">          autocomplete=&quot;on&quot;</span><br><span class="line">          v-model=&quot;loginForm.username&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;vee-error-message</span><br><span class="line">          class=&quot;text-sm text-red-600 block mt-0.5 text-left&quot;</span><br><span class="line">          name=&quot;username&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/vee-error-message&gt;</span><br><span class="line">        &lt;vee-field</span><br><span class="line">          class=&quot;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900&quot;</span><br><span class="line">          name=&quot;password&quot;</span><br><span class="line">          :rules=&quot;validatePassword&quot;</span><br><span class="line">          type=&quot;password&quot;</span><br><span class="line">          placeholder=&quot;密码&quot;</span><br><span class="line">          autocomplete=&quot;on&quot;</span><br><span class="line">          v-model=&quot;loginForm.password&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;vee-error-message</span><br><span class="line">          class=&quot;text-sm text-red-600 block mt-0.5 text-left&quot;</span><br><span class="line">          name=&quot;password&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/vee-error-message&gt;</span><br><span class="line"> ......</span><br><span class="line">      &lt;/vee-form&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 第三方登录：QQ 微信 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex justify-around mt-4&quot;&gt;</span><br><span class="line">        &lt;m-svg-icon class=&quot;w-4 cursor-pointer&quot; name=&quot;qq&quot;&gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;m-svg-icon class=&quot;w-4 cursor-pointer&quot; name=&quot;wexin&quot;&gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import headerVue from &#x27;../components/header.vue&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  Form as VeeForm,</span><br><span class="line">  Field as VeeField,</span><br><span class="line">  ErrorMessage as VeeErrorMessage</span><br><span class="line">&#125; from &#x27;vee-validate&#x27;</span><br><span class="line">import &#123; validateUsername, validatePassword &#125; from &#x27;../validate&#x27;</span><br><span class="line"></span><br><span class="line">// 登录触发 - 表单校验通过后</span><br><span class="line">const onLoginHandler = () =&gt; &#123;</span><br><span class="line">  console.log(onLoginHandler)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>在<code>validate.js</code>导出表单校验函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验姓名, 校验成功返回true, 校验失败返回字符串、vee-validate会将字符串显示出来</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">validateName</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="keyword">void</span> <span class="number">0</span> || value.<span class="property">length</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;用户名不能为空&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">length</span> &lt; <span class="number">3</span> || value.<span class="property">length</span> &gt; <span class="number">12</span>) <span class="keyword">return</span> <span class="string">&#x27;用户名只能为3-12位&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">validatePassword</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (！value) <span class="keyword">return</span> <span class="string">&#x27;密码不能为空&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">length</span> &lt; <span class="number">6</span> || value.<span class="property">length</span> &gt; <span class="number">12</span>) <span class="keyword">return</span> <span class="string">&#x27;密码只能为6-12位&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191511742.jpg" alt="image-20220905092900887"> </p><p>如果输入的内容校验不通过会有错误的提示</p><h4 id="人类行为验证说明"><a href="#人类行为验证说明" class="headerlink" title="人类行为验证说明"></a>人类行为验证说明</h4><p>在日常开发过程中人类行为验证已经无处不在了，它主要的作用是过滤出非人类的一些操作</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191511250.jpg" alt="image-20220905095446717"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191511180.jpg" alt="image-20220905095457426"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191511375.jpg" alt="image-20220905095545633"> </p><p><strong>目的</strong>：明确当前的操作是人完成的，而非机器。</p><p><strong>原理</strong>：</p><p>人机验证是通过对用户的行为数据、设备特征与网络数据构建多维度数据分析，采用完整的可信前端安全方案来保证数据采集的真实性、有效性。比如以下方面（但不仅仅限于)︰<br>（1）浏览器特征检查︰所有浏览器都有差异，可以通过各种前端相关手段检查浏览器环境的真实性。<br>（2）鼠标事件（click、move、hover、leave……）<br>（3）页面窗口（size、scroll、坐标……）<br>（4） cookie，等等。</p><p><strong>滑动验证码实现原理</strong> </p><p>滑动验证码是服务端随机生成滑块和带有滑块阴影的背景图片，然后将其随机的滑块位置坐标保存。前端实现互动的交互，将滑块把图拼上，获取用户的相关行为值。然后服务端进行相应值的校验。其背后的逻辑是使用机器学习中的深度学习，根据鼠标滑动轨迹，坐标位置，计算拖动速度，重试次数等多维度来判断是否人为操作。 </p><p>滑动验证码对机器的判断，不只是完成拼图，前端用户看不见的是——验证码后台针对用户产生的行为轨迹数据进行机器学习建模，结合访问频率、地理位置、历史记录等多个维度信息，快速、准确的返回人机判定结果，故而机器识别+模拟不易通过。滑动验证码也不是万无一失，但对滑动行为的模拟需要比较强的破解能力，毕竟还是大幅提升了攻击成本，而且技术也会在攻防转换中不断进步。  </p><p>目前人类行为验证的<strong>实现方案</strong>分为两种： 一种是收费的、另一种是开源的</p><p><strong>收费的代表有</strong>：年费在几万到几十万不等，有专门的技术人员帮助对接</p><ol><li><a href="https://dun.163.com/">网易网盾</a></li><li><a href="http://www.geetest.com/">极验</a></li><li>…</li></ol><p><strong>开源的有</strong>：验证的精准度，需要看服务端的能力</p><ul><li><code>gitee</code>开源的：<a href="https://gitee.com/LongbowEnterprise/SliderCaptcha?_from=gitee_search">slideCaptcha</a></li></ul><p>在项目中我们使用开源的<code>slideCaptcha</code>作为人类行为校验</p><h4 id="人类行为验证实现"><a href="#人类行为验证实现" class="headerlink" title="人类行为验证实现"></a>人类行为验证实现</h4><ol><li>创建<code>vendor</code> 文件夹，复制<code>SliderCaptcha</code> 至该文件夹中</li><li>创建<code>view/login-register/login/slider-captcha.vue</code>，作为人类行为验证组件</li><li>在该组件中，完成对应 <code>UI</code>样式：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;w-[360px] border text-sm border-zinc-300 rounded-sm bg-white p-1 dark:bg-zinc-800 text-zinc-600 dark:text-zinc-300 duration-300 fixed z-50 left-1/2 top-1/3 translate-x-[-50%] translate-y-[-50%]&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div class=&quot;h-4 flex items-center text-sm&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;flex-grow&quot;&gt;请完成安全验证&lt;/span&gt;</span><br><span class="line">      &lt;div @click=&quot;onRefresh&quot;&gt;</span><br><span class="line">        &lt;svg-icon</span><br><span class="line">          name=&quot;refresh&quot;</span><br><span class="line">          class=&quot;w-2 h-2 rounded-sm fill-zinc-600 dark:fill-zinc-300 duration-300 cursor-pointer&quot;</span><br><span class="line">        &gt;&lt;/svg-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;ml-2&quot; @click=&quot;onClose&quot;&gt;</span><br><span class="line">        &lt;svg-icon</span><br><span class="line">          name=&quot;close&quot;</span><br><span class="line">          class=&quot;w-2 h-2 rounded-sm fill-zinc-600 dark:fill-zinc-300 duration-300 cursor-pointer&quot;</span><br><span class="line">        &gt;&lt;/svg-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;captcha&quot; class=&quot;h-[195px]&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在 <code>view/login-register/login/index.vue</code>中导入该组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 人类行为验证模块 --&gt;</span><br><span class="line">&lt;slider-captcha-vue&gt;&lt;/slider-captcha-vue&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import sliderCaptchaVue from &#x27;./slider-captcha.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>接下来就需要生成<code>sliderCaptcha</code>实例，并且在<strong>前端用户拼图成功之后，把用户的拼图操作路径（用户行为）数据传递给服务端，由服务端进行人类行为判定</strong>。在<code>view/login-register/login/slider-captcha.vue</code>中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/vendor/SliderCaptcha/slidercaptcha.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/vendor/SliderCaptcha/longbow.slidercaptcha.min.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCaptcha &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/sys&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> captcha = <span class="literal">null</span> <span class="comment">// 创建captcha实例</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  captcha = <span class="title function_">sliderCaptcha</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;captcha&#x27;</span>, <span class="comment">// 渲染位置</span></span><br><span class="line">    <span class="comment">// 用户拼图成功之后的回调</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">onSuccess</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getCaptcha</span>(&#123;</span><br><span class="line">        <span class="attr">behavior</span>: arr</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用户拼图失败之后的回调</span></span><br><span class="line">    <span class="title function_">onFail</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onFail&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 默认的验证方法，咱们不在此处进行验证，而是选择在用户拼图成功之后进行验证，所以此处永远返回为 true</span></span><br><span class="line">    <span class="title function_">verify</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>创建<code>api/sys.js</code>模块，构建请求接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 人类行为验证</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getCaptcha</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/captcha&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>当用户服务端返回成功之后，传递事件到<code>login</code>组件，同时处理<code>close</code>和<code>reset</code>事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EMITS_CLOSE</span> = <span class="string">&#x27;close&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EMITS_SUCCESS</span> = <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="variable constant_">EMITS_CLOSE</span>, <span class="variable constant_">EMITS_SUCCESS</span>])</span><br><span class="line"><span class="comment">// 用户拼图成功之后的回调</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">onSuccess</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">if</span> (res) &#123; <span class="comment">// 人类行为验证通过</span></span><br><span class="line">    <span class="title function_">emits</span>(<span class="variable constant_">EMITS_SUCCESS</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onReset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  captcha.<span class="title function_">reset</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClose</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">emits</span>(<span class="variable constant_">EMITS_CLOSE</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/index.vue</code>中，监听对应事件处理</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 人类行为验证模块 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slider-captcha-vue</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">v-if</span>=<span class="string">&quot;isSliderCaptchaVisible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  @<span class="attr">close</span>=<span class="string">&quot;isSliderCaptchaVisible = false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  @<span class="attr">success</span>=<span class="string">&quot;onCaptchaSuccess&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span><span class="tag">&lt;/<span class="name">slider-captcha-vue</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> isSliderCaptchaVisible = <span class="title function_">ref</span>(<span class="literal">false</span>) <span class="comment">// 控制 sliderCaptcha 展示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录触发 - 表单校验通过后</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onLoginHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isSliderCaptchaVisible.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人类行为验证通过</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onCaptchaSuccess</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isSliderCaptchaVisible.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行登录操作&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>SliderCaptcha</code> 中所有图标均被放入该路径下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iconfont 在线图标，主要用于 sliderCaptcha --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://at.alicdn.com/t/font_3042963_nv614canpao.css?spm=a313x.7781069.1998910419.47&amp;file=font_3042963_nv614canpao.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191512748.jpeg" alt="image-20220905142847856"> </p><p>完成之后的效果如上</p><h4 id="处理用户登录行为"><a href="#处理用户登录行为" class="headerlink" title="处理用户登录行为"></a>处理用户登录行为</h4><ol><li>在<code>api/sys.js</code>中新增用户登录请求接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loginUser</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/index.vue</code>中绑定登录事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">        &lt;m-button</span><br><span class="line">          class=&quot;w-full dark:bg-zinc-900 xl:dark:bg-zinc-800&quot;</span><br><span class="line">          :isActiveAnim=&quot;false&quot;</span><br><span class="line">          :loading=&quot;loading&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          登录</span><br><span class="line">        &lt;/m-button&gt;</span><br><span class="line">  ......</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">......</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">// 人类行为验证通过</span><br><span class="line">const onCaptchaSuccess = async () =&gt; &#123;</span><br><span class="line">  isSliderCaptchaVisible.value = false</span><br><span class="line">  onLogin() // 登录操作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const loading = ref(false) // 登录时的 loading</span><br><span class="line">// 用户登录行为</span><br><span class="line">const onLogin = async () =&gt; &#123;</span><br><span class="line">  loading.value = true</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>创建<code>store/modules/user.js</code>模块，并在<code>store/index.js</code>中导入<code>user</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    ......,</span><br><span class="line">    user</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">      .......,</span><br><span class="line">      <span class="attr">paths</span>: [<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;search&#x27;</span>, <span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>安装<code>md5</code>[<code>npm i md5</code>]，在<code>store/modules/user.js</code>中构建<code>user</code>模块的<code>vuex</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loginUser &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/sys&#x27;</span></span><br><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">&#x27;md5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 登录之后的 token</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setToken</span>(<span class="params">state, newToken</span>) &#123;</span><br><span class="line">      state.<span class="property">token</span> = newToken <span class="comment">// 保存 token</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; password &#125; = payload <span class="comment">// 加密密码</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">loginUser</span>(&#123;</span><br><span class="line">        ...payload,</span><br><span class="line">        <span class="attr">password</span>: password ? <span class="title function_">md5</span>(password) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>constans/index.js</code>中定义用户名登录方式常量，并在<code>view/login-register/login/index.vue</code>触发<code>vuex</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录方式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">LOGIN_TYPE_USERNAME</span> = <span class="string">&#x27;username&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">......</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; LOGIN_TYPE_USERNAME &#125; from &#x27;@/constants&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">  </span><br><span class="line">const store = useStore()</span><br><span class="line">const router = useRouter()</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">const loading = ref(false) // 登录时的 loading</span><br><span class="line">// 用户输入的用户名和密码</span><br><span class="line">const loginForm = ref(&#123;</span><br><span class="line">  username: &#x27;LGD_Sunday&#x27;,</span><br><span class="line">  password: &#x27;123123&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 用户登录行为</span><br><span class="line">const onLogin = async () =&gt; &#123;</span><br><span class="line">  loading.value = true</span><br><span class="line">  // 执行登录操作</span><br><span class="line">  try &#123;</span><br><span class="line">    await store.dispatch(&#x27;user/login&#x27;, &#123;</span><br><span class="line">      ...loginForm.value,</span><br><span class="line">      loginType: LOGIN_TYPE_USERNAME</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    loading.value = false</span><br><span class="line">  &#125;</span><br><span class="line">  router.push(&#x27;/&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="用户信息的获取"><a href="#用户信息的获取" class="headerlink" title="用户信息的获取"></a>用户信息的获取</h4><ol><li>在<code>api/sys.js</code>中新增获取用户基本信息请求接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getProfile</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/profile&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>utils/request.js</code>的请求拦截器中指定<code>token</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// config.headers.icode = &#x27;你需要在这里填入你的 icode&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123; <span class="comment">// 如果token存在 注入token</span></span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;store.getters.token&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config <span class="comment">// 必须返回配置 return 出的对象，就是请求的配置对象</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>在<code>store/modules/user.js</code>中处理用户信息</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loginUser, getProfile, registerUser &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/sys&#x27;</span></span><br><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">&#x27;md5&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;@/libs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 登录之后的 token</span></span><br><span class="line">    <span class="attr">userInfo</span>: &#123;&#125; <span class="comment">// 获取用户信息</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setToken</span>(<span class="params">state, newToken</span>) &#123;</span><br><span class="line">      state.<span class="property">token</span> = newToken <span class="comment">// 保存 token</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setUserInfo</span>(<span class="params">state, newInfo</span>) &#123;</span><br><span class="line">      state.<span class="property">userInfo</span> = newInfo <span class="comment">// 保存用户信息</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; password &#125; = payload <span class="comment">// 加密密码</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">loginUser</span>(&#123;</span><br><span class="line">        ...payload,</span><br><span class="line">        <span class="attr">password</span>: password ? <span class="title function_">md5</span>(password) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setToken&#x27;</span>, data.<span class="property">token</span>) <span class="comment">// 保存token</span></span><br><span class="line">      context.<span class="title function_">dispatch</span>(<span class="string">&#x27;profile&#x27;</span>) <span class="comment">// 获取用户信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">profile</span>(<span class="params">context</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getProfile</span>()</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, data)</span><br><span class="line">      <span class="comment">// 提示 - 欢迎</span></span><br><span class="line">      <span class="title function_">message</span>(</span><br><span class="line">        <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="string">`欢迎您 <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">          data.vipLevel</span></span></span><br><span class="line"><span class="subst"><span class="string">            ? <span class="string">&#x27;尊贵的 VIP&#x27;</span> + data.vipLevel + <span class="string">&#x27; 用户 &#x27;</span> + data.nickname</span></span></span><br><span class="line"><span class="subst"><span class="string">            : data.nickname</span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span> `</span>,</span><br><span class="line">        <span class="number">6000</span></span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>store/getter.js</code>中新增获取用户信息的快捷访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户信息</span></span><br><span class="line"><span class="attr">userInfo</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>,</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/header-my.vue</code>中：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;$store.getters.token&quot;</span><br><span class="line">        ......</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 用户头像 --&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          ......</span><br><span class="line">          :src=&quot;$store.getters.userInfo.avatar&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"> ......</span><br><span class="line">        &lt;!-- vip 标记 --&gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          v-if=&quot;$store.getters.userInfo.vipLevel&quot;</span><br><span class="line">          ......</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      ......</span><br><span class="line"></span><br><span class="line">    &lt;!-- 气泡框 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;$store.getters.token&quot; class=&quot;w-[140px] overflow-hidden&quot;&gt;</span><br><span class="line">      ......</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><ol><li>在<code>store/modules/user.js</code>中处理用户退出登录</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="comment">// 退出登录</span></span><br><span class="line">    <span class="title function_">logout</span>(<span class="params">context</span>) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setToken&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 清空 token</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, &#123;&#125;) <span class="comment">// 清空用户信息</span></span><br><span class="line">      <span class="comment">// 退出登录之后，重新刷新下页面，因为对于前台项目而言，用户是否登录（是否为 VIP）看到的数据可能不同</span></span><br><span class="line">      location.<span class="title function_">reload</span>() <span class="comment">// 刷新页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/header-my.vue</code>中处理<code>PC端</code>退出登录操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 气泡框 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;$store.getters.token&quot; class=&quot;w-[140px] overflow-hidden&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        ......</span><br><span class="line">        @click=&quot;onItemClick(item)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; confirm &#125; from &#x27;@/libs&#x27;</span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const store = useStore()</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">// menu Item 点击事件，也可以根据其他的 key 作为判定，比如 name</span><br><span class="line">const onItemClick = (item) =&gt; &#123;</span><br><span class="line">  if (item.id === 2) &#123;</span><br><span class="line">    // 退出登录</span><br><span class="line">    confirm(&#x27;您确定要退出登录吗？&#x27;).then(() =&gt; &#123;</span><br><span class="line">      store.dispatch(&#x27;user/logout&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="处理token超时"><a href="#处理token超时" class="headerlink" title="处理token超时"></a>处理<code>token</code>超时</h4><p>通常情况<code>token</code>均具备时效性，<code>token</code>失效后服务端会返回<code>404</code>。当服务端返回<code>401</code>时，表示<code>token</code>超时，需要重新登录。对应的操作可在 <strong>axios 的响应拦截器中进行</strong></p><p>在<code>src/utils/request.js</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端返回非200的状态码时</span></span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理 token 超时问题</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span> &amp;&amp; error.<span class="property">response</span>.<span class="property">data</span> &amp;&amp; error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">code</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/logout&#x27;</span>) <span class="comment">// 退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h4><ol><li>在<code>view/login-register/register/index.vue</code>中构建基本布局</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;relative h-screen bg-white dark:bg-zinc-800 text-center xl:bg-zinc-200&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 头部图标 --&gt;</span><br><span class="line">    &lt;header-vue&gt;&lt;/header-vue&gt;</span><br><span class="line">    &lt;!-- 表单区 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;block px-3 mt-4 dark:bg-zinc-800 xl:bg-white xl:w-[388px] xl:dark:bg-zinc-900 xl:m-auto xl:mt-8 xl:py-4 xl:rounded-sm xl:shadow-lg&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;h3</span><br><span class="line">        class=&quot;mb-2 font-semibold text-base text-main dark:text-zinc-300 hidden xl:block&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        注 册 账 号</span><br><span class="line">      &lt;/h3&gt;</span><br><span class="line">      &lt;!-- 表单 --&gt;</span><br><span class="line">      &lt;vee-form @submit=&quot;onRegister&quot;&gt;</span><br><span class="line">        &lt;!-- 用户名 --&gt;</span><br><span class="line">        &lt;vee-field</span><br><span class="line">          class=&quot;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900&quot;</span><br><span class="line">          name=&quot;username&quot;</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          placeholder=&quot;用户名&quot;</span><br><span class="line">          autocomplete=&quot;on&quot;</span><br><span class="line">          :rules=&quot;validateUsername&quot;</span><br><span class="line">          v-model=&quot;regForm.username&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;vee-error-message</span><br><span class="line">          class=&quot;text-sm text-red-600 block mt-0.5 text-left&quot;</span><br><span class="line">          name=&quot;username&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/vee-error-message&gt;</span><br><span class="line">        &lt;!-- 密码 --&gt;</span><br><span class="line">        &lt;vee-field</span><br><span class="line">          class=&quot;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900&quot;</span><br><span class="line">          name=&quot;password&quot;</span><br><span class="line">          type=&quot;password&quot;</span><br><span class="line">          placeholder=&quot;密码&quot;</span><br><span class="line">          autocomplete=&quot;on&quot;</span><br><span class="line">          :rules=&quot;validatePassword&quot;</span><br><span class="line">          v-model=&quot;regForm.password&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;vee-error-message</span><br><span class="line">          class=&quot;text-sm text-red-600 block mt-0.5 text-left&quot;</span><br><span class="line">          name=&quot;password&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/vee-error-message&gt;</span><br><span class="line">        &lt;!-- 确认密码 --&gt;</span><br><span class="line">        &lt;vee-field</span><br><span class="line">          class=&quot;dark:bg-zinc-800 dark:text-zinc-400 border-b-zinc-400 border-b-[1px] w-full outline-0 pb-1 px-1 text-base focus:border-b-main dark:focus:border-b-zinc-200 xl:dark:bg-zinc-900&quot;</span><br><span class="line">          name=&quot;confirmPassword&quot;</span><br><span class="line">          type=&quot;password&quot;</span><br><span class="line">          placeholder=&quot;确认密码&quot;</span><br><span class="line">          autocomplete=&quot;on&quot;</span><br><span class="line">          rules=&quot;validateConfirmPassword:@password&quot;</span><br><span class="line">          v-model=&quot;regForm.confirmPassword&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;vee-error-message</span><br><span class="line">          class=&quot;text-sm text-red-600 block mt-0.5 text-left&quot;</span><br><span class="line">          name=&quot;confirmPassword&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/vee-error-message&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;pt-1 pb-3 leading-[0px] text-right&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;mb-2&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;inline-block text-zinc-400 text-right dark:text-zinc-600 text-sm duration-400 cursor-pointer&quot;&gt;已有账号？&lt;/span&gt;</span><br><span class="line">            &lt;a</span><br><span class="line">              class=&quot;inline-block text-zinc-600 text-right dark:text-zinc-600 hover:text-hover-main dark:hover:text-zinc-400 text-sm duration-400 cursor-pointer&quot;</span><br><span class="line">              target=&quot;__black&quot;</span><br><span class="line">              @click=&quot;onToLogin&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              去登录</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;text-center&quot;&gt;</span><br><span class="line">            &lt;a</span><br><span class="line">              class=&quot;text-zinc-400 dark:text-zinc-600 hover:text-zinc-600 dark:hover:text-zinc-400 text-sm duration-400&quot;</span><br><span class="line">              href=&quot;https://m.imooc.com/newfaq?id=89&quot;</span><br><span class="line">              target=&quot;__black&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              注册即同意《慕课网注册协议》</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;m-button</span><br><span class="line">          class=&quot;w-full dark:bg-zinc-900 xl:dark:bg-zinc-800&quot;</span><br><span class="line">          :isActiveAnim=&quot;false&quot;</span><br><span class="line">          :loading=&quot;loading&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          立即注册</span><br><span class="line">        &lt;/m-button&gt;</span><br><span class="line">      &lt;/vee-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import headerVue from &#x27;../components/header.vue&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  Form as VeeForm,</span><br><span class="line">  Field as VeeField,</span><br><span class="line">  ErrorMessage as VeeErrorMessage,</span><br><span class="line">&#125; from &#x27;vee-validate&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  validateUsername,</span><br><span class="line">  validatePassword,</span><br><span class="line">&#125; from &#x27;../validate&#x27;</span><br><span class="line">import &#123; LOGIN_TYPE_USERNAME &#125; from &#x27;@/constants&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">const store = useStore()</span><br><span class="line">const router = useRouter()</span><br><span class="line">const route = useRoute()</span><br><span class="line"></span><br><span class="line">// 数据源</span><br><span class="line">const regForm = ref(&#123;</span><br><span class="line">  username: &#x27;&#x27;,</span><br><span class="line">  password: &#x27;&#x27;,</span><br><span class="line">  confirmPassword: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>router/modules/pc-routes.js</code>和<code>router/modules/mobile-routes.js</code>中新增路由</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;register&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/login-register/register/index.vue&#x27;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/index.vue</code>中点击<code>立即注册</code>跳转注册页面</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">          &lt;a</span><br><span class="line">            ......</span><br><span class="line">            @click=&quot;onToRegister&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            立即注册</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">  ......</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">......</span><br><span class="line">// 进入注册页面</span><br><span class="line">const onToRegister = () =&gt; &#123;</span><br><span class="line">  // 配置跳转方式</span><br><span class="line">  store.commit(&#x27;app/changeRouterType&#x27;, &#x27;push&#x27;)</span><br><span class="line">  router.push(&#x27;/register&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/validate.js</code>中新增<code>确认密码</code>的校验规则</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确认密码的表单校验</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">validateConfirmPassword</span> = (<span class="params">value, password</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value !== password[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;两次密码输入必须一致&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/register/index.vue</code>中插入<code>确认密码</code>校验规则</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 确认密码 --&gt;</span><br><span class="line">&lt;vee-field</span><br><span class="line">  ......</span><br><span class="line">  rules=&quot;validateConfirmPassword:@password&quot; </span><br><span class="line">  v-model=&quot;regForm.confirmPassword&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import headerVue from &#x27;../components/header.vue&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  ......,</span><br><span class="line">  defineRule // 该方法作用是插入一条校验规则 - 确认密码</span><br><span class="line">&#125; from &#x27;vee-validate&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  ......,</span><br><span class="line">  validateConfirmPassword // 确认密码</span><br><span class="line">&#125; from &#x27;../validate&#x27;</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">// 插入 确认密码 规则</span><br><span class="line">defineRule(&#x27;validateConfirmPassword&#x27;, validateConfirmPassword)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>在<code>api/sys.js</code>中新增用户注册请求接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">registerUser</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/register&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>store/modules/user.js</code>的<code>vuex的user</code>模块新增用户注册</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loginUser, getProfile, registerUser &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/sys&#x27;</span></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; password &#125; = payload</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">registerUser</span>(&#123;</span><br><span class="line">        ...payload,</span><br><span class="line">        <span class="attr">password</span>: password ? <span class="title function_">md5</span>(password) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/register/index.vue</code>中处理用户注册事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">LOGIN_TYPE_USERNAME</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>) <span class="comment">// loading</span></span><br><span class="line"><span class="comment">// 触发注册</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onRegister</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> payload = &#123;</span><br><span class="line">      <span class="attr">username</span>: regForm.<span class="property">value</span>.<span class="property">username</span>,</span><br><span class="line">      <span class="attr">password</span>: regForm.<span class="property">value</span>.<span class="property">password</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发注册，携带第三方数据</span></span><br><span class="line">    <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/register&#x27;</span>, &#123;</span><br><span class="line">      ...payload,</span><br><span class="line">      ...route.<span class="property">query</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 注册成功，触发登录</span></span><br><span class="line">    <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/login&#x27;</span>, &#123;</span><br><span class="line">      ...payload,</span><br><span class="line">      <span class="attr">loginType</span>: <span class="variable constant_">LOGIN_TYPE_USERNAME</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="31、通用组件v-input"><a href="#31、通用组件v-input" class="headerlink" title="31、通用组件v-input"></a>31、通用组件<code>v-input</code></h3><p><strong>封装的组件具有以下功能</strong></p><ul><li>1、通过<code>v-model</code>绑定数据</li><li>2、通过设置<code>inputType</code>属性值来展示不同的组件<ul><li>2.1、属性值为<code>input</code>时： 展示<code>input</code>组件 (默认)</li><li>2.2、属性值为<code>textarea</code>时，展示<code>textarea</code>组件</li></ul></li><li>3、支持设置<code>max</code>属性值，来限定输出内容的最大长度</li><li>4、支持原生的属性直接透传到<code>input</code>或<code>textarea</code>组件上</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191512796.jpg" alt="image-20220906141919521"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191512366.jpg" alt="image"> </p><h4 id="实现组件封装"><a href="#实现组件封装" class="headerlink" title="实现组件封装"></a>实现组件封装</h4><p>创建<code>libs/input/index.vue</code>组件，构建样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;relative&quot;&gt;</span><br><span class="line">    &lt;!-- 单行文本 --&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      v-if=&quot;type === TYPE_TEXT&quot;</span><br><span class="line">      class=&quot;border-gray-200 dark:border-zinc-600 dark:bg-zinc-800 duration-100 dark:text-zinc-400 border-[1px] outline-0 py-0.5 px-1 text-sm rounded-sm focus:border-blue-400 w-full&quot;</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      v-model=&quot;text&quot;</span><br><span class="line">      :maxlength=&quot;max&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;!-- 多行文本 --&gt;</span><br><span class="line">    &lt;textarea</span><br><span class="line">      v-if=&quot;type === TYPE_TEXTAREA&quot;</span><br><span class="line">      v-model=&quot;text&quot;</span><br><span class="line">      :maxlength=&quot;max&quot;</span><br><span class="line">      rows=&quot;5&quot;</span><br><span class="line">      class=&quot;border-gray-200 dark:border-zinc-600 dark:bg-zinc-800 duration-100 dark:text-zinc-400 border-[1px] outline-0 py-0.5 px-1 text-sm rounded-sm focus:border-blue-400 w-full&quot;</span><br><span class="line">    &gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;!-- 最大长度 --&gt;</span><br><span class="line">    &lt;span</span><br><span class="line">      v-if=&quot;max&quot;</span><br><span class="line">      class=&quot;absolute right-1 bottom-0.5 text-zinc-400 text-xs&quot;</span><br><span class="line">      :class=&quot;&#123; &#x27;text-red-700&#x27;: currentNumber === parseInt(max) &#125;&quot;</span><br><span class="line">      &gt;&#123;&#123; currentNumber &#125;&#125; / &#123;&#123; max &#125;&#125;&lt;/span</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">const TYPE_TEXT = &#x27;text&#x27; // 单行</span><br><span class="line">const TYPE_TEXTAREA = &#x27;textarea&#x27; // 多行</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useVModel &#125; from &#x27;@vueuse/core&#x27;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: &#123; // v-model双向数据绑定</span><br><span class="line">    required: true,</span><br><span class="line">    type: String</span><br><span class="line">  &#125;,</span><br><span class="line">  type: &#123; // 类型：单行文本输入 or 多行文本输入</span><br><span class="line">    type: String,</span><br><span class="line">    default: TYPE_TEXT,</span><br><span class="line">    validator(value) &#123;</span><br><span class="line">      const arr = [TYPE_TEXT, TYPE_TEXTAREA]</span><br><span class="line">      const result = arr.includes(value)</span><br><span class="line">      if (!result) &#123;</span><br><span class="line">        throw new Error(`type 的值必须在可选范围内 [$&#123;arr.join(&#x27;、&#x27;)&#125;]`)</span><br><span class="line">      &#125;</span><br><span class="line">      return result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  max: &#123; // 最大字符数</span><br><span class="line">    type: [String, Number]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineEmits([&#x27;update:modelValue&#x27;]) // 声明双向绑定事件</span><br><span class="line"></span><br><span class="line">const text = useVModel(props) // 输入的字符</span><br><span class="line">// 输入的字符数</span><br><span class="line">const currentNumber = computed(() =&gt; &#123;</span><br><span class="line">  return text.value?.length</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>​        </p><h3 id="32、用户个人资料"><a href="#32、用户个人资料" class="headerlink" title="32、用户个人资料"></a>32、用户个人资料</h3><h4 id="构建基本样式"><a href="#构建基本样式" class="headerlink" title="构建基本样式"></a>构建基本样式</h4><ol><li>创建<code>view/profile/index.vue</code>个人资料页面，并在<code>router/modules/pc-routes.js</code>和<code>router/modules/mobile-routes.js</code>中新增路由</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户个人信息页面</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/profile/index.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">user</span>: <span class="literal">true</span> <span class="comment">// 标记当前的页面只有用户登录之后才可以进入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/header-my.vue</code>中处理点击<code>个人资料</code>跳转用户信息页</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户模块菜单menu Item 点击事件，也可以根据其他的 key 作为判定，比如 name</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onItemClick</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">id</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="title function_">confirm</span>(<span class="string">&#x27;您确定要退出登录吗？&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/logout&#x27;</span>) <span class="comment">// 退出登录</span></span><br><span class="line">  &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  router.<span class="title function_">push</span>(item.<span class="property">path</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/profile/index.vue</code>中处理页面简单样式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;h-full bg-zinc-200 dark:bg-zinc-800 duration-400 overflow-auto xl:pt-1&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;relative max-w-screen-lg mx-auto bg-white dark:bg-zinc-900 duration-400 xl:rounded-sm xl:border-zinc-200 xl:dark:border-zinc-600 xl:border-[1px] xl:px-4 xl:py-2&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 移动端 navbar --&gt;</span><br><span class="line">      &lt;m-navbar sticky v-if=&quot;isMobileTerminal&quot; :clickLeft=&quot;onNavbarLeftClick&quot;&gt;</span><br><span class="line">        个人资料</span><br><span class="line">      &lt;/m-navbar&gt;</span><br><span class="line">      &lt;!-- pc 端标题 --&gt;</span><br><span class="line">      &lt;div v-else class=&quot;text-lg font-bold text-center mb-4 dark:text-zinc-300&quot;&gt;</span><br><span class="line">        个人资料</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;h-full w-full px-1 pb-4 text-sm mt-2 xl:w-2/3 xl:pb-0&quot;&gt;</span><br><span class="line">        &lt;!-- 头像部分 --&gt;</span><br><span class="line">        &lt;div class=&quot;py-1 xl:absolute xl:right-[16%] xl:text-center&quot;&gt;</span><br><span class="line">          &lt;span</span><br><span class="line">            class=&quot;w-8 inline-block mb-2 font-bold text-sm dark:text-zinc-300 xl:block xl:mx-auto&quot;</span><br><span class="line">            &gt;我的头像&lt;/span</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;div</span><br><span class="line">            class=&quot;relative w-[80px] h-[80px] group xl:cursor-pointer xl:left-[50%] xl:translate-x-[-50%]&quot;</span><br><span class="line">            @click=&quot;onAvatarClick&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;!-- 头像 --&gt;</span><br><span class="line">            &lt;img</span><br><span class="line">              v-lazy</span><br><span class="line">              :src=&quot;$store.getters.userInfo.avatar&quot;</span><br><span class="line">              alt=&quot;&quot;</span><br><span class="line">              class=&quot;rounded-[50%] w-full h-full xl:inline-block&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">            &lt;!-- 鼠标移入 --&gt;</span><br><span class="line">            &lt;div</span><br><span class="line">              class=&quot;absolute top-0 rounded-[50%] w-full h-full bg-[rgba(0,0,0,.4)] hidden xl:group-hover:block&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;m-svg-icon</span><br><span class="line">                name=&quot;change-header-image&quot;</span><br><span class="line">                class=&quot;w-2 h-2 m-auto mt-2&quot;</span><br><span class="line">              &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">              &lt;div</span><br><span class="line">                class=&quot;text-xs text-white dark:text-zinc-300 scale-90 mt-0.5&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                点击更换头像</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 隐藏域 --&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            v-show=&quot;false&quot;</span><br><span class="line">            ref=&quot;inputFileTarget&quot;</span><br><span class="line">            type=&quot;file&quot;</span><br><span class="line">            accept=&quot;.png, .jpeg, .jpg, .gif&quot;</span><br><span class="line">            @change=&quot;onSelectImgHandler&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;p class=&quot;mt-1 text-zinc-500 dark:text-zinc-400 text-xs xl:w-10&quot;&gt;</span><br><span class="line">            支持 jpg、png、jpeg 格式大小 5M 以内的图片</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 个人信息输入 --&gt;</span><br><span class="line">        &lt;!-- 用户名 --&gt;</span><br><span class="line">        &lt;div class=&quot;py-1 xl:flex xl:items-center xl:my-1&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;w-8 block mb-1 font-bold dark:text-zinc-300 xl:mb-0&quot;</span><br><span class="line">            &gt;用户名&lt;/span</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=&quot;$store.getters.userInfo.nickname&quot;</span><br><span class="line">            class=&quot;w-full&quot;</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            max=&quot;20&quot;</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 职位 --&gt;</span><br><span class="line">        &lt;div class=&quot;py-1 xl:flex xl:items-center xl:my-1&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;w-8 block mb-1 font-bold dark:text-zinc-300 xl:mb-0&quot;</span><br><span class="line">            &gt;职位&lt;/span</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=&quot;$store.getters.userInfo.title&quot;</span><br><span class="line">            class=&quot;w-full&quot;</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 公司 --&gt;</span><br><span class="line">        &lt;div class=&quot;py-1 xl:flex xl:items-center xl:my-1&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;w-8 block mb-1 font-bold dark:text-zinc-300 xl:mb-0&quot;</span><br><span class="line">            &gt;公司&lt;/span</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=&quot;$store.getters.userInfo.company&quot;</span><br><span class="line">            class=&quot;w-full&quot;</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 个人主页 --&gt;</span><br><span class="line">        &lt;div class=&quot;py-1 xl:flex xl:items-center xl:my-1&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;w-8 block mb-1 font-bold dark:text-zinc-300 xl:mb-0&quot;</span><br><span class="line">            &gt;个人主页&lt;/span</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=&quot;$store.getters.userInfo.homePage&quot;</span><br><span class="line">            class=&quot;w-full&quot;</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 个人介绍 --&gt;</span><br><span class="line">        &lt;div class=&quot;py-1 xl:flex xl:my-1&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;w-8 block mb-1 font-bold dark:text-zinc-300 xl:mb-0&quot;</span><br><span class="line">            &gt;个人介绍&lt;/span</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=&quot;$store.getters.userInfo.introduction&quot;</span><br><span class="line">            class=&quot;w-full&quot;</span><br><span class="line">            type=&quot;textarea&quot;</span><br><span class="line">            max=&quot;50&quot;</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 保存修改按钮 --&gt;</span><br><span class="line">        &lt;m-button</span><br><span class="line">          class=&quot;w-full mt-2 mb-4 dark:text-zinc-300 dark:bg-zinc-800 xl:w-[160px] xl:ml-[50%] xl:translate-x-[-50%]&quot;</span><br><span class="line">          &gt;保存修改&lt;/m-button</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;!-- 移动端退出登录按钮 --&gt;</span><br><span class="line">        &lt;m-button</span><br><span class="line">          v-if=&quot;isMobileTerminal&quot;</span><br><span class="line">          class=&quot;w-full dark:text-zinc-300 dark:bg-zinc-800 xl:w-[160px] xl:ml-[50%] xl:translate-x-[-50%]&quot;</span><br><span class="line">          @click=&quot;onLogoutClick&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          退出登录</span><br><span class="line">        &lt;/m-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import &#123; confirm &#125; from &#x27;@/libs&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const store = useStore()</span><br><span class="line">const router = useRouter()</span><br><span class="line"></span><br><span class="line">// 更换头像点击事件</span><br><span class="line">const inputFileTarget = ref(null) // 隐藏域</span><br><span class="line">const onAvatarClick = () =&gt; &#123;</span><br><span class="line">  inputFileTarget.value.click()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 头像选择之后的回调</span><br><span class="line">const onSelectImgHandler = () =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 移动端：退出登录</span><br><span class="line">const onLogoutClick = () =&gt; &#123;</span><br><span class="line">  confirm(&#x27;确定要退出登录吗？&#x27;).then(() =&gt; &#123;</span><br><span class="line">    store.dispatch(&#x27;user/logout&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改个人资料"><a href="#修改个人资料" class="headerlink" title="修改个人资料"></a>修改个人资料</h4><p>点击保存按钮，调用修改用户信息接口，完成修改</p><p>问题：<code>input</code>双向数据绑定是通过<code>v-model</code>绑定到了<code>vuex</code>数据里面，但是修改<code>vuex</code>里的数据唯一方式是提交对应的<code>motation</code>，目前的写法会使输入框数据一旦改变，就会导致<code>vuex</code>里的数据改变</p><p>方案：</p><ol><li>将<code>v-model</code>拆成<code>:modelValue</code>和<code>@update:modelValue</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">        &lt;!-- 个人信息输入 --&gt;</span><br><span class="line">        &lt;!-- 用户名 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            :modelValue=&quot;$store.getters.userInfo.nickname&quot;</span><br><span class="line">            @update:modelValue=&quot;changeStoreUserInfo(&#x27;nickname&#x27;, $event)&quot;</span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 职位 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            :modelValue=&quot;$store.getters.userInfo.title&quot;</span><br><span class="line">            @update:modelValue=&quot;changeStoreUserInfo(&#x27;title&#x27;, $event)&quot;</span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 公司 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            :modelValue=&quot;$store.getters.userInfo.company&quot;</span><br><span class="line">            @update:modelValue=&quot;changeStoreUserInfo(&#x27;company&#x27;, $event)&quot;      </span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 个人主页 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            :modelValue=&quot;$store.getters.userInfo.homePage&quot;</span><br><span class="line">            @update:modelValue=&quot;changeStoreUserInfo(&#x27;homePage&#x27;, $event)&quot; </span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 个人介绍 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            :modelValue=&quot;$store.getters.userInfo.introduction&quot;</span><br><span class="line">            @update:modelValue=&quot;changeStoreUserInfo(&#x27;introduction&#x27;, $event)&quot;</span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        ......</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li>处理数据本地的双向同步</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据本地的双向同步</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeStoreUserInfo</span> = (<span class="params">key, value</span>) =&gt; &#123;</span><br><span class="line">  store.<span class="title function_">commit</span>(<span class="string">&#x27;user/setUserInfo&#x27;</span>, &#123;</span><br><span class="line">    ...store.<span class="property">getters</span>.<span class="property">userInfo</span>,</span><br><span class="line">    [key]: value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>api/sys.js</code>新增修改用户信息接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">putProfile</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/profile&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>处理点击<code>保存修改</code>按钮事件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 保存修改按钮 --&gt;</span><br><span class="line">&lt;m-button</span><br><span class="line">  class=&quot;w-full mt-2 mb-4 dark:text-zinc-300 dark:bg-zinc-800 xl:w-[160px] xl:ml-[50%] xl:translate-x-[-50%]&quot;</span><br><span class="line">  :loading=&quot;loading&quot;</span><br><span class="line">  @click=&quot;onChangeProfile&quot;</span><br><span class="line">  &gt;保存修改&lt;/m-button</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import &#123; message, confirm &#125; from &#x27;@/libs&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; putProfile &#125; from &#x27;@/api/sys&#x27;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">// 修改个人信息</span><br><span class="line">const loading = ref(false)</span><br><span class="line">const onChangeProfile = async () =&gt; &#123;</span><br><span class="line">  loading.value = true</span><br><span class="line">  await putProfile(store.userInfo.userInfo)</span><br><span class="line">  message(&#x27;success&#x27;, &#x27;用户信息修改成功&#x27;)</span><br><span class="line">  loading.value = false</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="处理不保存同步问题"><a href="#处理不保存同步问题" class="headerlink" title="处理不保存同步问题"></a>处理不保存同步问题</h4><p>问题：在个人资料输入框修改时，没有按保存按钮，数据仍然被修改</p><p>使用本地<code>userInfo</code>数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">        &lt;!-- 个人信息输入 --&gt;</span><br><span class="line">        &lt;!-- 用户名 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=<span class="string">&quot;userInfo.nickname&quot;</span></span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 职位 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=<span class="string">&quot;userInfo.title&quot;</span></span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 公司 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=<span class="string">&quot;userInfo.company&quot;</span>    </span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 个人主页 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=<span class="string">&quot;userInfo.homePage&quot;</span></span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 个人介绍 --&gt;</span><br><span class="line">        ......</span><br><span class="line">          &lt;m-input</span><br><span class="line">            v-model=<span class="string">&quot;userInfo.introduction&quot;</span></span><br><span class="line">            ......</span><br><span class="line">          &gt;&lt;/m-input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        ......</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据本地的双向同步，增加一个单层深拷贝</span></span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">ref</span>(&#123; ...store.<span class="property">getters</span>.<span class="property">userInfo</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改个人信息</span></span><br><span class="line"><span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onChangeProfile</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">putProfile</span>(userInfo.<span class="property">value</span>)</span><br><span class="line">  <span class="title function_">message</span>(<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;用户信息修改成功&#x27;</span>)</span><br><span class="line">  store.<span class="title function_">commit</span>(<span class="string">&#x27;user/setUserInfo&#x27;</span>, userInfo.<span class="property">value</span>) <span class="comment">// 更新 vuex</span></span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="33、个人资料头像"><a href="#33、个人资料头像" class="headerlink" title="33、个人资料头像"></a>33、个人资料头像</h3><p>对于头像修改的逻辑，该功能分为<code>PC端</code>和<code>移动端</code>两种情况，需要分别进行处理：</p><ol><li><p>PC 端：</p><ol><li>点击更换头像</li><li>选择对应文件</li><li>通过<code>Dialog</code>展示图片裁剪</li><li>裁剪后图片上传</li><li>功能完成</li></ol></li><li><p>移动端：</p><ol><li><p>点击更换头像</p></li><li><p>选择对应文件</p></li><li><p>通过<code>popup</code>展示图片裁剪</p></li><li><p>裁剪后图片上传</p></li><li><p>功能完成</p></li></ol></li></ol><p>由此可以发现，两者之间需要通过不同的组件进行裁剪展示</p><h4 id="通用组件Dialog"><a href="#通用组件Dialog" class="headerlink" title="通用组件Dialog"></a>通用组件<code>Dialog</code></h4><p>对于<code>Dialog</code> 通用组件而言，可以参考<code>confirm</code> 的组件的构建过程。|<br>它们两个构建方案非常类似,唯二不同的地方是：</p><ol><li><code>Dialog</code>无需通过方法调用的形式展示</li><li><code>Dialog</code> 的内容区可以渲染任意的内容</li><li><code>Dialog</code>的确定按钮支持loading提示、并且当<code>onOk</code>返回的值为<code>promise</code>时，且<code>promise</code>的状态变为<code>成功状态时</code>才会关闭<code>Dialog</code></li></ol><p>排除这两点之后，其余与confirm完全相同。</p><p><strong>实现<code>Dialog</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 蒙版 --&gt;</span><br><span class="line">    &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;isVisable&quot;</span><br><span class="line">        @click=&quot;close&quot;</span><br><span class="line">        class=&quot;w-screen h-screen bg-zinc-900/80 z-40 fixed top-0 left-0&quot;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;!-- 内容 --&gt;</span><br><span class="line">    &lt;transition name=&quot;up&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;isVisable&quot;</span><br><span class="line">        class=&quot;max-w-[80%] max-h-[80%] overflow-auto fixed top-[10%] left-[50%] translate-x-[-50%] z-50 px-2 py-1.5 rounded-sm border dark:border-zinc-600 cursor-pointer bg-white dark:bg-zinc-800 xl:min-w-[35%]&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 标题 --&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;text-lg font-bold text-zinc-900 dark:text-zinc-200 mb-2&quot;</span><br><span class="line">          v-if=&quot;title&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; title &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 内容 --&gt;</span><br><span class="line">        &lt;div class=&quot;text-base text-zinc-900 dark:text-zinc-200 mb-2&quot;&gt;</span><br><span class="line">          &lt;slot /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 按钮 --&gt;</span><br><span class="line">        &lt;div class=&quot;flex justify-end&quot; v-if=&quot;cancelHandler || confirmHandler&quot;&gt;</span><br><span class="line">          &lt;m-button type=&quot;info&quot; class=&quot;mr-2&quot; @click=&quot;onCancelClick&quot;&gt;</span><br><span class="line">            &#123;&#123; cancelText &#125;&#125;</span><br><span class="line">          &lt;/m-button&gt;</span><br><span class="line">          &lt;m-button type=&quot;primary&quot; @click=&quot;onConfirmClick&quot;&gt;</span><br><span class="line">            &#123;&#123; confirmText &#125;&#125;</span><br><span class="line">          &lt;/m-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useVModel &#125; from &#x27;@vueuse/core&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: &#123;// 控制开关</span><br><span class="line">    type: Boolean,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123; // 标题</span><br><span class="line">    type: String</span><br><span class="line">  &#125;,</span><br><span class="line">  cancelText: &#123;// 取消按钮文本</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;取消&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  confirmText: &#123;// 确定按钮文本</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;确定&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  cancelHandler: &#123;// 取消按钮点击事件</span><br><span class="line">    type: Function</span><br><span class="line">  &#125;,</span><br><span class="line">  confirmHandler: &#123;// 确定按钮点击事件</span><br><span class="line">    type: Function</span><br><span class="line">  &#125;,</span><br><span class="line">  close: &#123;// 关闭的回调</span><br><span class="line">    type: Function</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line"></span><br><span class="line">const isVisable = useVModel(props)// 控制显示处理</span><br><span class="line"></span><br><span class="line">// 取消按钮点击事件</span><br><span class="line">const onCancelClick = () =&gt; &#123;</span><br><span class="line">  if (props.cancelHandler) &#123;</span><br><span class="line">    props.cancelHandler()</span><br><span class="line">  &#125;</span><br><span class="line">  close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 确定按钮点击事件</span><br><span class="line">const onConfirmClick = () =&gt; &#123;</span><br><span class="line">  if (props.confirmHandler) &#123;</span><br><span class="line">    props.confirmHandler()</span><br><span class="line">  &#125;</span><br><span class="line">  close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭</span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">  isVisable.value = false</span><br><span class="line">  if (props.close) &#123;</span><br><span class="line">    props.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  transition: all 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-from,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.up-enter-active,</span><br><span class="line">.up-leave-active &#123;</span><br><span class="line">  transition: all 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.up-enter-from,</span><br><span class="line">.up-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-50%, 100px, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试<code>Dialog</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Dialog v-model=&quot;dialogVisible&quot; :onOk=&quot;onOk&quot;&gt;</span><br><span class="line">    &lt;div&gt;123&lt;/div&gt;</span><br><span class="line">  &lt;/Dialog&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const dialogVisible = ref(true)</span><br><span class="line"></span><br><span class="line">const onOk = () =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(resolve, 2000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191512430.gif" alt="20220906_160011"> </p><h4 id="应用Dialog展示头像"><a href="#应用Dialog展示头像" class="headerlink" title="应用Dialog展示头像"></a>应用<code>Dialog</code>展示头像</h4><ol><li>在<code>src/views/profile/index.vue</code>中，选中的图片会回调至<code>onSelectImgHandler</code>方法，可以利用UBL.createObjectURL0 获取到对应的 blob 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>) <span class="comment">// 头像 dialog 展示</span></span><br><span class="line"><span class="keyword">const</span> currentBolb = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 选中的图片</span></span><br><span class="line"><span class="comment">// 头像选择之后的回调</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSelectImgHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> imgFile = inputFileTarget.<span class="property">value</span>.<span class="property">files</span>[<span class="number">0</span>] <span class="comment">// 获取选中的文件</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(imgFile) <span class="comment">// 生成 blob 对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(blob)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>打印该 blob 可在浏览器中展示选中的图片</li><li>想要在 Dialog 中展示选中的图片，也只需要使用 <code>img</code> 标签的<code>src</code>属性即可：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-dialog title=&quot;裁剪头像&quot; v-model=&quot;isDialogVisible&quot;&gt;</span><br><span class="line">  &lt;img :src=&quot;currentBolb&quot; /&gt;</span><br><span class="line">&lt;/m-dialog&gt;</span><br></pre></td></tr></table></figure><ol><li>将裁剪头像封装成一个组件<code>profile/components/changeAvatar.vue</code>，在PC端和移动端分别使用，并处理后续裁剪、上传功能。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;overflow-auto relative flex flex-col items-center&quot;&gt;</span><br><span class="line">    &lt;m-svg-icon</span><br><span class="line">      v-if=&quot;isMobileTerminal&quot;</span><br><span class="line">      name=&quot;close&quot;</span><br><span class="line">      class=&quot;w-3 h-3 p-0.5 m-1 ml-auto&quot;</span><br><span class="line">      fillClass=&quot;fill-zinc-900 dark:fill-zinc-200 &quot;</span><br><span class="line">      @click=&quot;close&quot;</span><br><span class="line">    &gt;&lt;/m-svg-icon&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img class=&quot;&quot; ref=&quot;imageTarget&quot; :src=&quot;blob&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;m-button</span><br><span class="line">      class=&quot;mt-4 w-[80%] xl:w-1/2&quot;</span><br><span class="line">      :loading=&quot;loading&quot;</span><br><span class="line">      @click=&quot;onConfirmClick&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      确定</span><br><span class="line">    &lt;/m-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">const EMITS_CLOSE = &#x27;close&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; putProfile &#125; from &#x27;@/api/sys&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  blob: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const emits = defineEmits([EMITS_CLOSE])</span><br><span class="line"></span><br><span class="line">// 确定按钮点击事件</span><br><span class="line">const loading = ref(false)</span><br><span class="line">const onConfirmClick = () =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 关闭事件</span><br><span class="line">const close = () =&gt; &#123;</span><br><span class="line">  emits(EMITS_CLOSE)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>在头像选择之后的回调展示 Dialog</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头像选择之后的回调</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSelectImgHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> imgFile = inputFileTarget.<span class="property">value</span>.<span class="property">files</span>[<span class="number">0</span>] <span class="comment">// 获取选中的文件</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(imgFile) <span class="comment">// 生成 blob 对象</span></span><br><span class="line">  currentBolb.<span class="property">value</span> = blob <span class="comment">// 获取选中的图片</span></span><br><span class="line">  isDialogVisible.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 展示 Dialog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>移动端展示裁剪头像时不适应<code>Dialog</code>，采用<code>popup</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- PC 端 --&gt;</span><br><span class="line">&lt;m-dialog v-if=&quot;!isMobileTerminal&quot; v-model=&quot;isDialogVisible&quot;&gt;</span><br><span class="line">  &lt;change-avatar-vue</span><br><span class="line">    :blob=&quot;currentBolb&quot;</span><br><span class="line">    @close=&quot;isDialogVisible = false&quot;</span><br><span class="line">  &gt;&lt;/change-avatar-vue&gt;</span><br><span class="line">&lt;/m-dialog&gt;</span><br><span class="line">&lt;!-- 移动端 --&gt;</span><br><span class="line">&lt;m-popup</span><br><span class="line">  v-else</span><br><span class="line">  :class=&quot;&#123; &#x27;h-screen&#x27;: isDialogVisible &#125;&quot;</span><br><span class="line">  v-model=&quot;isDialogVisible&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;change-avatar-vue</span><br><span class="line">    :blob=&quot;currentBolb&quot;</span><br><span class="line">    @close=&quot;isDialogVisible = false&quot;</span><br><span class="line">  &gt;&lt;/change-avatar-vue&gt;</span><br><span class="line">&lt;/m-popup&gt;</span><br></pre></td></tr></table></figure><ol><li>当两次选择文件，是同一个的时候，change 的回调不会被再次触发。想要解决这个问题，就只需要在每次选择的图片不在被使用之后，清空掉<code>inputTarget</code>的<code>value</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 dialog 关闭</span></span><br><span class="line"><span class="title function_">watch</span>(isDialogVisible, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">    inputFileTarget.<span class="property">value</span>.<span class="property">value</span> = <span class="literal">null</span> <span class="comment">// 防止 change 不重复触发</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="裁剪头像图片"><a href="#裁剪头像图片" class="headerlink" title="裁剪头像图片"></a>裁剪头像图片</h4><p>想要处理图片裁剪需要使用到 <a href="https://github.com/fengyuanchen/cropperjs">cropperjs</a>，它是一个<code>Javascript</code>的库，同时支持<code>PC</code>端 和<code>移动端</code></p><ol><li>安装依赖</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install cropperjs</span><br></pre></td></tr></table></figure><ol><li>在<code>src/views/profile/components/change-avatar.vue</code>中进行导入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Cropper</span> <span class="keyword">from</span> <span class="string">&#x27;cropperjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cropperjs/dist/cropper.css&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>使用<code>new Cropper</code>进行初始化，区分<code>PC端</code>和<code>移动端</code>：所有配置项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动端配置对象</span></span><br><span class="line"><span class="keyword">const</span> mobileOptions = &#123;</span><br><span class="line">  <span class="attr">viewMode</span>: <span class="number">1</span>, <span class="comment">// 将裁剪框限制在画布的大小</span></span><br><span class="line">  <span class="attr">dragMode</span>: <span class="string">&#x27;move&#x27;</span>, <span class="comment">// 移动画布，裁剪框不动</span></span><br><span class="line">  <span class="attr">aspectRatio</span>: <span class="number">1</span>, <span class="comment">// 裁剪框固定纵横比：1:1</span></span><br><span class="line">  <span class="attr">cropBoxMovable</span>: <span class="literal">false</span>, <span class="comment">// 裁剪框不可移动</span></span><br><span class="line">  <span class="attr">cropBoxResizable</span>: <span class="literal">false</span> <span class="comment">// 不可调整裁剪框大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PC 端配置对象</span></span><br><span class="line"><span class="keyword">const</span> pcOptions = &#123;</span><br><span class="line">  <span class="attr">aspectRatio</span>: <span class="number">1</span> <span class="comment">// 裁剪框固定纵横比：1:1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据配置对象处理图片裁剪</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片裁剪处理</span></span><br><span class="line"><span class="keyword">const</span> imageTarget = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">let</span> cropper = <span class="literal">null</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收两个参数：</span></span><br><span class="line"><span class="comment">   * 1. 需要裁剪的图片 DOM</span></span><br><span class="line"><span class="comment">   * 2. options 配置对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  cropper = <span class="keyword">new</span> <span class="title class_">Cropper</span>(</span><br><span class="line">    imageTarget.<span class="property">value</span>,</span><br><span class="line">    isMobileTerminal.<span class="property">value</span> ? mobileOptions : pcOptions</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>处理确定按钮点击事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-button</span><br><span class="line">  <span class="keyword">class</span>=<span class="string">&quot;mt-4 w-[80%] xl:w-1/2&quot;</span></span><br><span class="line">  :loading=<span class="string">&quot;loading&quot;</span></span><br><span class="line">  @click=<span class="string">&quot;onConfirmClick&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  确定</span><br><span class="line">&lt;/m-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定按钮点击事件</span></span><br><span class="line"><span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onConfirmClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 获取裁剪后的图片</span></span><br><span class="line">  cropper.<span class="title function_">getCroppedCanvas</span>().<span class="title function_">toBlob</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 裁剪后的 blob 地址</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="腾讯云cos存储对象"><a href="#腾讯云cos存储对象" class="headerlink" title="腾讯云cos存储对象"></a>腾讯云cos存储对象</h4><p>前端想要上传、修改cos存储桶中的对象、常见的有两种方式：</p><ul><li><p>1、以后台实现对存储桶的操作、前台传输给后台、后台再进行操作</p></li><li><p>2、前端从后台获取到操作存储桶的加密信息之后、直接操作存储桶</p><p>注意：由于签名计算放在前端会暴露 <code>SecretId</code> 和 <code>SecretKey</code>，我们把签名计算过程放在后端实现，前端通过 <code>ajax</code> 向后端获取签名结果，正式部署时请在后端加一层自己网站本身的权限检验。</p></li></ul><p>方案二方式：</p><p>1、安装<a href="https://github.com/tencentyun/cos-js-sdk-v5"><code>cos-js-sdk-v5</code></a>依赖 <a href="https://cloud.tencent.com/document/product/436/11459">腾讯云sdk官网</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cos<span class="literal">-js-sdk-v5</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p>2、构建cos 实例：<strong>初始化cos对象参数</strong></p><div class="table-container"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SecretId</td><td>开发者拥有的项目身份识别ID，用以身份认证，可在APL密钥管理 页面获取</td></tr><tr><td>SecretKey</td><td>开发者拥有的项目身份密钥，可在 APL密钥管理 页面获取</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">COS</span> <span class="keyword">from</span> <span class="string">&#x27;cos-js-sdk-v5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SECRETID 和 SECRETKEY请登录 https://console.cloud.tencent.com/cam/capi 进行查看和管理</span></span><br><span class="line"><span class="keyword">var</span> cos = <span class="keyword">new</span> <span class="title function_">COS</span>(&#123;</span><br><span class="line">    <span class="title class_">SecretId</span>: <span class="string">&#x27;SECRETID&#x27;</span>,</span><br><span class="line">    <span class="title class_">SecretKey</span>: <span class="string">&#x27;SECRETKEY&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>推荐 （秘钥是动态获取的，相对比较安全）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">COS</span> = <span class="built_in">require</span>(<span class="string">&#x27;cos-js-sdk-v5&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cos = <span class="keyword">new</span> <span class="title function_">COS</span>(&#123;</span><br><span class="line">    <span class="comment">// getAuthorization 必选参数</span></span><br><span class="line">    <span class="attr">getAuthorization</span>: <span class="keyword">function</span> (<span class="params">options, callback</span>) &#123;</span><br><span class="line">        <span class="comment">// 异步获取临时密钥</span></span><br><span class="line">        <span class="comment">// 服务端 JS 和 PHP 例子：https://github.com/tencentyun/cos-js-sdk-v5/blob/master/server/</span></span><br><span class="line">        <span class="comment">// 服务端其他语言参考 COS STS SDK ：https://github.com/tencentyun/qcloud-cos-sts-sdk</span></span><br><span class="line">        <span class="comment">// STS 详细文档指引看：https://cloud.tencent.com/document/product/436/14048</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">&#x27;http://example.com/server/sts.php&#x27;</span>; <span class="comment">// url替换成您自己的后端服务</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">target</span>.<span class="property">responseText</span>);</span><br><span class="line">                <span class="keyword">var</span> credentials = data.<span class="property">credentials</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!data || !credentials) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;credentials invalid:\n&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="title function_">callback</span>(&#123;</span><br><span class="line">              <span class="title class_">TmpSecretId</span>: credentials.<span class="property">tmpSecretId</span>,</span><br><span class="line">              <span class="title class_">TmpSecretKey</span>: credentials.<span class="property">tmpSecretKey</span>,</span><br><span class="line">              <span class="title class_">SecurityToken</span>: credentials.<span class="property">sessionToken</span>,</span><br><span class="line">              <span class="comment">// 建议返回服务器时间作为签名的开始时间，避免用户浏览器本地时间偏差过大导致签名错误</span></span><br><span class="line">              <span class="title class_">StartTime</span>: data.<span class="property">startTime</span>, <span class="comment">// 时间戳，单位秒，如：1580000000</span></span><br><span class="line">              <span class="title class_">ExpiredTime</span>: data.<span class="property">expiredTime</span>, <span class="comment">// 时间戳，单位秒，如：1580000000</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3、上传、删除、查询、下载资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cos.<span class="title function_">putObject</span>(&#123;</span><br><span class="line">    <span class="title class_">Bucket</span>: <span class="string">&#x27;examplebucket-1250000000&#x27;</span>, <span class="comment">/* 必须 */</span></span><br><span class="line">    <span class="title class_">Region</span>: <span class="string">&#x27;COS_REGION&#x27;</span>,     <span class="comment">/* 存储桶所在地域，必须字段 */</span></span><br><span class="line">    <span class="title class_">Key</span>: <span class="string">&#x27;exampleobject&#x27;</span>,              <span class="comment">/* 必须 */</span></span><br><span class="line">    <span class="title class_">StorageClass</span>: <span class="string">&#x27;STANDARD&#x27;</span>,</span><br><span class="line">    <span class="title class_">Body</span>: fileObject, <span class="comment">// 上传文件对象</span></span><br><span class="line">    <span class="attr">onProgress</span>: <span class="keyword">function</span>(<span class="params">progressData</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(progressData));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err || data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="阿里云oss存储"><a href="#阿里云oss存储" class="headerlink" title="阿里云oss存储"></a>阿里云oss存储</h4><p>用法和上面的腾讯云的COS存储类似，</p><p>本次方案、采用的是在客户端安装、提供的sdk、调用对应的api来操作存储对象</p><p>具体步骤如下：</p><ol><li>安装<code>ali-oss</code>依赖</li><li>通过接口获取临时访问凭证，生成<code>OSS</code>实例</li><li>利用<code>ossClient.put</code>方法，完成对应上传</li></ol><p>1、<a href="https://help.aliyun.com/document_detail/64041.htm?spm=a2c4g.11186623.0.0.235d24cbqRW0xl#concept-64041-zh"><code>安装sdk</code></a> ali-oss依赖</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ali<span class="literal">-oss</span></span><br></pre></td></tr></table></figure><p>2、创建<code>src/utils/sts.js</code>模块，用来生成创建<code>oss</code>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">OSS</span> <span class="keyword">from</span> <span class="string">&#x27;ali-oss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">REGION</span>, <span class="variable constant_">BUCKET</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getSts &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/sys&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getOSSClient</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getSts</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">OSS</span>(&#123;</span><br><span class="line">    <span class="comment">// yourRegion填写Bucket所在地域。以华东1（杭州）为例，Region填写为oss-cn-hangzhou。</span></span><br><span class="line">    <span class="attr">region</span>: <span class="variable constant_">REGION</span>,</span><br><span class="line">    <span class="comment">// 从STS服务获取的临时访问密钥（AccessKey ID和AccessKey Secret）。</span></span><br><span class="line">    <span class="attr">accessKeyId</span>: res.<span class="property">Credentials</span>.<span class="property">AccessKeyId</span>,</span><br><span class="line">    <span class="attr">accessKeySecret</span>: res.<span class="property">Credentials</span>.<span class="property">AccessKeySecret</span>,</span><br><span class="line">    <span class="comment">// 从STS服务获取的安全令牌（SecurityToken）。</span></span><br><span class="line">    <span class="attr">stsToken</span>: res.<span class="property">Credentials</span>.<span class="property">SecurityToken</span>,</span><br><span class="line">    <span class="comment">// 填写Bucket名称。</span></span><br><span class="line">    <span class="attr">bucket</span>: <span class="variable constant_">BUCKET</span>,</span><br><span class="line">    <span class="comment">// 刷新 token，在 token 过期后自动调用（但是并不生效，可能会在后续的版本中修复）</span></span><br><span class="line">    <span class="attr">refreshSTSToken</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 向您搭建的STS服务获取临时访问凭证。</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getSts</span>()</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">accessKeyId</span>: res.<span class="property">Credentials</span>.<span class="property">AccessKeyId</span>,</span><br><span class="line">        <span class="attr">accessKeySecret</span>: res.<span class="property">Credentials</span>.<span class="property">AccessKeySecret</span>,</span><br><span class="line">        <span class="attr">stsToken</span>: res.<span class="property">Credentials</span>.<span class="property">SecurityToken</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 刷新临时访问凭证的时间间隔，单位为毫秒。</span></span><br><span class="line">    <span class="attr">refreshSTSTokenInterval</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、在<code>constants/index.js</code>新增常量<code>REGION</code>、<code>BUCKET</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// STS 上传数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">REGION</span> = <span class="string">&#x27;oss-cn-beijing&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">BUCKET</span> = <span class="string">&#x27;imooc-front&#x27;</span></span><br></pre></td></tr></table></figure><p>4、在<code>api/sys.js</code>定义接口，获取<code>accessKeyId、accessKeySecret</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 OSS 上传凭证</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getSts</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/sts&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、在<code>view/profile/components/changeAvatar.vue</code>中定义<code>putObjectToOSS</code>方法，上传图片到 OSS </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getOSSClient &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/sts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ossClient = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">useStore</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">putObjectToOSS</span> = <span class="keyword">async</span> (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!ossClient) &#123;</span><br><span class="line">    ossClient = <span class="keyword">await</span> <span class="title function_">getOSSClient</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 因为当前凭证只具备 images 文件夹下的访问权限，所以图片需要上传到 images/xxx.xx 。否则你将得到一个 《AccessDeniedError: You have no right to access this object because of bucket acl.》 的错误</span></span><br><span class="line">    <span class="keyword">const</span> fileTypeArr = file.<span class="property">type</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;store.getters.userInfo.username&#125;</span>/<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      fileTypeArr[fileTypeArr.length - <span class="number">1</span>]</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> ossClient.<span class="title function_">put</span>(<span class="string">`images/<span class="subst">$&#123;fileName&#125;</span>`</span>, file) <span class="comment">// 文件存放路径，文件</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">message</span>(<span class="string">&#x27;error&#x27;</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、当图片裁剪完成之后，触发该方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onConfirmClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 获取裁剪后的图片</span></span><br><span class="line">  cropper.<span class="title function_">getCroppedCanvas</span>().<span class="title function_">toBlob</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 裁剪后的 blob 地址</span></span><br><span class="line">    <span class="comment">// console.log(URL.createObjectURL(blob))</span></span><br><span class="line">    <span class="title function_">putObjectToOSS</span>(blob)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、在头像上传成功之后，只需要调用对应 更新用户信息 接口，即可完成头像的更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传新头像到服务器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onChangeProfile</span> = <span class="keyword">async</span> (<span class="params">avatar</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 更新本地数据</span></span><br><span class="line">  store.<span class="title function_">commit</span>(<span class="string">&#x27;user/setUserInfo&#x27;</span>, &#123;</span><br><span class="line">    ...store.<span class="property">getters</span>.<span class="property">userInfo</span>,</span><br><span class="line">    avatar</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 更新服务器数据</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">putProfile</span>(store.<span class="property">getters</span>.<span class="property">userInfo</span>)</span><br><span class="line">  <span class="title function_">message</span>(<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;用户头像修改成功&#x27;</span>) <span class="comment">// 通知用户</span></span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">false</span> <span class="comment">// 关闭 loading</span></span><br><span class="line">  <span class="title function_">close</span>() <span class="comment">// 关闭 dialog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、在<code>putObjectToOSS</code>中触发该方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">putObjectToOSS</span> = <span class="keyword">async</span> (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">  ......</span><br><span class="line">    <span class="title function_">onChangeProfile</span>(res.<span class="property">url</span>) <span class="comment">// 通知服务器</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">message</span>(<span class="string">&#x27;error&#x27;</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录鉴权"><a href="#登录鉴权" class="headerlink" title="登录鉴权"></a>登录鉴权</h4><p>目前退出登录之后，应用依然会停留在 profile页面，这显然是不合理的。用户在个人资料页面退出登陆后，应让页面跳转到首页，即在用户未登录状态不可查看个人资料页面。需要登录鉴权功能。</p><p>在<code>vue-router</code> <code>4.x</code>中一些钩子和<code>api</code>发生了改变、包括这一小节需要使用到的：<strong>全局前置守卫beforeEach</strong></p><blockquote><p>在vue-router <code>4.x</code>中<code>beforeEach</code>所接收的回调函数中 第三个参数<code>next</code>不是必须的；而使用 <strong>函数返回 不同的值 来代替next的作用</strong></p></blockquote><p><strong>返回值及作用：</strong></p><ul><li><code>false</code>：取消当前的导航。如果浏览器的 URL 改变了(可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li><li><code>undefined</code> / <code>true</code> ： <strong>则导航是有效的</strong>，并调用下一个导航守卫</li><li><code>&#123; name: &#39;Login&#39; &#125;</code> ： 表示重定向到<code>Login</code>页面</li><li><code>&#39;/login&#39;</code>：表示重定向到<code>/login</code></li></ul><p><strong>实现方案</strong>：</p><ul><li><p>1、在路由表中找到需要授权认证之后才能访问的路由、在其路由的<code>meta</code>属性中定义<code>user</code>属性为<code>true</code></p></li><li><p>2、使用路由全局守卫在跳转之前进行判断</p><ul><li><p>跳转的路由<code>user</code>属性是否为<code>true</code></p><ul><li><p><code>true</code>：判断用户是否已登录？ 允许跳转 ： 重定向到 ‘/‘</p></li><li><p><code>false</code>：允许跳转</p></li></ul></li></ul></li></ul><ol><li>在<code>premission.js</code>中进行认证</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;@/libs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理需登录页面的访问权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 无需登录的页面访问</span></span><br><span class="line">  <span class="keyword">if</span> (!to.<span class="property">meta</span>.<span class="property">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 已登录，可进入</span></span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未登录，警告然后返回首页 - 鉴权</span></span><br><span class="line">  <span class="title function_">message</span>(<span class="string">&#x27;warn&#x27;</span>, <span class="string">&#x27;登录失效，请重新登录!&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>main.js</code>引入认证</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/styles/index.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;@/App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useREM &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/flexible&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTheme &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/theme&#x27;</span></span><br><span class="line"><span class="keyword">import</span> libs <span class="keyword">from</span> <span class="string">&#x27;@/libs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> directives <span class="keyword">from</span> <span class="string">&#x27;@/directives&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:svg-icons-register&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./premission&#x27;</span> <span class="comment">// + 引入认证文件</span></span><br></pre></td></tr></table></figure><h3 id="34、移动端路由切换"><a href="#34、移动端路由切换" class="headerlink" title="34、移动端路由切换"></a>34、移动端路由切换</h3><h4 id="通用组件-trigger-menu"><a href="#通用组件-trigger-menu" class="headerlink" title="通用组件  trigger-menu"></a>通用组件  <code>trigger-menu</code></h4><p>对于移动端的展示而言，它有一个和 PC端非常不一样的地方，那就是：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191513990.jpg" alt="photo"> </p><p>这块内容充当了移动端中的<code>TabBar</code>的作用，把它封装为一个通用的组件。<br>接下来就需要来去分析一下这个<code>&quot;TabBar&quot;</code>，把它叫做<code>trigger-menu</code>的构建方案。<br>我们期望将来 <code>trigger-menu</code>可以以这样的形式进行使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-trigger-menu</span><br><span class="line">  v-if=&quot;isMobileTerminal&quot;</span><br><span class="line">  class=&quot;fixed bottom-6 m-auto left-0 right-0 w-[220px]&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;m-trigger-menu-item</span><br><span class="line">    icon=&quot;home&quot;</span><br><span class="line">    iconClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    首页</span><br><span class="line">  &lt;/m-trigger-menu-item&gt;</span><br><span class="line">  &lt;m-trigger-menu-item</span><br><span class="line">    v-if=&quot;$store.getters.token&quot;</span><br><span class="line">    icon=&quot;vip&quot;</span><br><span class="line">    iconClass=&quot;fill-zinc-400 dark:fill-zinc-500&quot;</span><br><span class="line">    textClass=&quot;text-zinc-400 dark:text-zinc-500&quot;</span><br><span class="line">    @click=&quot;onVipClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    VIP</span><br><span class="line">  &lt;/m-trigger-menu-item&gt;</span><br><span class="line">  &lt;m-trigger-menu-item</span><br><span class="line">    icon=&quot;profile&quot;</span><br><span class="line">    iconClass=&quot;fill-zinc-400 dark:fill-zinc-500&quot;</span><br><span class="line">    textClass=&quot;text-zinc-400 dark:text-zinc-500&quot;</span><br><span class="line">    @click=&quot;onMyClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; $store.getters.token ? &#x27;我的&#x27; : &#x27;登录&#x27; &#125;&#125;</span><br><span class="line">  &lt;/m-trigger-menu-item&gt;</span><br><span class="line">&lt;/m-trigger-menu&gt;</span><br></pre></td></tr></table></figure><p>它被分成了两个组件：<code>trigger-menu</code>和<code>trigger-menu-item</code><br>其中 <code>trigger-menu</code>表示整个的功能区域，<code>trigger-menu-item</code>表示其中的每一项。<br>所以需要针对于这两个组件分别进行分析：</p><ol><li><p><code>trigger-menu</code>：对于它而言，只起到一个<strong>包裹容器</strong>的作用，所以只需要提供一个对应的插槽即可</p></li><li><p><code>trigger-menu-item</code>：起到了对应的展示作用，展示包括了<code>icon</code>和文字。所以内部应该存在<code>svg-icon</code>用来展示图片，存在一个插槽用来展示文字。</p></li></ol><p>那么到这里就基本分析完成了这两个组件的基本构建方案，整体还是比较简单的。</p><ol><li>创建<code>libs/trigger-menu/index.vue</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;flex items-center justify-between py-1 px-3 rounded-full bg-white dark:bg-zinc-800 duration-300&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>创建<code>libs/trigger-menu-item/index.vue</code>，并定义 <code>props</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">icon</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">iconClass</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">textClass</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">to</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Object</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>根据<code>props</code>处理对应视图：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;w-5 flex flex-col items-center justify-center col mx-0.5&quot;</span><br><span class="line">    @click=&quot;onItemClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;m-svg-icon</span><br><span class="line">      :name=&quot;icon&quot;</span><br><span class="line">      :fillClass=&quot;iconClass&quot;</span><br><span class="line">      class=&quot;w-2 h-2&quot;</span><br><span class="line">    &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">    &lt;p class=&quot;text-sm mt-0.5&quot; :class=&quot;textClass&quot;&gt;</span><br><span class="line">      &lt;slot /&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li>处理对应的点击链接</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onItemClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.<span class="property">to</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  router.<span class="title function_">push</span>(props.<span class="property">to</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/main/index.vue</code>中根据<strong>设备状态</strong>和<strong>登录状态</strong>进行展示</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-trigger-menu</span><br><span class="line">  v-if=&quot;isMobileTerminal&quot;</span><br><span class="line">  class=&quot;fixed bottom-6 m-auto left-0 right-0 w-[220px]&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;m-trigger-menu-item</span><br><span class="line">    icon=&quot;home&quot;</span><br><span class="line">    iconClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    首页</span><br><span class="line">  &lt;/m-trigger-menu-item&gt;</span><br><span class="line">  &lt;m-trigger-menu-item</span><br><span class="line">    v-if=&quot;$store.getters.token&quot;</span><br><span class="line">    icon=&quot;vip&quot;</span><br><span class="line">    iconClass=&quot;fill-zinc-400 dark:fill-zinc-500&quot;</span><br><span class="line">    textClass=&quot;text-zinc-400 dark:text-zinc-500&quot;</span><br><span class="line">    @click=&quot;onVipClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    VIP</span><br><span class="line">  &lt;/m-trigger-menu-item&gt;</span><br><span class="line">  &lt;m-trigger-menu-item</span><br><span class="line">    icon=&quot;profile&quot;</span><br><span class="line">    iconClass=&quot;fill-zinc-400 dark:fill-zinc-500&quot;</span><br><span class="line">    textClass=&quot;text-zinc-400 dark:text-zinc-500&quot;</span><br><span class="line">    @click=&quot;onMyClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; $store.getters.token ? &#x27;我的&#x27; : &#x27;登录&#x27; &#125;&#125;</span><br><span class="line">  &lt;/m-trigger-menu-item&gt;</span><br><span class="line">&lt;/m-trigger-menu&gt;</span><br></pre></td></tr></table></figure><h4 id="移动端过渡动效"><a href="#移动端过渡动效" class="headerlink" title="移动端过渡动效"></a>移动端过渡动效</h4><p>通常情况下说起移动端项目，指的一般是两种：原生<code>APP</code>和<code>H5</code>网页</p><p>本项目移动端，指的其实就是<code>H5</code>网页。该内容依然是以网页为主，但是被运行到手机端之中。<br>而 H5 网页应用到手机端的时候，通常也是有两种运行的形式：</p><ol><li>直接在手机端浏览器中运行：这种使用情况相对较少。在这种情况下，用户明显的知道这就是一个网页</li><li>在原生组件<code>WebView</code>中运行(混合开发)：通常会被嵌入到<code>APP</code>之中，这种使用情况比较多。所以以下内容，主要针对这种情况进行说明。</li></ol><p>那么这种情况下，用户会认为该内容是<code>APP</code>的一部分，不会把它当成网页，而是会把它当做<code>原生APP</code>。那么一旦用户把它作为<code>APP</code>来进行衡量，那么就会对这块应用有更高的要求。</p><p><strong><em>路由之间的跳转应该具备对应的动画</em></strong>，并且上一个页面的状态应该被缓存（页面的滚动状态和数掘视图）<br>所以想要实现这样的功能，那么就必须要使用到之前提到过的 <em>过渡动效</em> 。<br>把整个的一套移动端的跳转全部封装为一个 通用组件，通过这个通用组件来实现<strong>移动端下 H5 页面的过渡功能</strong></p><p>根据分析可知，接下来要实现<strong>移动端的过渡动效</strong>，以达到一个良好的移动端用户交互体验，所以接下来就要尝试分析一下它的实现方案。<br>它的实现方案整体分为两种：1、过渡动画   2、组件缓存</p><p><strong>过渡动画</strong></p><p>需要使用到 过渡动效 这个功能，它描述了两个路由之间进行过渡时的动画效果。<br>在这个功能的官方描述中，主要包含了三个对应的组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动画 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">:name</span>=<span class="string">&quot;transitionName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--动态组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用其中的<code>transition</code>就可以实现跳转时的动画效果，但是需要注意过渡动画分为两部分：</p><ol><li>进入动画</li><li>退出动画</li></ol><p>所以这里<code>transition</code>的<code>name</code>需要是动态的，一次来表示对应的两种动画形式</p><p><strong>组件缓存</strong></p><p>因为要使用到<strong>组件缓存</strong>，所以还需要依赖 keep-alive。那么这四个组件想要在一起工作，将要按照以下的方式进行组合：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--路由出口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动画组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">:name-</span>&quot;<span class="attr">transitionName</span>&#x27;&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缓存组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 动态组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:key.</span>&quot;$<span class="attr">route.fullPath</span>&quot;  // <span class="attr">同域名下的跳转</span>。<span class="attr">比如</span>(<span class="attr">动态路由</span> /<span class="attr">detail</span>/<span class="attr">:id</span>)</span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是同样有一点，需要注意：不是所有的组件都需要缓存<br>把<strong>组件的进入和退出流程，比作一个栈</strong>，那么只有进入到栈中的组件才需要被缓存，这就像<code>Android</code>中的 <em>任务栈</em> 概念一样，如下图所示：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191513352.jpg" alt="photo"> </p><p>在当前移动端的组件处理中，需要有一个这样的栈来维护组件进入和退出流程，把这样的一套流程，称作：<strong>虚拟任务栈</strong></p><p>对于这样的一个虚拟任务栈而言，可以通过<strong>数组</strong>来进行维护，因为数组与栈的概念相同都是：<strong>先进后出</strong>的流程。</p><p>然后可以通过<code>keep-alive</code>中的<code>include</code>概念，把<strong>虚拟任务栈 - 数组</strong>进行绑定，从而实现<strong>任务栈</strong>的缓存概念</p><h4 id="通用组件transition-router-view"><a href="#通用组件transition-router-view" class="headerlink" title="通用组件transition-router-view"></a>通用组件<code>transition-router-view</code></h4><ol><li>创建<code>libs/transition-router-view/index.vue</code>组件</li><li>创建如下<code>template</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!--路由出口 --&gt;</span><br><span class="line">  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">    &lt;!-- 动画组件 --&gt;</span><br><span class="line">    &lt;transition :name-&quot;transitionName&#x27;&gt;</span><br><span class="line">      &lt;!-- 缓存组件 --&gt;</span><br><span class="line">      &lt;keep-alive&gt;</span><br><span class="line">        &lt;!-- 动态组件 --&gt;</span><br><span class="line">        &lt;component :is=&quot;Component&quot; /&gt;</span><br><span class="line">      &lt;/keep-alive&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li>定义对应的<code>props</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 路由跳转的类型，对应 ROUTER_TYPE_ENUM</span></span><br><span class="line">  <span class="attr">routerType</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="variable constant_">NONE</span>,</span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="variable constant_">ROUTER_TYPE_ENUM</span>.<span class="title function_">includes</span>(val)</span><br><span class="line">      <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">          <span class="string">`你的 routerType 必须是 <span class="subst">$&#123;ROUTER_TYPE_ENUM.join(<span class="string">&#x27;、&#x27;</span>)&#125;</span> 中的一个`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 首页的组件名称，对应任务栈中的第一个组件(首页永远处于栈底)</span></span><br><span class="line">  <span class="attr">mainComponentName</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>接下来处理<strong>路由过渡动画</strong>：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">// push页面时：新页面的进入动画</span><br><span class="line"><span class="selector-class">.push-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: push-in;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line">// push页面时：老页面的退出动画</span><br><span class="line"><span class="selector-class">.push-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: push-out;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line">// push页面时：新页面的进入动画</span><br><span class="line"><span class="keyword">@keyframes</span> push-in &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// push页面时：老页面的退出动画</span><br><span class="line"><span class="keyword">@keyframes</span> push-out &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 后退页面时：即将展示的页面动画</span><br><span class="line"><span class="selector-class">.back-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: back-in;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 后退页面时：后退的页面执行的动画</span><br><span class="line"><span class="selector-class">.back-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: back-out;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 后退页面时：即将展示的页面动画</span><br><span class="line"><span class="keyword">@keyframes</span> back-in &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 后退页面时：后退的页面执行的动画</span><br><span class="line"><span class="keyword">@keyframes</span> back-out &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> transitionName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)<span class="comment">// 跳转动画</span></span><br><span class="line"><span class="comment">// 监听路由变化 - router的前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  transitionName.<span class="property">value</span> = props.<span class="property">routerType</span> <span class="comment">// 定义当前动画名称</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>在<code>store/modules/app.js</code>保存<code>routerType</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="attr">routerType</span>: <span class="string">&#x27;none&#x27;</span> <span class="comment">// 路由跳转类型</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// 修改 routerType</span></span><br><span class="line">  <span class="title function_">changeRouterType</span>(<span class="params">state, newType</span>) &#123;</span><br><span class="line">  state.<span class="property">routerType</span> = newType</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>store/getters.js</code>中指定对应的<code>getters</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// 路由跳转方式</span></span><br><span class="line">  <span class="attr">routerType</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isMobileTerminal.<span class="property">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;none&#x27;</span> <span class="comment">// 在 PC 端下，永远为 none</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">app</span>.<span class="property">routerType</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>修改对应组件的<code>push</code>和<code>back</code>，并在<code>App.vue</code>中将<code>router-view</code>更改为<code>m-transition-router-view</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 一级路由出口 --&gt;</span><br><span class="line">   &lt;!-- 设置吸顶效果 --&gt;</span><br><span class="line">  &lt;div class=&quot;h-screen fixed top-0 left-0 w-screen&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;router-view /&gt; --&gt;</span><br><span class="line">    &lt;m-transition-router-view</span><br><span class="line">      mainComponentName=&quot;home&quot;</span><br><span class="line">      :routerType=&quot;$store.getters.routerType&quot;</span><br><span class="line">    &gt;&lt;/m-transition-router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="处理过渡动画展示样式出错"><a href="#处理过渡动画展示样式出错" class="headerlink" title="处理过渡动画展示样式出错"></a>处理过渡动画展示样式出错</h4><p>点击<code>TabBar</code>时，动画切换页面首页不显示，被要切换页面顶到底部，无法看见。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 动画组件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">transition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:name</span>=<span class="string">&quot;transitionName&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 缓存组件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">component</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;fixed top-0 left-0 w-screen z-50&#x27;: isAnimation &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理动画状态变化</span></span><br><span class="line"><span class="keyword">const</span> isAnimation = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">beforeEnter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isAnimation.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">afterLeave</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isAnimation.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用组件虚拟任务栈"><a href="#通用组件虚拟任务栈" class="headerlink" title="通用组件虚拟任务栈"></a>通用组件虚拟任务栈</h4><p>在<strong>路由表</strong>和<strong>组件</strong>中都添加对应的<strong>name</strong>属性；且要设置name属性值是相同的</p><blockquote><p>注意： 路由表中的<code>name</code>属性和组件的<code>name</code>属性的作用是不同的：</p><ul><li><p>路由表中的<code>name</code>： 是做路由跳转的，可以在<code>push（&#123;name: ‘home’&#125;）</code>进行跳转</p></li><li><p>组件<code>name</code>属性：一般是在<code>devtools中</code>更容易的区分某个组件、和<code>keep-alive</code>中也是通过组件<code>name</code>来进行缓存的</p></li></ul></blockquote><p>目前路由的跳转动画已经执行成功，那么下面就可以来处理对应的组件缓存<br>对于组件缓存而言，将通过 keep-alive 来构建一个虚拟任务栈：</p><ol><li>在<code>libs/transition-router-view/index.vue</code>中，定义变量：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> virtualTaskStack = <span class="title function_">ref</span>([props.<span class="property">mainComponentName</span>]) <span class="comment">// 任务栈</span></span><br></pre></td></tr></table></figure><ol><li>在<code>beforeEach</code>中，定义出栈和入栈：监听路由跳转、在跳转之前保存跳转路由表的name属性值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听路由变化 - router的前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  transitionName.<span class="property">value</span> = props.<span class="property">routerType</span> <span class="comment">// 定义当前动画名称</span></span><br><span class="line">  <span class="keyword">if</span>(props.<span class="property">routerType</span> === <span class="variable constant_">PUSH</span>) &#123;</span><br><span class="line">    virtualTaskStack.<span class="property">value</span>.<span class="title function_">push</span>(to.<span class="property">name</span>) <span class="comment">// 入栈</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (props.<span class="property">routerType</span> === <span class="variable constant_">BACK</span>) &#123;</span><br><span class="line">    virtualTaskStack.<span class="property">value</span>.<span class="title function_">pop</span>() <span class="comment">// 出栈</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 进入首页默认清空栈</span></span><br><span class="line">  <span class="keyword">if</span>(to.<span class="property">name</span> === props.<span class="property">mainComponentName</span>) &#123;</span><br><span class="line">    <span class="title function_">clearTask</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>定义清空栈的方法，在进入首页时应该调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空栈</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clearTask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  virtualTaskStack.<span class="property">value</span> = [props.<span class="property">mainComponentName</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听路由变化 - router的前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// 进入首页默认清空栈</span></span><br><span class="line">  <span class="keyword">if</span>(to.<span class="property">name</span> === props.<span class="property">mainComponentName</span>) &#123;</span><br><span class="line">    <span class="title function_">clearTask</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>在<code>view/main/index.vue</code>中配置组件name</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>使用<code>keep-alive</code>组件配合<code>include</code>属性实现动态缓存组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 缓存组件 --&gt;</span><br><span class="line">&lt;keep-alive :include=&quot;virtualTaskStack&quot;&gt;</span><br><span class="line">  &lt;component</span><br><span class="line">    :is=&quot;Component&quot;</span><br><span class="line">    :class=&quot;&#123; &#x27;fixed top-0 left-0 w-screen z-50&#x27;: isAnimation &#125;&quot;</span><br><span class="line">    :key=&quot;$route.fullPath&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><ol><li>在<code>App.vue</code>中指定<code>mainComponentName</code>为<code>home</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-transition-router-view</span><br><span class="line">  mainComponentName=&quot;home&quot;</span><br><span class="line">  :routerType=&quot;$store.getters.routerType&quot;</span><br><span class="line">&gt;&lt;/m-transition-router-view&gt;</span><br></pre></td></tr></table></figure><h4 id="记录页面滚动位置"><a href="#记录页面滚动位置" class="headerlink" title="记录页面滚动位置"></a>记录页面滚动位置</h4><p>当用户在首页滚动一定区域后，点击<code>TabBar</code>跳转路由后，再<code>back</code>回首页，此时不会回到用户点击之前的滚动后区域，而是会回到首页顶部区域。</p><p><code>keep-alive</code>组件只能够帮助缓存组件，但是不能够记录页面的滚动位置。所以如果想要记录页面滚动位置的话，需要在<strong>通用组件外</strong>单独处理。目前在当前应用中仅需要保存<code>home</code>页面的滚动位置即可：</p><ol><li>在<code>view/main.index.vue</code>中，进行记录滚动位置，可以通过<code>useScroll</code>进行记录</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> containerTarget = <span class="title function_">ref</span>(<span class="literal">null</span>) <span class="comment">// 记录页面滚动位置</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">y</span>: containerTargetScrollY &#125; = <span class="title function_">useScroll</span>(containerTarget)</span><br><span class="line"><span class="comment">// 被缓存的组件再次可见，会回调 onActivated 方法</span></span><br><span class="line"><span class="title function_">onActivated</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!containerTarget.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  containerTarget.<span class="property">value</span>.<span class="property">scrollTop</span> = containerTargetScrollY.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>在最外层<code>div</code>绑定<code>ref</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;h-full overflow-auto bg-white dark:bg-zinc-800 duration-500 scrollbar-thin scrollbar-thumb-transparent xl:scrollbar-thumb-zinc-200 xl:dark:scrollbar-thumb-zinc-900 scrollbar-track-transparent&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;containerTarget&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="35、精选VIP服务"><a href="#35、精选VIP服务" class="headerlink" title="35、精选VIP服务"></a>35、精选VIP服务</h3><p>到现在为止，还剩下最后一个<code>升级 VIP</code>的页面，定义 VIP 的核心是<strong>支付</strong>，剩下的所有逻辑都是为了最终的<strong>支付</strong>来服务的。<br>本章中所设计到的主要内容包含两部分：</p><ol><li>基础的业务构建</li><li>优惠倒计时通用组件</li></ol><h4 id="基础样式构建"><a href="#基础样式构建" class="headerlink" title="基础样式构建"></a>基础样式构建</h4><ol><li>创建<code>view/vip/index.vue</code>组件</li><li>处理对应路由表：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/vip&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;vip&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/vip/index.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">user</span>: <span class="literal">true</span> <span class="comment">// 需要登录才能访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建<code>api/pay.js</code>接口地址：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 VIP 支付数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getVipPayList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/vip/pay/list&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>为<code>view/vip/index.vue</code>指定样式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;h-full bg-zinc-200 dark:bg-zinc-800 duration-400 xl:pt-1&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;max-w-screen-lg mx-auto bg-white dark:bg-zinc-900 duration-400 xl:rounded-sm xl:border-zinc-200 xl:dark:border-zinc-600 xl:border-[1px] xl:px-4&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 移动端 navbar 处理 --&gt;</span><br><span class="line">      &lt;m-navbar v-if=&quot;isMobileTerminal&quot; sticky :clickLeft=&quot;onNavbarLeftClick&quot;&gt;</span><br><span class="line">        精选会员</span><br><span class="line">      &lt;/m-navbar&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;py-2 px-1&quot;&gt;</span><br><span class="line">        &lt;h2</span><br><span class="line">          class=&quot;text-center text-[34px] font-bold tracking-widest text-yellow-600&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          精选VIP</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;p class=&quot;text-center text-lg text-yellow-500&quot;&gt;</span><br><span class="line">          升级精选VIP，畅想所有内容</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;flex justify-between mt-5 overflow-auto pb-2 scrollbar-thin scrollbar-thumb-zinc-200 dark:scrollbar-thumb-zinc-700 scrollbar-track-transparent&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;pay-menu-item-vue</span><br><span class="line">            v-for=&quot;item in vipPayListData&quot;</span><br><span class="line">            :key=&quot;item.id&quot;</span><br><span class="line">            :hot=&quot;item.isHot&quot;</span><br><span class="line">            :select=&quot;item.id === currentPayData.id&quot;</span><br><span class="line">            :data=&quot;item&quot;</span><br><span class="line">            @click=&quot;onChangeCurrentPay&quot;</span><br><span class="line">          &gt;&lt;/pay-menu-item-vue&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;p class=&quot;mt-1 text-sm text-zinc-500&quot;&gt;&#123;&#123; currentPayData.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- 支付 --&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;vip&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import payMenuItemVue from &#x27;./components/pay-menu-item.vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; getVipPayList &#125; from &#x27;@/api/pay&#x27;</span><br><span class="line">  </span><br><span class="line">// 获取支付列表数据</span><br><span class="line">const vipPayListData = ref([])</span><br><span class="line">const getVipPayListData = async () =&gt; &#123;</span><br><span class="line">  const res = await getVipPayList()</span><br><span class="line">  vipPayListData.value = res</span><br><span class="line">  currentPayData.value = vipPayListData.value[0]</span><br><span class="line">&#125;</span><br><span class="line">getVipPayListData()</span><br><span class="line"></span><br><span class="line">// navbar后退</span><br><span class="line">const store = useStore()</span><br><span class="line">const router = useRouter()</span><br><span class="line">const onNavbarLeftClick = () =&gt; &#123;</span><br><span class="line">  store.commit(&#x27;app/changeRouterType&#x27;, &#x27;back&#x27;) // 配置跳转方式</span><br><span class="line">  router.back()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 点击item - 选中支付项</span><br><span class="line">const currentPayData = ref(&#123;&#125;)</span><br><span class="line">const onChangeCurrentPay = (item) =&gt; &#123;</span><br><span class="line">  currentPayData.value = item</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>创建<code>view/vip/components/pay-menu-item.vue</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 单个的支付项 --&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;flex-none flex flex-col items-center w-[100px] mt-2 mr-2 py-3 border-[1px] hover:bg-orange-50 hover:border-orange-300 rounded-md relative cursor-pointer xl:w-[150px] xl:py-2&quot;</span><br><span class="line">    :class=&quot;[</span><br><span class="line">      select</span><br><span class="line">        ? &#x27;bg-orange-50 dark:bg-orange-50/10 border-orange-300 &#x27;</span><br><span class="line">        : &#x27;bg-white dark:bg-zinc-900 border-zinc-300 dark:border-zinc-500&#x27;</span><br><span class="line">    ]&quot;</span><br><span class="line">    @click=&quot;onItemClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 标题 --&gt;</span><br><span class="line">    &lt;p</span><br><span class="line">      class=&quot;text-base&quot;</span><br><span class="line">      :class=&quot;[</span><br><span class="line">        select</span><br><span class="line">          ? &#x27;text-yellow-800 dark:text-orange-300&#x27;</span><br><span class="line">          : &#x27;text-yellow-800 dark:text-zinc-300&#x27;</span><br><span class="line">      ]&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; data.title &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;!-- 价格 --&gt;</span><br><span class="line">    &lt;p</span><br><span class="line">      class=&quot;text-[32px] tracking-tighter font-sans font-bold&quot;</span><br><span class="line">      :class=&quot;[</span><br><span class="line">        select</span><br><span class="line">          ? &#x27;text-yellow-800 dark:text-orange-300&#x27;</span><br><span class="line">          : &#x27;text-yellow-800 dark:text-zinc-300&#x27;</span><br><span class="line">      ]&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;span class=&quot;text-base&quot;&gt;￥&lt;/span&gt;</span><br><span class="line">      &#123;&#123; data.price &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;!-- 原价 --&gt;</span><br><span class="line">    &lt;p class=&quot;text-xs text-yellow-500 line-through&quot;&gt;￥&#123;&#123; data.oldPrice &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 热销 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-if=&quot;hot&quot;</span><br><span class="line">      class=&quot;absolute right-[-1px] top-[-12px] h-[22px] w-[48px] leading-[22px] text-center text-yellow-700 bg-gradient-to-r from-orange-300 to-orange-100 text-[12px] rounded-tr-[10px] rounded-bl-[10px]&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      热销</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">const EMITS_CLICK = &#x27;click&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  data: &#123; // 数据源</span><br><span class="line">    type: Object,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line">  hot: &#123; // 是否热选（热销）</span><br><span class="line">    type: Boolean</span><br><span class="line">  &#125;,</span><br><span class="line">  select: &#123; // 是否被选中</span><br><span class="line">    type: Boolean,</span><br><span class="line">    default: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const emits = defineEmits([EMITS_CLICK])</span><br><span class="line"></span><br><span class="line">const onItemClick = () =&gt; &#123;</span><br><span class="line">  emits(EMITS_CLICK, props.data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>完成精选VIP页面的基本样式构建</p><h4 id="通用组件-倒计时"><a href="#通用组件-倒计时" class="headerlink" title="通用组件 - 倒计时"></a>通用组件 - 倒计时</h4><p>特惠部分存在一个倒计时的功能，需要先把它处理成一个通用组件。<br>所谓倒计时，其实更多的是一个时间的处理，那么对于时间的处理，需要使用到一个第三方的包：<code>dayis</code>。这个包可以处理对应的倒计时格式问题。</p><p>时间格式处理完成之后，处理对应的数据：倒计时模块,可以传递两个值：</p><ol><li><code>time</code>毫秒值：表示倒计时的时长</li><li><code>format</code>格式：表示倒计时的展示格式</li></ol><p>倒计时功能总共分成了以下两部分：<br>1．时间格式<br>2．数据</p><ol><li>创建<code>libs/count-down/index.vue</code>组件，并定义对应的<code>props</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 毫秒</span></span><br><span class="line">  <span class="attr">time</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 遵循 dayjs format 标准：https://day.js.org/docs/zh-CN/parse/string-format</span></span><br><span class="line">  <span class="attr">format</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;HH:mm:ss&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>该倒计时应该提供两个事件：<code>change</code>：倒计时改变、<code>finish</code>：倒计时结束：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EMITS_FINISH</span> = <span class="string">&#x27;finish&#x27;</span> <span class="comment">// 倒计时结束</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EMITS_CHANGE</span> = <span class="string">&#x27;change&#x27;</span> <span class="comment">// 倒计时改变</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="variable constant_">EMITS_FINISH</span>, <span class="variable constant_">EMITS_CHANGE</span>])</span><br></pre></td></tr></table></figure><ol><li>处理倒计时对应的方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INTERVAL_COUNT</span> = <span class="number">1000</span> <span class="comment">// 倒计时时间间隔</span></span><br><span class="line">......</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始倒计时</span></span><br><span class="line"><span class="keyword">let</span> interval = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">close</span>()</span><br><span class="line">  interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">durationFn</span>()</span><br><span class="line">  &#125;, <span class="variable constant_">INTERVAL_COUNT</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> duration = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 倒计时时长</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒计时的执行行为</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">durationFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  duration.<span class="property">value</span> -= <span class="variable constant_">INTERVAL_COUNT</span></span><br><span class="line">  <span class="title function_">emits</span>(<span class="variable constant_">EMITS_CHANGE</span>)</span><br><span class="line">  <span class="comment">// 监听结束行为</span></span><br><span class="line">  <span class="keyword">if</span> (duration.<span class="property">value</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    duration.<span class="property">value</span> = <span class="number">0</span></span><br><span class="line">    <span class="title function_">emits</span>(<span class="variable constant_">EMITS_FINISH</span>)</span><br><span class="line">    <span class="title function_">close</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒计时结束 - 清理倒计时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">close</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (interval) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>监听 <code>props.time</code> ，开始进行倒计时：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watch, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始倒计时</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> props.<span class="property">time</span>,</span><br><span class="line">  <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    duration.<span class="property">value</span> = val</span><br><span class="line">    <span class="title function_">start</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>解决：用户进入VIP页面触发倒计时后，又退出页面，此时，倒计时不会销毁</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件销毁时，清理倒计时</span></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>创建<code>libs/count-down/utils.js</code>，安装<code>dayjs</code>依赖</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm i <span class="literal">--save</span> dayjs</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dayjs/locale/zh-cn&#x27;</span></span><br><span class="line"><span class="keyword">import</span> duration <span class="keyword">from</span> <span class="string">&#x27;dayjs/plugin/duration&#x27;</span></span><br><span class="line"></span><br><span class="line">dayjs.<span class="title function_">locale</span>(<span class="string">&#x27;zh&#x27;</span>) <span class="comment">// 中文</span></span><br><span class="line">dayjs.<span class="title function_">extend</span>(duration) <span class="comment">// duration 插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> dayjs</span><br></pre></td></tr></table></figure><ol><li>利用<code>dayjs</code>处理倒计时显示时间格式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-sm&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; showTime &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; computed, watch, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">......</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 处理显示时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> showTime = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">return</span> dayjs.<span class="title function_">duration</span>(duration.<span class="property">value</span>).<span class="title function_">format</span>(props.<span class="property">format</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>在<code>view/vip/index.vue</code>中使用倒计时组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 支付 --&gt;</span><br><span class="line">&lt;m-count-down :time=&quot;1000 * 60&quot; &gt;&lt;/m-count-down&gt;/&gt;</span><br></pre></td></tr></table></figure><h4 id="VIP支付模块"><a href="#VIP支付模块" class="headerlink" title="VIP支付模块"></a>VIP支付模块</h4><p>对于支付模块的样式而言，PC端 和 移动端 差距较大。所有分别进行处理</p><p><strong><code>PC</code>端：</strong></p><ol><li>创建<code>vip/components/payment/index.vue</code>，分别渲染PC端和移动端的支付样式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- PC 端支付 --&gt;</span><br><span class="line">    &lt;pcPaymentVue</span><br><span class="line">      v-if=&quot;!isMobileTerminal&quot;</span><br><span class="line">      :payData=&quot;payData&quot;</span><br><span class="line">    &gt;&lt;/pcPaymentVue&gt;</span><br><span class="line">    &lt;!-- 移动端支付 --&gt;</span><br><span class="line">    &lt;mobile-payment-vue v-else :payData=&quot;payData&quot;&gt;&lt;/mobile-payment-vue&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import pcPaymentVue from &#x27;./pc-payment/index.vue&#x27;</span><br><span class="line">import mobilePaymentVue from &#x27;./mobile-payment/index.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>创建<code>view/vip/components/payment/pc-payment/index.vue</code>组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 特惠提示 --&gt;</span><br><span class="line">    &lt;discountsVue&gt;&lt;/discountsVue&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import discountsVue from &#x27;../discounts.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>处理支付样式 - 限时特惠：创建<code>vip/components/payment/discount.vue</code>特惠倒计时组件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;flex justify-center items-center py-0.5 bg-orange-100 border-orange-300 border-t xl:border xl:rounded-sm&quot;</span><br><span class="line">    v-if=&quot;!isCountDownFinish&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;m-svg-icon</span><br><span class="line">      name=&quot;countdown&quot;</span><br><span class="line">      class=&quot;w-1.5 h-1.5 mr-1&quot;</span><br><span class="line">      fillClass=&quot;fill-red-600&quot;</span><br><span class="line">    &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">    &lt;p class=&quot;text-xs text-red-600 font-bold&quot;&gt;</span><br><span class="line">      限时特惠 | 距离优惠结束仅剩</span><br><span class="line">      &lt;m-count-down</span><br><span class="line">        :time=&quot;52 * 60 * 1000&quot;</span><br><span class="line">        class=&quot;inline-block&quot;</span><br><span class="line">        @finish=&quot;isCountDownFinish = true&quot;</span><br><span class="line">      &gt;&lt;/m-count-down&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const isCountDownFinish = ref(false) // 倒计时是否结束</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>view/vip/index.vue</code>中展示<code>payment</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 支付 --&gt;</span><br><span class="line">&lt;payment-vue class=&quot;mt-4&quot; /&gt;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/vip/components/payment/pc-payment/index.vue</code>中继续构建剩余样式：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 特惠提示 --&gt;</span><br><span class="line">    &lt;discountsVue&gt;&lt;/discountsVue&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;flex flex-col items-center justify-evenly border-zinc-200 dark:border-zinc-600 border-[1px] py-3 rounded-md mt-1&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;p class=&quot;text-[32px] text-orange-600 font-sans&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;text-base text-zinc-900 dark:text-zinc-200&quot;&gt;</span><br><span class="line">          支付金额：</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;text-lg mr-[-12px]&quot;&gt;￥&lt;/span&gt;</span><br><span class="line">        19</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;flex mt-3&quot;&gt;</span><br><span class="line">        &lt;!-- 支付宝支付 --&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;border border-zinc-200 dark:border-zinc-600 rounded-sm w-[220px] h-[60px] flex items-center pl-2 cursor-pointer duration-200 hover:bg-zinc-50 hover:dark:bg-zinc-800&quot;</span><br><span class="line">          @click=&quot;onAliPayClick&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;img class=&quot;w-4 h-4&quot; src=&quot;@/assets/images/alipay.png&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">          &lt;p class=&quot;text-xl ml-1 text-zinc-800 dark:text-zinc-200&quot;&gt;支付宝&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>至此，<code>PC</code>端支付样式构建完成</p><p><strong>移动端：</strong></p><ol><li>创建<code>view/vip/components/payment/mobile-payment/index.vue</code>组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;fixed left-0 bottom-0 w-screen text-center bg-white dark:bg-zinc-800 xl:hidden&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 特惠提示 --&gt;</span><br><span class="line">    &lt;discounts-vue&gt;&lt;/discounts-vue&gt;</span><br><span class="line">    &lt;!-- 支付 --&gt;</span><br><span class="line">    &lt;div class=&quot;flex justify-between text-xs px-1 py-0.5&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;text-left text-zinc-900 dark:text-zinc-200&quot;&gt;</span><br><span class="line">        &lt;p class=&quot;&quot;&gt;</span><br><span class="line">          券后合计：&lt;span class=&quot;text-red-600 text-[16px] font-sans font-medium&quot;</span><br><span class="line">            &gt;￥&lt;/span</span><br><span class="line">          &gt;&lt;span class=&quot;text-red-600 text-[22px] font-sans font-medium&quot;&gt;9&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;text-red-600&quot;&gt;优惠券：限时立减 ￥10&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;m-button class=&quot;w-[120px]&quot; :isActiveAnim=&quot;false&quot;&gt;</span><br><span class="line">        立即开通</span><br><span class="line">      &lt;/m-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- TODO: popup --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import discountsVue from &#x27;../discounts.vue&#x27;</span><br><span class="line">&lt;/script&gt;  </span><br></pre></td></tr></table></figure><ol><li>处理点击<code>立即开通</code>弹出<code>popup</code>组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">    &lt;m-button class=&quot;w-[120px]&quot; :isActiveAnim=&quot;false&quot; @click=&quot;onConfirmClick&quot;&gt;</span><br><span class="line">        立即开通</span><br><span class="line">      &lt;/m-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;!-- TODO: popup --&gt;</span><br><span class="line">    &lt;m-popup v-model=&quot;isOpenPopup&quot; class=&quot;rounded&quot;&gt;</span><br><span class="line">      请选择支付方式</span><br><span class="line">    &lt;/m-popup&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import discountsVue from &#x27;../discounts.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 点击立即开通弹出popup</span><br><span class="line">const isOpenPopup = ref(false)</span><br><span class="line">const onConfirmClick = () =&gt; &#123;</span><br><span class="line">  isOpenPopup.value = !isOpenPopup.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>创建<code>view/vip/components/payment/mobile-payment/mobile-pay-select.vue</code>支付选择组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;py-2 h-[80vh] flex flex-col&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;text-xl text-zinc-900 dark:text-zinc-200 font-bold mb-2 px-1&quot;&gt;</span><br><span class="line">      选择支付方式</span><br><span class="line">    &lt;/h2&gt;</span><br><span class="line">    &lt;!-- 支付宝 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;flex items-center px-2 py-2 border-b border-b-zinc-200 dark:border-b-zinc-600 active:bg-zinc-200 dark:active:bg-zinc-900&quot;</span><br><span class="line">      @click=&quot;onAlipay&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;img class=&quot;w-4 h-4&quot; src=&quot;@/assets/images/alipay.png&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">      &lt;p class=&quot;text-xl ml-1 text-zinc-800 dark:text-zinc-200&quot;&gt;支付宝&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/vip/components/payment/mobile-payment/index.vue</code>中，通过<code>popup</code>展示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  .......</span><br><span class="line">    &lt;!-- TODO: popup --&gt;</span><br><span class="line">    &lt;m-popup v-model=&quot;isOpenPopup&quot; class=&quot;rounded&quot;&gt;</span><br><span class="line">      &lt;mobile-pay-select-vue /&gt;</span><br><span class="line">    &lt;/m-popup&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import discountsVue from &#x27;../discounts.vue&#x27;</span><br><span class="line">import mobilePaySelectVue from &#x27;./mobile-pay-select.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成移动端支付样式构建</p><h3 id="36、第三方登录"><a href="#36、第三方登录" class="headerlink" title="36、第三方登录"></a>36、第三方登录</h3><p>第三方登录多指的是：<strong>通过第三方 APP 进行登录</strong><br>第三方的 APP是如何和自己的应用进行关联的呢?<br>想要搞明白这个问题，首先需要搞清楚整个第三方登录的流程是如何进行的。<br>以慕课网第三方登录为例：</p><ol><li>点击第三方登录按钮</li><li>弹出一个小窗口，展示对应二维码</li><li>手机打开对应的 APP 进行扫码之后，会跳转到 同意页面，同时浏览器端也会显示扫码成功</li><li>手机端操作同意登录之后，会出现两种情况：<ol><li>当前用户已注册：<ol><li>直接登录</li></ol></li><li>当前用户未注册：<ol><li>执行注册功能：</li></ol></li></ol></li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191514093.jpeg" alt="photo"> </p><p>​        2. 注册成功即可登录</p><p><strong>详细流程如下</strong>：</p><ol><li>点击第三方登录按钮：执行<code>window.open</code>方法，打开一个第三方指定的<code>URL</code>窗口，该地址会指向第三方登录的<code>URL</code>，并且由第三方提供一个对应的二维码</li><li>弹出一个小窗口，展示对应二维码：此处展示的二维码，即为上一步中第三方提供的二维码</li><li>手机打开对应的<code>APP</code>进行扫码之后，会跳转到<strong>同意页面</strong>，同时浏览器端也会显示扫码成功：在第三方中会一直对该页面进行<strong>轮询</strong>，配合第三方<code>APP</code>来判断是否扫码成功</li><li>手机端操作同意登录之后，会出现两种情况：在<code>APP</code>中同意之后，第三方会进行对应的跳转，跳转地址为你指定的地址，在该地址中可以获取到<strong>第三方的用户信息</strong>，该信息即为第三方登录时要获取到的关键数据。</li><li>至此，第三方操作完成。接下来需要进行本平台的登录判定。<ol><li>该注册指的是<strong>第三方用户</strong>是否在本平台中进行了注册。</li><li>因为在之前的所有操作中，拿到的是<strong>第三方的用户信息</strong></li><li>该信息可以帮助直接显示对用的用户名（nickname）和头像，但是因为不包含关键信息（手机号、用户名（username）、密码）所以无法使用该信息帮助用户直接登录</li><li>所以需要判断当前用户是否在咱们自己的平台中完成了注册<ul><li>1.当前用户已注册：直接登录</li><li>2.当前用户未注册：执行注册功能</li></ul></li></ol></li></ol><p>所以，有以上内容可知，想要完成第三方登录功能，共分为两个大的步骤：</p><ol><li>对接第三方平台，获取第三方平台的用户信息</li><li>利用该用户信息，完成本应用的注册</li></ol><h4 id="QQ开放平台流程"><a href="#QQ开放平台流程" class="headerlink" title="QQ开放平台流程"></a>QQ开放平台流程</h4><p>接下来处理<code>QQ</code>第三方登录功能。想要对接<code>QQ</code>登录，那么需要使用到<a href="https://connect.qq.com/index.html"><code>QQ</code>互联平台</a>，在该平台中：</p><ol><li>注册账户</li><li>认证开发者</li><li>注册应用</li></ol><p>具体参考：<a href="https://blog.csdn.net/weixin_44005360/article/details/109278920">QQ登录接口申请流程（全面）-CSDN博客</a></p><h4 id="获取QQ用户信息"><a href="#获取QQ用户信息" class="headerlink" title="获取QQ用户信息"></a>获取QQ用户信息</h4><p>对接 QQ 登录分为以下几步：</p><ol><li>展示 QQ 登录二维码（本小节讲解）</li><li>获取用户信息（本小节讲解）</li><li>完成跨页面数据传输</li><li>认证是否已注册</li><li>完成 QQ 对接</li></ol><p><strong>展示 QQ 登录二维码</strong></p><ol><li>在<code>index.html</code>中，导入<code>QQ SDK</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- QQ 登录 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://connect.qq.com/qc_jssdk.js&quot;</span> <span class="attr">data-appid</span>=<span class="string">&quot;101998494（你的appid）&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-redirecturi</span>=<span class="string">&quot;https://imooc-front.lgdsunday.club/login(你配置的登录成功之后的回调)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建<code>view/login-register/login/qq-login.vue</code>组件，作为<code>QQ</code>登录处理组件，并初始化对应样式和基础功能：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span id=&quot;qqLoginBtn&quot; v-show=&quot;false&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;m-svg-icon</span><br><span class="line">      class=&quot;w-4 cursor-pointer&quot;</span><br><span class="line">      name=&quot;qq&quot;</span><br><span class="line">      @click=&quot;onQQLogin&quot;</span><br><span class="line">    &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// QQ 登录的 URL</span><br><span class="line">const QQ_LOGIN_URL =</span><br><span class="line">  &#x27;https://graph.qq.com/oauth2.0/authorize?client_id=101998494&amp;response_type=token&amp;scope=all&amp;redirect_uri=https%3A%2F%2Fimooc-front.lgdsunday.club%2Flogin&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line"></span><br><span class="line">// QQ 登录挂起</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  QC.Login(</span><br><span class="line">    &#123;</span><br><span class="line">      btnId: &#x27;qqLoginBtn&#x27; //插入按钮的节点id</span><br><span class="line">    &#125;,</span><br><span class="line">    // 登录成功之后的回调，但是需要注意，这个回调只会在《登录回调页面中被执行》</span><br><span class="line">    // QQ登录存在缓存，登录成功一次之后，下次进入会自动重新登录（即：触发该方法，所以应该在离开登录页面时，注销登录）</span><br><span class="line">    (data, opts) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;QQ登录成功&#x27;)</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 登录按钮事件</span><br><span class="line">const onQQLogin = () =&gt; &#123;</span><br><span class="line">  openQQWindow()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 处理 QQ 登录视窗</span><br><span class="line">const openQQWindow = async () =&gt; &#123;</span><br><span class="line">  window.open(</span><br><span class="line">    QQ_LOGIN_URL,</span><br><span class="line">    &#x27;oauth2Login_10609&#x27;,</span><br><span class="line">    &#x27;height=525,width=585, toolbar=no, menubar=no, scrollbars=no, status=no, location=yes, resizable=yes&#x27;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/index.vue</code>中使用该组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第三方登录：QQ 微信 --&gt;</span><br><span class="line">&lt;div class=&quot;flex justify-around mt-4&quot;&gt;</span><br><span class="line">  &lt;qq-login-vue&gt;&lt;/qq-login-vue&gt;</span><br><span class="line">  &lt;m-svg-icon class=&quot;w-4 cursor-pointer&quot; name=&quot;wexin&quot;&gt;&lt;/m-svg-icon&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>那么此时，点击可展示扫码登录弹窗</p><p>注意： 此时扫码登录之后，进入的地址为<strong>线上的回调地址</strong>，所以后续的调试必须在线上进行。<strong>上传当前的代码到线上，进行下一步调试</strong>。</p><p>具体发布流程请查看：<em>发布处理方案 — 前台项目构建与发布处理</em><br>如果没有线上服务器，后续操作可以先不去完成，等待实际工作中需要对接时，再去进行查看。</p><p><strong>获取用户信息</strong></p><p>把当前代码上传成功之后，扫码登录，可查看到当前登录用户信息：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191514839.jpeg" alt="photo"> </p><p>注意：上述操作中扫码成功重定向的地址是在小窗口打开的、并不是在原来的窗口打开、登录成功的回调也是在小窗口中回调！！！</p><p>注意：因为<code>QQ</code>的自动登录机制，所以此时再次打开<code>https://imooc-front.lgdsunday.club/login</code>地址，在控制台中会打印出上次登录的用户信息</p><p>接下来我们进行下一步操作。</p><ol><li>注销登录，防止下次打开时，再次触发 <strong>登录成功</strong> 回调</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注销登录，否则在后续登录中会直接触发该回调</span></span><br><span class="line"><span class="variable constant_">QC</span>.<span class="property">Login</span>.<span class="title function_">signOut</span>()</span><br></pre></td></tr></table></figure><ol><li>获取当前用户唯一标识，作为判断用户是否已注册的依据：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 获取当前用户唯一标识，作为判断用户是否已注册的依据</span></span><br><span class="line"><span class="keyword">const</span> accessToken = <span class="regexp">/access_token=((.*))&amp;expires_in/</span>.<span class="title function_">exec</span>(</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span></span><br><span class="line">)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol><li>大家要注意，此时我们的所有的代码运行都是在 <strong>打开的新窗口中进行的</strong>，所以我们需要把关键数据，传输回 <strong>原页面</strong>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 拼接请求对象</span></span><br><span class="line"><span class="keyword">const</span> oauthObj = &#123;</span><br><span class="line">  <span class="attr">nickname</span>: data.<span class="property">nickname</span>,</span><br><span class="line">  <span class="attr">figureurl_qq_2</span>: data.<span class="property">figureurl_qq_2</span>,</span><br><span class="line">  accessToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oauthObj)</span><br></pre></td></tr></table></figure><p>关键数据对象拼接完成之后，下面就需要完成 <strong>跨页面传输</strong>了。</p><h4 id="跨页面信息传输"><a href="#跨页面信息传输" class="headerlink" title="跨页面信息传输"></a>跨页面信息传输</h4><blockquote><p>注意：上述操作中扫码成功重定向的地址是在小窗口打开的、并不是在原来的窗口打开、登录成功的回调也是在小窗口中回调</p></blockquote><p>由于拿到扫码用户的 <code>AccessToken</code> 和 用户的信息（昵称、头像…） 都是在小窗口上获取到的；需要将小窗口获取到的这些信息传递给主窗口上</p><p>想要实现跨页面信息传输，通常由两种方式：</p><p>1、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/BroadcastChannel">BroadcastChannel</a>：允许<strong>同源</strong>的不同浏览器窗口，<code>Tab</code>页，<code>frame</code>或者<code>iframe</code>下的不同文档之间相互通信。但是会存在兼容性问题，实测<code>Safari15.3</code>无法使用<br>2、<code>localStorage</code> + window.onstorage： 通过<code>localStorage</code>进行<strong>同源</strong>的数据传输。用来处理<code>BroadcastChannel</code>不兼容的浏览器。</p><p>依据以上两个<code>API</code>，实现对应的通讯模块：</p><ol><li>创建<code>view/login-register/login/broadcast.js</code>模块：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 频道名</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">LOGIN_SUCCESS_CHANNEL</span> = <span class="string">&#x27;LOGIN_SUCCESS_CHANNEL&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方声明 safari 支持 BroadcastChannel ，但是实测 15.3 的版本并不支持 😠，所以我们需要对其进行判定使用，在不支持 BroadcastChannel 的浏览器中，使用 localstorage</span></span><br><span class="line"><span class="keyword">let</span> broadcastChannel = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">BroadcastChannel</span>) &#123;</span><br><span class="line">  broadcastChannel = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(<span class="variable constant_">LOGIN_SUCCESS_CHANNEL</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等待 QQ 登录成功</span></span><br><span class="line"><span class="comment"> * 因为 QQ 登录会在一个新的窗口中进行，用户扫码登录成功之后会回调《新窗口的 QC.Login 第二参数 cb》，而不会回调到原页面。</span></span><br><span class="line"><span class="comment"> * 所以我们需要在《新窗口中通知到原页面》，所以就需要涉及到 JS 的跨页面通讯，而跨页面通讯指的主要就是《同源页面的通讯》</span></span><br><span class="line"><span class="comment"> * 同源页面的通讯方式有很多，我们这里主要介绍：</span></span><br><span class="line"><span class="comment"> * 1. BroadcastChannel  -&gt;  https://developer.mozilla.org/zh-CN/docs/Web/API/BroadcastChannel</span></span><br><span class="line"><span class="comment"> * 2. window.onstorage：注意：该事件不在导致数据变化的当前页面触发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待回调，它将返回一个 promise，并携带对应的数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">wait</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (broadcastChannel) &#123;</span><br><span class="line">      <span class="comment">// 触发 message 事件时的回调函数</span></span><br><span class="line">      broadcastChannel.<span class="property">onmessage</span> = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(event.<span class="property">data</span>)<span class="comment">// 改变 promise 状态</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 触发 localStorage 的 setItem 事件时回调函数</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">onstorage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前的事件名</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="variable constant_">LOGIN_SUCCESS_CHANNEL</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">newValue</span>))<span class="comment">// 改变 promise 状态</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息。</span></span><br><span class="line"><span class="comment"> * broadcastChannel：触发 message</span></span><br><span class="line"><span class="comment"> * localStorage：触发 setItem</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">send</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (broadcastChannel) &#123;</span><br><span class="line">    broadcastChannel.<span class="title function_">postMessage</span>(data)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">LOGIN_SUCCESS_CHANNEL</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (broadcastChannel) &#123;</span><br><span class="line">    broadcastChannel.<span class="title function_">close</span>()</span><br><span class="line">    broadcastChannel = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="variable constant_">LOGIN_SUCCESS_CHANNEL</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  wait,</span><br><span class="line">  send,</span><br><span class="line">  clear</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/qq-login.vue</code>中，使用：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> broadcast <span class="keyword">from</span> <span class="string">&#x27;./broadcast&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// QQ 登录挂起</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable constant_">QC</span>.<span class="title class_">Login</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">btnId</span>: <span class="string">&#x27;qqLoginBtn&#x27;</span> <span class="comment">//插入按钮的节点id</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">data, opts</span>) =&gt;</span> &#123;</span><br><span class="line">      ......</span><br><span class="line">      <span class="comment">// 4. 完成跨页面传输</span></span><br><span class="line">      broadcast.<span class="title function_">send</span>(oauthObj)</span><br><span class="line">      <span class="comment">// 5. 在 PC 端下，关闭第三方窗口</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录按钮事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onQQLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">openQQWindow</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 QQ 登录视窗</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">openQQWindow</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// 打开视窗之后开始等待</span></span><br><span class="line">  broadcast.<span class="title function_">wait</span>().<span class="title function_">then</span>(<span class="keyword">async</span> (oauthObj) =&gt; &#123;</span><br><span class="line">    broadcast.<span class="title function_">clear</span>() <span class="comment">// 登录成功,关闭通知</span></span><br><span class="line">    <span class="comment">// 执行登录操作</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="完成QQ登录流程"><a href="#完成QQ登录流程" class="headerlink" title="完成QQ登录流程"></a>完成QQ登录流程</h4><p>有了数据之后，接下来就可以认证当前用户是否已注册，从而判断是否需要进入注册页面</p><ol><li>创建<code>view/login-register/login/oauth.js</code>模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;@/libs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">LOGIN_TYPE_OAUTH_NO_REGISTER_CODE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三方登录统一处理方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; oauthType 登录方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; oauthData 第三方数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">oauthLogin</span> = <span class="keyword">async</span> (<span class="params">oauthType, oauthData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> code = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">loginType</span>: oauthType,</span><br><span class="line">    ...oauthData</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 返回  204 表示当前用户未注册，此时给用户一个提示，走注册页面</span></span><br><span class="line">  <span class="keyword">if</span> (code === <span class="variable constant_">LOGIN_TYPE_OAUTH_NO_REGISTER_CODE</span>) &#123;</span><br><span class="line">    <span class="title function_">message</span>(<span class="string">&#x27;success&#x27;</span>, <span class="string">`欢迎您 <span class="subst">$&#123;oauthData.nickname&#125;</span>，请创建您的账号`</span>, <span class="number">6000</span>)</span><br><span class="line">    <span class="comment">// 进入注册页面，同时携带当前的第三方数据和注册标记</span></span><br><span class="line">    router.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">      <span class="attr">query</span>: &#123;</span><br><span class="line">        <span class="attr">reqType</span>: oauthType,</span><br><span class="line">        ...oauthData</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 否则表示用户已注册，直接进入首页</span></span><br><span class="line">  router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>constants/index.js</code>中定义未注册状态码常量、<code>QQ</code>登录方式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录方式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">LOGIN_TYPE_OAUTH_NO_REGISTER_CODE</span> = <span class="number">204</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">LOGIN_TYPE_QQ</span> = <span class="string">&#x27;QQ&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>在<code>store/modules/user.js</code>判断是否需要扫码注册</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">LOGIN_TYPE_OAUTH_NO_REGISTER_CODE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">      ......</span><br><span class="line">      <span class="comment">// QQ 扫码登录，用户未注册</span></span><br><span class="line">      <span class="keyword">if</span> (data.<span class="property">code</span> === <span class="variable constant_">LOGIN_TYPE_OAUTH_NO_REGISTER_CODE</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="property">code</span></span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/register/index.js</code>模块触发注册，携带第三方数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发注册</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onRegister</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 触发注册，携带第三方数据</span></span><br><span class="line">    <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/register&#x27;</span>, &#123;</span><br><span class="line">      ...payload,</span><br><span class="line">      ...route.<span class="property">query</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/qq-login.vue</code>执行登录操作</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">LOGIN_TYPE_QQ</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 QQ 登录视窗</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">openQQWindow</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  .....</span><br><span class="line">  <span class="comment">// 打开视窗之后开始等待</span></span><br><span class="line">  broadcast.<span class="title function_">wait</span>().<span class="title function_">then</span>(<span class="keyword">async</span> (oauthObj) =&gt; &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="title function_">oauthLogin</span>(<span class="variable constant_">LOGIN_TYPE_QQ</span>, oauthObj) <span class="comment">// 执行登录操作</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="移动端QQ登录"><a href="#移动端QQ登录" class="headerlink" title="移动端QQ登录"></a>移动端QQ登录</h4><p>目前<code>QQ</code> 登录功能已经可以在<code>PC</code>端中正常使用了。但如果在移动端中进行访问，会出现一些问题，出现的原因是因为：</p><p>对于 移动端而言：通过移动端触发 <code>QQ</code> 登录会展示三个页面，原页面、<code>QQ</code> 吊起页面、回调页面。<br>并且移动端一个页面展示整屏内容，且无法直接通过<code>window.close()</code> 关闭。<br>所以在移动端中，需要在当前页面中，继续进行后续操作。</p><p>那么据此可以在：<code>view/login-register/login/qq-login.vue</code> 中执行以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">QC</span>.<span class="title class_">Login</span>(</span><br><span class="line">    ...</span><br><span class="line">    (data, opts) =&gt; &#123;</span><br><span class="line">      ......</span><br><span class="line">      <span class="comment">// 针对于 移动端而言：通过移动端触发 QQ 登录会展示三个页面，原页面、QQ 吊起页面、回调页面。并且移动端一个页面展示整屏内容，且无法直接通过 window.close() 关闭，所以在移动端中，我们需要在当前页面继续进行后续操作。</span></span><br><span class="line">      <span class="title function_">oauthLogin</span>(<span class="variable constant_">LOGIN_TYPE_QQ</span>, oauthObj)</span><br><span class="line">      <span class="comment">// 5. 在 PC 端下，关闭第三方窗口</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>但是此时需要注意，不可通过 <code>isMobileTerminal</code>来进行<code>PC</code> 端和移动端的区别判断，因为此时为 <strong>窗口模式</strong>，宽度将小于 1280。</p><p>如果需要进行此判断，那么可以改写<code>isMobileTerminal</code>方法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是移动端设备</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isMobileTerminal = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.<span class="title function_">test</span>(</span><br><span class="line">    navigator.<span class="property">userAgent</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="微信开放平台注册"><a href="#微信开放平台注册" class="headerlink" title="微信开放平台注册"></a>微信开放平台注册</h4><p>对于微信扫码登录而言，同样需要进行开放平台的注册，微信开放平台的注册流程：</p><ol><li>微信公众平台与微信开放平台的区别</li><li>微信开放平台账户注册</li><li>微信开放平台应用注册</li><li>开发者资质认证</li></ol><p><strong>1、微信公众平台与微信开放平台的区别</strong></p><p><a href="https://mp,weixin.gg.com/">微信公众平台</a></p><p>用于管理、开放微信公众号（包括订阅号、服务号、企业号），相当于微信公众号的后台运营、管理系统。</p><p><a href="https://open,weixin.gg.com/">微信开放平台</a></p><p>主要面对移动应用、网站应用开发者，为其提供微信登录、分享、支付等相关权限和服务。</p><p><strong>2、微信开放平台账户注册</strong></p><p>登录微信开放平台</p><ol><li>进入 微信开放平台，点击账号注册（注意：此账号将同时应用到登录、分享、支付等微信第三方模块）</li><li>填写基本信息</li><li>登记主体信息 - 主体类型说明：<ol><li>主体信息常用的分为：<strong>企业</strong>和<strong>个人</strong></li><li>其中企业又分为：<strong>企业</strong>和<strong>个体工商户</strong></li><li>三者之前的区别如下图所示：</li></ol></li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191514591.jpeg" alt="photo"></p><p><strong>个人主体注册</strong></p><ol><li>登记主体信息</li><li>扫码进行身份验证</li><li>点击下一步、确认主体信息</li></ol><p><strong>企业主体注册</strong></p><ol><li>企业主体注册需要具备 <strong>企业营业执照信息</strong></li><li>验证方式分为两种：<ol><li>支付验证：免费，对公转账验证     √</li><li>微信认证：300元审核费用</li></ol></li><li>支付验证方式</li><li>扫码确认管理员信息</li><li>最后确认主体信息即可</li><li>企业用户最终还需要进行支付验证</li></ol><p><strong>3、微信开放平台应用注册</strong></p><ol><li>账户注册通过之后，可进入 <strong>管理中心</strong>，选择 <strong>网站应用</strong>，点击 <strong>创建网站应用</strong></li><li>创建网站应用共分为三步<ol><li>填写基本信息</li><li>填写网站信息</li><li>提交成功</li></ol></li><li>填写基本信息时，需要下载并填写《网站信息登记表扫描件》</li><li>点击下一步，进入 <strong>授权回调域</strong> 输入</li><li>点击提交审核</li><li>审核通过（可能会需要进行多次修改）</li></ol><p><strong>4、开发者资质认证</strong></p><p>应用审核通过之后，可以发现应用的 <strong>微信登录</strong> 与 <strong>微信支付</strong> 功能处于 <strong>未获得</strong> 状态如果想要获得，那么需要 <strong>申请开通</strong></p><ol><li>点击申请开通</li><li>此时需要先进行开发者认证</li><li>点击<strong>去认证</strong></li><li>此时会进入到 <strong>开发者资质认证页面</strong>，在此页面中可以看到，想要申请开发者认证，则需要交付300元 认证费用。PS：学习阶段暂无需支付此费用，只需要跟着视频，了解后续流程，等到工作中需要使用到时，由所在公司支付该费用。</li><li>如果你当前需要支付此费用，则点击 <strong>现在申请</strong></li><li>之后会进入 <strong>协议声明</strong> 页面，点击 <strong>下一步</strong></li><li>填写企业信息 - 企业资质信息、对公账户信息、认证联系人、联系人验证</li><li>点击下一步，填写发票信息，再点击下一步，确认发票信息，点击继续</li><li>支付审核费用，支付成功之后会得到对应的订单详情数据，同时会有对应的邮件通知，等待审核通过即可</li><li>等待审核的过程中会有 <strong>微信客服</strong> 与你电话联系，请注意接听（通常会在当天）。审核通过之后，状态会变为 <strong>已验证</strong></li><li>此时，返回应用详情，<strong>微信登录</strong> 为 <strong>已获得</strong> 状态，<strong>微信支付</strong> 为 <strong>未获得状态</strong></li></ol><h4 id="实现微信扫码登录"><a href="#实现微信扫码登录" class="headerlink" title="实现微信扫码登录"></a>实现微信扫码登录</h4><p>进入 微信登录对接官方文档<br>整个微信登录流程与 <code>QQ</code> 登录流程略有不同，分为以下几步：</p><ol><li><p>通过 <strong>微信登录前置数据获取</strong> 接口，获取登录数据（比如 <code>APP ID</code>）</p></li><li><p>根据获取到的数据，拼接得到 <code>open url</code> 地址</p></li><li><p>打开该地址，展示微信登录二维码</p></li><li><p>移动端微信扫码确定登录</p></li><li><p>从当前窗口中解析 <code>window.location.search</code> 得到用户的 <code>code</code> 数据</p></li><li><p>根据 <code>appId、appSecret、code</code> 通过接口获取用户的 <code>access_token</code></p></li><li><p>根据 <code>access_token</code> 获取用户信息</p></li><li><p>通过用户信息触发 <code>oauthLogin</code> 方法</p></li></ol><p>接下来就根据以上分析分析对应代码代码逻辑：</p><ol><li>创建<code>view/login-register/login/weixin-login.vue</code>组件，并写入以下<code>html</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;onWeiXinLogin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-svg-icon</span> <span class="attr">class</span>=<span class="string">&quot;w-4 cursor-pointer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wexin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">m-svg-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在<code>view/login-register/login/index.vue</code> 中使用该组件</li><li>定义<strong>微信登录前置数据获取</strong>获取接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信登录前置数据获取</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getWXLoginData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/wxlogin/data&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 <code>onWeiXinLogin</code> 中，触发该接口，获取对应数据，并打开对应 <strong>微信登录窗口</strong>，然后等待登录成功的通知：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发微信登录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onWeiXinLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1. 通过微信登录前置数据获取接口，获取登录数据</span></span><br><span class="line">  <span class="keyword">const</span> &#123; appId, appSecret, redirectUri, scope, state &#125; = <span class="keyword">await</span> <span class="title function_">getWXLoginData</span>()</span><br><span class="line">  <span class="comment">// 2. 根据获取到的数据，拼接得到 `open url` 地址</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">open</span>(</span><br><span class="line">    <span class="string">`https://open.weixin.qq.com/connect/qrconnect?appid=<span class="subst">$&#123;appId&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;redirectUri&#125;</span>&amp;response_type=code&amp;scope=<span class="subst">$&#123;scope&#125;</span>&amp;state=<span class="subst">$&#123;state&#125;</span>#wechat_redirect`</span>,</span><br><span class="line">    <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;height=525,width=585, toolbar=no, menubar=no, scrollbars=no, status=no, location=yes, resizable=yes&#x27;</span></span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 等待扫码登录成功通知</span></span><br><span class="line">  brodacast.<span class="title function_">wait</span>().<span class="title function_">then</span>(<span class="keyword">async</span> (&#123; code &#125;) =&gt; &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;微信扫码登录成功&#x27;)</span></span><br><span class="line">    <span class="comment">// console.log(code)</span></span><br><span class="line">    brodacast.<span class="title function_">clear</span>() <span class="comment">// 微信登录成功,关闭通知</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>从当前窗口中解析 <code>window.location.search</code> 得到用户的 <code>code</code> 数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信登录成功之后的窗口数据解析</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> code = <span class="regexp">/code=((.*))&amp;state/</span>.<span class="title function_">exec</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span> (code) &#123;</span><br><span class="line">    brodacast.<span class="title function_">send</span>(&#123;</span><br><span class="line">      code</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">close</span>() <span class="comment">// 关闭回调网页</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义获取微信登录的 <code>access_token</code>接口和微信登录的 用户数据接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取微信登录的 access_token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getWXLoginToken</span> = (<span class="params">appid, secret, code</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/wxlogin/access_token&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      appid,</span><br><span class="line">      secret,</span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取微信登录的 用户数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getWXLoginUserInfo</span> = (<span class="params">accessToken, openid</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/wxlogin/userinfo&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      accessToken,</span><br><span class="line">      openid</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据获取到的信息执行登录操作</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getWXLoginData, getWXLoginToken, getWXLoginUserInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/sys&#x27;</span></span><br><span class="line"><span class="keyword">import</span> brodacast <span class="keyword">from</span> <span class="string">&#x27;./brodacast&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; oauthLogin &#125; <span class="keyword">from</span> <span class="string">&#x27;./oauth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">LOGIN_TYPE_WX</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发微信登录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onWeiXinLogin</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 等待扫码登录成功通知</span></span><br><span class="line">  brodacast.<span class="title function_">wait</span>().<span class="title function_">then</span>(<span class="keyword">async</span> (&#123; code &#125;) =&gt; &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 获取 AccessToken 和 openid</span></span><br><span class="line">    <span class="keyword">const</span> &#123; access_token, openid &#125; = <span class="keyword">await</span> <span class="title function_">getWXLoginToken</span>(</span><br><span class="line">      appId,</span><br><span class="line">      appSecret,</span><br><span class="line">      code</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 获取登录用户信息</span></span><br><span class="line">    <span class="keyword">const</span> &#123; nickname, headimgurl &#125; = <span class="keyword">await</span> <span class="title function_">getWXLoginUserInfo</span>(</span><br><span class="line">      access_token,</span><br><span class="line">      openid</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 执行登录操作</span></span><br><span class="line">    <span class="title function_">oauthLogin</span>(<span class="variable constant_">LOGIN_TYPE_WX</span>, &#123;</span><br><span class="line">      openid,</span><br><span class="line">      nickname,</span><br><span class="line">      headimgurl</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此完成了 <code>QQ</code> 扫码登录，微信扫码登录、移动端下的<code>QQ</code>主动吊起登录。但是对于 移动端微信 而言，不能在普通的 <code>H5</code> 下吊起微信 <code>APP</code> 触发登录。<br>根据本章的内容可以发现，整个的第三方登录逻辑还是比较复杂的，特别是微信的第三方登录步骤更加繁琐。并且在调试的时候必须要在线上进行调试（<strong>测试环境</strong>），所以在企业开发时，需要有更大的耐心才可以。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前中台解决方案项目（下）</title>
      <link href="/2024/08/19/project-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2024/08/19/project-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="37、用户反馈"><a href="#37、用户反馈" class="headerlink" title="37、用户反馈"></a>37、用户反馈</h3><p>在前台系统中，<strong>用户反馈</strong> 功能也是一个非常常见的需求。通过反馈功能，可以知道当前应用所存在的一些不足和用户对应的一些诉求。<br>那么通常情况下，构建用户反馈平台通常有两种方式：</p><ol><li>自研反馈平台：数据自主，但是成本较高</li><li>第三方反馈平台：数据不自主，但是成本极低</li></ol><p>通常情况下，除非是一线大厂，否则很多的中小型企业都会通过第三方反馈平台来构建用户反馈系统。</p><p>所谓用户反馈平台，其本质上就是希望给用户一个可以 <strong>发言</strong> 的地方，并且最好可以 <strong>交流</strong>，就是一个类似于 <strong>社区</strong> 的概念。所以就可以理解为一个类似于社区平台的内容。</p><p>第三方平台采用 <a href="[腾讯兔小巢-免费便捷的用户意见反馈服务平台 (qq.com">兔小巢</a>](<a href="https://txc.qq.com/">https://txc.qq.com/</a>)) ，它提供了对应的 <a href="[兔小巢 (qq.com">DEMO</a>](<a href="https://support.qq.com/products/1368">https://support.qq.com/products/1368</a>)) 演示。通过演示的 <code>DEMO</code> 可以看出，这就是一个类似于社区的平台概念。</p><h4 id="兔小巢"><a href="#兔小巢" class="headerlink" title="兔小巢"></a>兔小巢</h4><p>创建流程：</p><ol><li>进入 <a href="[腾讯兔小巢-免费便捷的用户意见反馈服务平台 (qq.com">腾讯免小巢</a>](<a href="https://txc.qq.com/">https://txc.qq.com/</a>)) 平台</li><li>点击 <strong>登录</strong> 按钮</li><li>进行扫码登录</li><li>登录之后，会跳转到 <a href="[腾讯兔小巢 (qq.com">控制台</a>](<a href="https://txc.qq.com/dashboard/home">https://txc.qq.com/dashboard/home</a>))</li><li>点击 <strong>创建产品</strong></li><li>输入产品信息，点击创建产品</li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191509004.jpeg" alt="photo"> </p><ol><li>创建成功：<code>https://txc.qq.com/products/665838</code></li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191509412.jpeg" alt=""> </p><ol><li>选择接入的产品类型 - WEB，点击下一步</li><li>点击完成进入管理后台</li></ol><h4 id="实现用户反馈功能"><a href="#实现用户反馈功能" class="headerlink" title="实现用户反馈功能"></a>实现用户反馈功能</h4><p>兔小巢接入的方式非常的简单，在注册完成之后，官方其实已经给出了对应的接入方案：</p><blockquote><p><strong>WEB接入</strong></p><p>想要在您的产品中接入兔小巢，首先需要获取该产品的<code>url</code>，一般由 <code>https://support.qq.com/product/+ 该产品的 ID</code>组成。</p><p>产品的 ID 在创建时已经分配给您。每个产品有唯一的ID，可以在 全部产品 处查看。</p><p>根据您的产品 ID 拼接好接入链接，在手机浏览器中输入该地址，即可前往您的产品反馈页面，因为兔小巢页面就是一个 Web App。</p><p>以下为不带参数的跳转，只需要发送 <code>GET</code> 请求即可实现,</p><p>前端实现的方式很多，例如 1. 用 <code>a</code> 标签设置 <code>href</code>参数；2. 直接设置 <code>window.location</code>等等。</p><p>以下为部分关键代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1. 用 a 标签设置 href 参数；</span></span><br><span class="line">...</span><br><span class="line">&lt;!--a 标签跳转--&gt;</span><br><span class="line">&lt;!-- 请注意url单词是product而不是products，products是旧版本的参数，用错地址将不能成功提交 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://support.qq.com/product/1221&quot;</span> /&gt;</span></span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2. 直接设置 window.location等等。</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> productId = <span class="number">1221</span>; <span class="comment">// 1221为腾讯问卷公众号的产品 id</span></span><br><span class="line"><span class="comment">/* 请注意url单词是product而不是products，products是旧版本的参数，用错地址将不能成功提交 */</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;https://support.qq.com/product/&#x27;</span> + productId</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果您不需要其他可选的参数或传递自己的登录态，那么恭喜您，已经可以使用了🌚<br>发条帖子试试吧。</p><p>可选配置1：配置产品自己的用户登录态(用户头像、昵称、ID)，查看 <a href="https://txc.qq.com/helper/configLogonState">配置产品自己的用户登录态</a></p><p>可选配置2：配置自定义参数来获得更多用户使用环境信息，查看 <a href="https://txc.qq.com/helper/configCustomParameter">配置自定义参数</a></p><p>可选配置3：通过接口实时获得用户反馈通知，查看 <a href="https://txc.qq.com/helper/webHookGuide">配置 Webhooks</a></p><p>可选配置4：通过接口取出用户的反馈数据，查看 <a href="https://txc.qq.com/helper/usrFetchAPIGuide">用户反馈数据 API</a></p></blockquote><p>实现具体步骤：</p><ol><li>在<code>constants/index.vue</code>中定义反馈地址常量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兔小巢反馈地址</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">FEEDBACK_URL</span> = <span class="string">&#x27;https://txc.qq.com/products/665838&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/floating/index.vue</code>中使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 鼠标移入 - 立即吐槽弹出框 --&gt;</span><br><span class="line">&lt;div class=&quot;w-[140px] overflow-hidden&quot;&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    ......</span><br><span class="line">    @click=&quot;onToFeedback&quot;</span><br><span class="line">   &gt;</span><br><span class="line">     ......</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; FEEDBACK_URL &#125; from &#x27;@/constants&#x27;</span><br><span class="line"></span><br><span class="line">// 用户反馈处理</span><br><span class="line">const onToFeedback = () =&gt; &#123;</span><br><span class="line">  window.open(FEEDBACK_URL, &#x27;_blank&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="38、第三方平台分享"><a href="#38、第三方平台分享" class="headerlink" title="38、第三方平台分享"></a>38、第三方平台分享</h3><p>分享，可能第一时间想到的就是：</p><ol><li>微博分享</li><li>微信分享</li><li>微信朋友圈分享</li></ol><p>但是对于网站而言，分享将会收到很大的限制，比如对于 <strong>微信分享</strong> 而言，在普通网站应用中将无法进行对接。所以本章中只针对于 <strong>微博</strong> 实现分享功能。</p><p>在对接微博分享之前，先理解一下所谓的分享，指的是什么。</p><p><strong>微信</strong>：</p><ol><li>聊天分享</li><li>朋友圈分享</li></ol><p>两种分享方式，其本质上指的都是：<strong>把一段信息或图片，发送到聊天或朋友圈中</strong><br>简单来说，就是节省了复制消息，发送消息的一个过程。<br>但是对于微信而言，它不支持普通网站的分享，仅支持： <code>APP</code> 或 微信公众号、企业号、服务号 的分享内容</p><p><strong>微博</strong>：</p><p>微博的分享原理与微信一样：<strong>把一段信息或图片，发送到微博中</strong></p><h4 id="微博开放平台注册"><a href="#微博开放平台注册" class="headerlink" title="微博开放平台注册"></a>微博开放平台注册</h4><p>微博开放平台注册分为以下7步：</p><ol><li>注册新浪开放平台账号</li><li>用户注册</li><li>个人登录</li><li>新建开发者信息</li><li>身份认证</li><li>创建应用</li><li>完善应用信息</li></ol><p>具体步骤：</p><p><strong>1、注册新浪开放平台账号</strong></p><ol><li>进入<a href="[新浪微博开放平台-首页 (weibo.com">新浪微博开发平台</a>](<a href="https://open.weibo.com/">https://open.weibo.com/</a>))</li><li>点击 登录 按钮（在公司里尽量注册一个新号，不要用自己的）</li></ol><p><strong>2、新用户注册（企业级、应用及）</strong></p><ol><li>点击立即注册</li><li>通常情况下，企业级的微博分享会有专门的账号，即：<strong>一个应用一个账号</strong></li><li>所以这里选择<strong>官方注册</strong></li><li>需要进行短信验证，完成注册</li></ol><p><strong>3、个人登录（练习使用）</strong></p><ol><li>因为大部分人都拥有微博账号，且只有一个手机号码，所以也可以选择：<strong>使用现有手机号登录，再转化为开发者的方式</strong></li><li>输入用户名、密码 或 扫码 直接登录</li></ol><p><strong>4、新建开发者信息</strong></p><ol><li>登录成功之后，点击 <strong>开发者信息</strong></li><li>整个开发者注册分为三步：<ol><li>填写开发者资料:<ol><li>个人开发者</li><li>公司开发者</li></ol></li><li>验证邮箱</li><li>创建应用</li></ol></li><li>以 <strong>个人开发者</strong> 为例，进行演示（注意：如果你是应用到企业级项目中，那么需要选择 <strong>公司开发者</strong>）</li><li>填写完成，点击提交按钮，会进行邮箱验证</li><li>邮箱验证成功之后，将得到已验证标记</li><li>此时，开发者信息已经注册完成，但是此时还不可以创建应用，因为需要先完成 <strong>身份认证</strong></li></ol><p><strong>5、完成身份认证</strong></p><ol><li>重新进入 <strong>开发者信息</strong> 页面，选择 <strong>身份认证</strong></li><li>完成基本身份验证</li><li>等待审核完成</li></ol><p><strong>6、创建应用</strong></p><ol><li>点击顶部 <strong>微链接</strong>，选择 <strong>网站接入</strong></li><li>选择<strong>立即接入</strong></li><li>进行身份验证</li><li>创建应用名称</li><li>完成创建</li></ol><p><strong>7、完善应用信息</strong></p><ol><li>填写所有应用信息</li><li>确定提交审核</li><li>等待审核通过</li><li>审核通过之后，即会在 <strong>我的应用</strong>中显示对应的 <strong>应用信息</strong></li></ol><h4 id="实现微博分享对接"><a href="#实现微博分享对接" class="headerlink" title="实现微博分享对接"></a>实现微博分享对接</h4><ol><li>在<code>index.html</code> 中，导入微博分享的 <code>js</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 微博分享 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://tjs.sjs.sinajs.cn/open/api/js/wb.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建<code>utils/share.js</code> 分享模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">WEI_BO_APP_KEY</span>, <span class="variable constant_">WEI_BO_UID</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微博分享</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; imgUrl 分享的图片 URL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; path 网页链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">weiboShare</span> = (<span class="params">imgUrl, path</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">open</span>(</span><br><span class="line">    <span class="string">`https://service.weibo.com/share/share.php?appkey=<span class="subst">$&#123;WEI_BO_APP_KEY&#125;</span>&amp;ralateUid=<span class="subst">$&#123;WEI_BO_UID&#125;</span>&amp;pic=<span class="subst">$&#123;imgUrl&#125;</span>&amp;title=这张图不错哦，给大家分享一下 <span class="subst">$&#123;path&#125;</span>`</span>,</span><br><span class="line">    <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>constants/index.js</code> 中定义<code>KEY</code>和<code>UID</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微博APP Key</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">WEI_BO_APP_KEY</span> = <span class="string">&#x27;3454329089&#x27;</span></span><br><span class="line"><span class="comment">// 微博用户的 UID</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">WEI_BO_UID</span> = <span class="string">&#x27;5984245953&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>在<code>view/main/components/list/item.vue</code>中，增加分享的点击事件：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分享按钮点击处理</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">onShareClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">weiboShare</span>(</span><br><span class="line">    props.<span class="property">data</span>.<span class="property">photo</span>,</span><br><span class="line">    <span class="string">`https://imooc-front.lgdsunday.club/pins/<span class="subst">$&#123;props.data.id&#125;</span>`</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="39、第三方平台支付"><a href="#39、第三方平台支付" class="headerlink" title="39、第三方平台支付"></a>39、第三方平台支付</h3><p>对于支付而言，通常一般就是两种：</p><ol><li>支付宝支付</li><li>微信支付</li></ol><h4 id="支付宝开放平台"><a href="#支付宝开放平台" class="headerlink" title="支付宝开放平台"></a>支付宝开放平台</h4><p>整个<a href="https://open.alipay.com/api">支付宝开放平台</a>的注册分为5个大步骤，分别为：</p><ol><li>注册认证支付宝企业账号（个人无法使用支付功能）</li><li>入驻开放平台</li><li>创建应用</li><li>关联商家号</li><li>上线应用</li></ol><p>具体步骤如下：</p><p><strong>1、注册认证支付宝企业账号（个人无法使用支付功能）</strong></p><ol><li>打开 支付宝开放平台</li><li>点击<strong>免费注册</strong>，进入注册说明页面</li><li>使用支付宝扫码验证，开始注册</li><li>开始填写主体信息：<ol><li>填写主体信息</li><li>完善受益人信息</li><li>提现免费到账协议</li><li>开通更多功能：支付宝收钱功能 - 立即开通    经营场景 - 电脑网站支付</li><li>同意协议，进入下一步</li></ol></li><li>完善账户信息，点击下一步</li><li>进行银行转账确认信息</li><li>转账通过之后，继续补全后续信息</li><li>填写对应信息，点击提交按钮</li><li>支付宝企业账号申请开通成功</li><li>点击<strong>前往商家中心</strong>，即可查看所有商家信息</li></ol><p><strong>2、入驻开放平台</strong></p><p>在注册、认证了企业账号之后，此时在 支付宝开放平台，通过 <strong>绑定邮箱和登录密码</strong> 进行登录。登录成功之后会得到 <strong>账号未入驻开放平台</strong> 的提示，此时就需要进入下一步的流程 <strong>入驻开放平台</strong></p><ol><li>点击入驻开放平台之后，进入入驻流程</li><li>首先进行 <strong>开发接入</strong>，填写内容完成之后，点击<strong>确认加入</strong></li><li>此时提示<strong>成功入驻开发者</strong></li></ol><p><strong>3、创建应用</strong></p><p>开发者入驻成功之后，就需要在 控制台 中创建新的 <strong>网页/移动应用</strong>。</p><ol><li>进入控制台，选择 <strong>网页&amp;移动应用</strong>，然后点击 <strong>创建应用</strong></li><li>创建<strong>自营应用</strong>，填写对应数据，点击确认创建</li><li>应用创建成功，此时应用将处于<strong>开发中</strong>状态</li><li>应用创建完成之后，需要为应用 <strong>添加 手机网站支付</strong> 和 <strong>电脑网站支付</strong> 的能力</li><li>点击 <strong>添加能力</strong> 按钮，选择 <strong>手机网站支付</strong> 和 <strong>电脑网站支付</strong>，最后点击 <strong>确定按钮</strong></li><li>此时，能力列表中应该包含选中的两个能力</li></ol><p><strong>4、关联商家号</strong></p><p>此时应用和能力都已经创建完成，但是还不可以直接开发对应的功能，还需要进一步操作：<strong>关联应用和商家号</strong></p><p>目前查看应用能力可以看到存在一个黄色的提示，这个提示告诉我们，需要登录商家中心绑定当前应用 <code>id</code>，点击 <strong>商家中心</strong></p><ol><li>点击 <strong>商家中心</strong> 之后，会进入到 <code>APPID</code> 绑定页面，在此页面中需要点击 <strong>添加绑定</strong></li><li>在添加绑定页面中，输入应用的 <code>APPID</code>（可在应用列表中进行查看），点击下一步</li><li>此时绑定成功</li><li>点击返回按钮，在已绑定的应用中，即可查看到当前应用</li><li>此时，再来查看应用能力，可以发现 <strong>电脑网站支付</strong> 为 <strong>已生效</strong> 状态，<strong>手机网站支付</strong> 为 <strong>未生效</strong> 状态（需要等待应用上线之后才可以签约生效，详见签约功能）</li></ol><p><strong>5、上线应用</strong></p><p>在完成 <strong>支付宝支付</strong> 功能对接之前，需要先完成 <strong>应用的上线（直接点击上线即可）</strong>，否则可能会得到一个<code>ISV</code>的错误。</p><h4 id="配置开发设置"><a href="#配置开发设置" class="headerlink" title="配置开发设置"></a>配置开发设置</h4><p>整个支付宝支付的对接，需要前后端的配置来进行完成，同时前后端是完全隔离的，所以会导致，前端不知道服务端做了什么，服务端也不关心前端做了什么。</p><p>把整个支付宝支付的对接流程分为三部分：</p><ol><li>配置开发设置</li><li>支付功能对接：<ol><li><code>PC</code> 端</li><li>移动端</li></ol></li><li>支付整体流程解析</li></ol><p>想要完成支付宝支付，需要先完成必要的基础配置，配置流程如下：<a href="https://opendocs.alipay.com/open/270/01didh?pathHash=a6ccbe9a#%E9%85%8D%E7%BD%AE%E5%BA%94%E7%94%A8">点击可查看开发设置配置详情</a></p><ol><li><p>进入控制台，选择你的应用，在 <strong>能力列表</strong> 下可以找到 <strong>开发设置</strong> 模块</p></li><li><p>其中所涉及到的所有信息名词解释如下所示：</p><blockquote><p><strong>接口加签方式：必填</strong>。用于保障商户应用和支付宝交互的安全性，配置详情参见 <a href="https://opendocs.alipay.com/open/270/01didh?pathHash=a6ccbe9a#%E6%8E%A5%E5%8F%A3%E5%8A%A0%E7%AD%BE%E6%96%B9%E5%BC%8F">接口加签方式配置说明</a>。<br><strong>IP白名单：选填</strong>。用于保障用户资金安全，说明详情参见<a href="https://opendocs.alipay.com/open/270/01didh?pathHash=a6ccbe9a#%E6%9C%8D%E5%8A%A1%E5%99%A8%20IP%20%E7%99%BD%E5%90%8D%E5%8D%95">IP白名单接入指南</a><br><strong>应用网关：选填</strong>。用于接收支付宝异步通知消息，说明详情参见<a href="https://opendocs.alipay.com/open/270/01didh?pathHash=a6ccbe9a#%E5%BA%94%E7%94%A8%E7%BD%91%E5%85%B3">应用网关</a><br><strong>接口内容加密方式：选填</strong>。用于加/解密 <code>OpenAPl bizContent</code> 报文内容及加/解密部分用户隐私信息，说明详情参见 <a href="https://opendocs.alipay.com/open/270/01didh?pathHash=a6ccbe9a#%E6%8E%A5%E5%8F%A3%E5%86%85%E5%AE%B9%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F">接口内容加密方式</a>。<br><strong>授权回调地址：选填</strong>。第三方应用授权 或,用户信息授权 后回调地址。授权链接中配置的<code>redirect_uri</code> 的值必须与此值保持一致 (如：<a href="https://www.alipay.com），用户成功授权后将在该">https://www.alipay.com），用户成功授权后将在该</a> <code>url</code> 后携带授权码等信息并跳转至该页。当填入该地址时，系统会自动进行安全检测，详情请参考安全检测。</p></blockquote></li><li><p>设置 <strong>接口加签方式（密钥/证书）</strong></p><ol><li>点击对应设置按钮</li><li>可能需要发送短信验证码，验证通过即可</li><li>验证通过之后，会进入当前 <code>dialog</code></li><li>在当前页面中，需要填入公钥字符串（公钥与公钥证书方式的区别）</li><li>可以点击 <strong>支付宝秘钥生成器（推荐，后面会以此方式进行演示）</strong>或者 <strong>OpenSSL（第三方工具）</strong>来生成密码</li><li>选择对应的系统工具，并且安装完成，打开之后可以看到如下界面（课程演示版本为：1.0.9）：<strong>注意秘钥格式</strong></li><li>接下来直接点击 <strong>生成秘钥</strong> 按钮，即可生成对应的 <strong>私钥和公钥</strong> （BSA 加密介绍可点击查看）</li><li>点击 <strong>复制公钥</strong> 按钮，把复制到的公钥写入<strong>加签管理的 dialog</strong> 中</li><li>点击保存设置按钮</li><li>此时再查看 <strong>接口加密方式</strong>，应该为 <strong>已设置</strong> 状态</li><li>最后不要忘记，保存生成的 <strong>公钥和私钥</strong></li></ol></li><li><p>设置<strong>服务器IP白名单</strong></p><ol><li>点击对应的设置按钮</li><li>点击添加规则</li><li>因为 <code>IP</code> 地址是完全可信的（自己或者公司的服务器），所以可以选择 <strong>配置全量接口</strong>，然后点击 下一步</li><li>输入<code>IP</code>之后，点击确认添加即可</li></ol></li><li><p>设置<strong>授权回调地址</strong></p><ol><li>点击对应的设置按钮</li></ol></li></ol><p>至此，技术对接前的基础配置完成</p><h4 id="支付功能技术对接"><a href="#支付功能技术对接" class="headerlink" title="支付功能技术对接"></a>支付功能技术对接</h4><p>支付宝为了更方便的对接，提供了很多的便利文档，其中最主要的有三个功能：</p><ol><li><a href="https://opendocs.alipay.com/open/270/01didh?pathHash=a6ccbe9a#%E9%9B%86%E6%88%90%E5%B9%B6%E9%85%8D%E7%BD%AE%20SDK">集成并配置SDK</a>：支付宝支付对接的整体文档</li><li>电脑网站支付接入助手：对接的向导</li><li>咨询服务：人工技术咨询、答疑服务</li></ol><p><strong><code>PC</code>端实现具体步骤：</strong></p><ol><li>想要完成支付宝支付功能，需要对接两个接口，在<code>api/pay.js</code>中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支付宝下单</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getAliPay</span> = (<span class="params">subject, totalAmount, body, isMobile</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/alipay&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      subject,</span><br><span class="line">      totalAmount,</span><br><span class="line">      body,</span><br><span class="line">      isMobile</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 VIP 支付结果</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getPayResult</span> = (<span class="params">out_trade_no</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/pay/result&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      out_trade_no</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建<code>utils/pay.js</code>，触发支付宝支付方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getAliPay &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/pay&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isMobileTerminal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/flexible&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发支付宝支付</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; title 支付标题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; desc 支付描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">alipay</span> = <span class="keyword">async</span> (<span class="params">title, desc</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// encode 的支付地址</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="built_in">encodeURI</span> &#125; = <span class="keyword">await</span> <span class="title function_">getAliPay</span>(</span><br><span class="line">    title,</span><br><span class="line">    <span class="string">&#x27;0.01&#x27;</span>,</span><br><span class="line">    desc,</span><br><span class="line">    isMobileTerminal.<span class="property">value</span></span><br><span class="line">  )</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="built_in">decodeURIComponent</span>(<span class="built_in">encodeURI</span>) <span class="comment">// 解构</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>view/vip/components/payment/pc-payment/index.vue</code>中接收来自 <code>view/vip/index.vue</code>传递的 <code>payData</code>，并触发 <code>alipay</code> 方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> discountsVue <span class="keyword">from</span> <span class="string">&#x27;../discounts.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; alipay &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/pay&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">payData</span>: &#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onAliPayClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">alipay</span>(props.<span class="property">payData</span>.<span class="property">title</span>, props.<span class="property">payData</span>.<span class="property">desc</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>至此，即可触发<strong>支付宝支付</strong>，但是支付成功之后，还需要接收支付的结果：</p><ol><li>因为需要接收支付结果，所以需要创建支付成功之后的回调页面</li><li>定义对应路由：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支付成功后的回调地址</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/pay/result&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;payResult&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/pay/index.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">user</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 <code>view/pay/index.vue</code> 组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;h-full bg-zinc-200 dark:bg-zinc-800 duration-400 xl:pt-1&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;mx-auto h-full pt-[50%] px-1 bg-white dark:bg-zinc-900 duration-400 xl:h-[360px] xl:rounded-sm xl:py-10 xl:border-zinc-200 xl:dark:border-zinc-600 xl:border-[1px] xl:px-4 xl:max-w-screen-lg&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;JSON.stringify(isSuccess) !== &#x27;null&#x27;&quot;</span><br><span class="line">        class=&quot;flex justify-center items-center&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          v-if=&quot;isSuccess&quot;</span><br><span class="line">          name=&quot;pay-success&quot;</span><br><span class="line">          class=&quot;w-8 h-8 mr-4&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          v-if=&quot;!isSuccess&quot;</span><br><span class="line">          name=&quot;pay-fail&quot;</span><br><span class="line">          class=&quot;w-8 h-8 mr-4&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;p class=&quot;text-ml text-zinc-900 dark:text-zinc-200&quot;&gt;</span><br><span class="line">          &#123;&#123; isSuccess ? &#x27;支付成功&#x27; : &#x27;支付失败&#x27; &#125;&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;m-button</span><br><span class="line">        class=&quot;w-full mt-8 mx-auto dark:bg-zinc-800 xl:w-[120px]&quot;</span><br><span class="line">        @click=&quot;onConfirm&quot;</span><br><span class="line">        &gt;确定&lt;/m-button</span><br><span class="line">      &gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; getPayResult &#125; from &#x27;@/api/pay&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">const route = useRoute()</span><br><span class="line">const router = useRouter()</span><br><span class="line">const store = useStore()</span><br><span class="line">const isSuccess = ref(null) // 支付是否成功</span><br><span class="line">// 获取支付结果</span><br><span class="line">const getResultData = async () =&gt; &#123;</span><br><span class="line">  const res = await getPayResult(route.query.out_trade_no)</span><br><span class="line">  isSuccess.value = res</span><br><span class="line">&#125;</span><br><span class="line">getResultData()</span><br><span class="line"></span><br><span class="line">// 返回支付成功页面后点击确定按钮</span><br><span class="line">const onConfirm = () =&gt; &#123;</span><br><span class="line">  store.dispatch(&#x27;user/profile&#x27;) // 获取用户信息</span><br><span class="line">  router.push(&#x27;/&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>移动端实现具体步骤：</strong></p><ol><li>修改<code>utils/flexible.js</code> 中的<code>isMobileTerminal</code>方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isMobileTerminal = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.<span class="title function_">test</span>(</span><br><span class="line">    navigator.<span class="property">userAgent</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>在<code>view/vip/components/payment/mobile-payment/mobile-pay-select.vue</code>中接收支付数据，并触发支付：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; alipay &#125; from &#x27;@/utils/pay&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  payData: &#123;</span><br><span class="line">    required: true,</span><br><span class="line">    type: Object</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const onAlipay = () =&gt; &#123;</span><br><span class="line">  alipay(props.payData.title, props.payData.desc)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="前后端都做了什么"><a href="#前后端都做了什么" class="headerlink" title="前后端都做了什么"></a>前后端都做了什么</h4><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191509221.jpeg" alt=""></p><ol><li>用户在前端页面点击支付宝支付功能</li><li>前端调用服务端接口</li><li>服务端接收到请求，利用 <code>alipay-sdk(nodejs)</code> 创建支付订单信息，得到支付宝返回的：<code>url</code></li><li>服务端需要对该<code>url</code>进行<code>encode(encodeURIComponent)</code>操作，以防止意外的转码</li><li>服务端返回该 <code>url(encode 之后的)</code>到前端</li><li>前端进行 <code>decode</code> 解码，得到支付的 <code>url</code></li><li>前端控制跳转到该 <code>url</code>，即为<strong>支付宝用户支付页面</strong></li><li>用户在该页面完成支付，支付完成之后，支付宝会回调两个地址：<ol><li><code>returnUrl</code>：支付完成的跳转地址,用于用户视觉感知支付已成</li><li><code>notifyUrl</code>：异步通知地址，以<code>http</code>或者<code>https</code>开头的，商户外网可以<code>post</code>访问的异步地址，用于接收支付宝返回的支付结果</li></ol></li><li>前端通过 <code>returnUrl</code> 告知用户支付完成</li><li>服务端通过 <code>notifyUrl</code>完成用户支付之后的数据变更，同时需要对通知信息进行 验签 操作，并且在验签通过之后返回 <code>success</code> 给支付宝</li><li>区分 <code>PC</code> 端支付和移动端支付的关键在于：<ol><li>电脑端：服务端触发的接口为 <code>alipay.trade.page.pay</code></li><li>移动端：服务端触发的接口为<code>alipay.trade.wap.pay</code></li></ol></li></ol><h4 id="微信支付说明"><a href="#微信支付说明" class="headerlink" title="微信支付说明"></a>微信支付说明</h4><p>之前在对接 <strong>微信登录</strong> 时，在微信开放平台的应用列表中：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191510616.jpeg" alt=""></p><p>微信支付功能并不可用!<br>截至到 2022年3月14日 微信支付并不支持 <strong>PC 网站对接微信支付功能</strong>，当申请完成 <strong>商户号</strong> 和 <strong>网站应用</strong> 之后，使用 <strong>商户号对网站应用授权时</strong>，会得到这样的一个提示</p><p>也就说 微信支付引导文档中的内容 根本行不通！</p><p>如果想要申请微信支付，那么可以通过<strong>原生端(Android、l0S)、服务号、小程序</strong>的形式”辗转“ 完成对接。</p><h3 id="40、项目构建与发布"><a href="#40、项目构建与发布" class="headerlink" title="40、项目构建与发布"></a>40、项目构建与发布</h3><p>最后说明一下项目的打包和发布功能，对于项目打包而言它的一个功能是通用的功能。</p><h4 id="项目的构建分析"><a href="#项目的构建分析" class="headerlink" title="项目的构建分析"></a>项目的构建分析</h4><ol><li><p>为什么需要打包项目?</p></li><li><p>打包之后项目可以通过浏览器直接访问吗?</p></li><li><p>为什么需要有服务?</p></li></ol><p><strong>为什么需要打包项目</strong><br>浏览器只能识别并运行<strong>html、css、js 文件</strong>。换句话说，项目中的<code>.vue</code> 文件，浏览器是不认识的。而打包的过程就是把<code>.vue</code>的<strong>单文件组件</strong> 打包成 <code>html、css、js</code> 的文件，让浏览器进行识别，并展示项目</p><p><strong>打包之后项目可以通过浏览器直接访问吗?</strong><br>通过 <code>npm run build</code> 打包项目之后，打包的文件会被放入到 <code>dist</code> 文件夹中，直接双击<code>index.html</code> 文件，可以发现，浏览器是 无法 显示项目的。打开 <code>F12</code> 可以发现，终端中抛出了很多的错误，根据这些错误可以知道，无法显示的原因是因为 <strong>一些文件找不到了</strong></p><p><strong>为什么需要有服务?</strong><br>需要通过一个 <strong>服务</strong> 托管项目，从而避免出现模块无法被找到等问题。</p><h4 id="域名、DNS、公网IP、服务器、Nginx之间的关系"><a href="#域名、DNS、公网IP、服务器、Nginx之间的关系" class="headerlink" title="域名、DNS、公网IP、服务器、Nginx之间的关系"></a>域名、DNS、公网IP、服务器、Nginx之间的关系</h4><p>在处理服务之前，需要明确一些基本的概念：</p><ol><li>域名：<a href="https://imooc-admin.lgdsunday.club">https://imooc-admin.lgdsunday.club</a></li><li>DNS：域名解析服务器</li><li>公网IP：服务器在网络中的唯一地址</li><li>服务器：服务部署的电脑</li><li>Nginx：网页服务</li></ol><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p>1、阿里云服务器购买</p><p>2、服务器的连接方式</p><p>常见的连接服务器的方式有三种：</p><ol><li>阿里云控制台中进行远程链接</li><li>通过 <code>SSH</code>工具(XShell)</li><li><code>SSH</code> 指令远程登录</li></ol><p>这里使用第二种 <strong>通过 SSH 工具</strong>（XShell）进行连接。</p><ol><li>新建会话</li></ol><h4 id="Nginx-环境处理"><a href="#Nginx-环境处理" class="headerlink" title="Nginx 环境处理"></a>Nginx 环境处理</h4><ol><li><code>nginx</code> 编译时依赖 <code>gcc</code> 环境</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum y install gcc gcc<span class="literal">-C</span>++</span><br></pre></td></tr></table></figure><ol><li>安装 <code>pcre</code> ，让 <code>nginx</code> 支持重写功能</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install pcre*</span><br></pre></td></tr></table></figure><ol><li>安装 <code>zlib，nginx</code> 使用 <code>zlib</code> 对 <code>http</code> 包内容进行 <code>gzip</code> 压缩</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum y install zlib zlib<span class="literal">-devel</span></span><br></pre></td></tr></table></figure><ol><li>安装 <code>openssl</code>，用于通讯加密</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install openssl openssl<span class="literal">-devel</span></span><br></pre></td></tr></table></figure><ol><li>进行 <code>nginx</code> 安装</li><li>创建 <code>nginx</code> 文件夹：<code>mkdir nginx</code></li><li>下载 <code>nginx</code> 压缩包</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://nginx.org/download/nginx<span class="literal">-1</span>.<span class="number">11.5</span>.tar.gz</span><br></pre></td></tr></table></figure><ol><li>解压<code>nginx</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> nginx<span class="literal">-1</span>.<span class="number">11.5</span>.tar.gz</span><br></pre></td></tr></table></figure><ol><li>进入<code>nginx-1.11.5</code>目录</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx<span class="literal">-1</span>.<span class="number">11.5</span></span><br></pre></td></tr></table></figure><ol><li>检查平台安装环境</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure <span class="literal">--prefix</span>=/usr/local/nginx</span><br></pre></td></tr></table></figure><ol><li>进行源码编译</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><ol><li>安装<code>nginx</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><ol><li>查看<code>nginx</code>配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure><ol><li>制作<code>nginx</code>软连接</li><li>进入<code>usr/bin</code>目录</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin</span><br></pre></td></tr></table></figure><ol><li>制作软连接</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> /usr/local/nginx/sbin/nginx nginx</span><br></pre></td></tr></table></figure><ol><li>接下来制作配置文件</li><li>首先进入到 <code>nginx</code> 的默认配置文件中</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><ol><li>在最底部增加配置项（按下<code>i</code>进入 输入模式）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /nginx/*.conf;</span><br></pre></td></tr></table></figure><ol><li>按下<code>esc</code>键，通过<code>:wg!</code>保存并退出</li><li>创建新的配置文件</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /nginx/nginx.conf</span><br></pre></td></tr></table></figure><ol><li>进入到<code>/root/nginx/nginx.conf</code>文件</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /nginx/nginx.conf</span><br></pre></td></tr></table></figure><ol><li>写下如下配置：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># imooc-admin</span></span><br><span class="line">server &#123;</span><br><span class="line">  <span class="comment"># 端口</span></span><br><span class="line">  listen <span class="number">80</span>;</span><br><span class="line">  <span class="comment"># 域名</span></span><br><span class="line">  server_name localhost;</span><br><span class="line">  <span class="comment"># 资源地址</span></span><br><span class="line">  root /nginx/dist/;</span><br><span class="line">  <span class="comment"># 目录浏览</span></span><br><span class="line">  autoindex on;</span><br><span class="line">  <span class="comment"># 缓存处理</span></span><br><span class="line">  add_header Cache<span class="literal">-Control</span> <span class="string">&quot;no-cache, must-revalidate&quot;</span>;</span><br><span class="line">  <span class="comment"># 请求配置</span></span><br><span class="line">  location / &#123;</span><br><span class="line">   <span class="comment"># 跨域</span></span><br><span class="line">   add_header Access<span class="literal">-Control-Allow-Origin</span> *;</span><br><span class="line">    <span class="comment"># 返回 index.html</span></span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过<code>:wg!</code>保存并退出</li><li>在<code>root/nginx</code>中创建<code>dist</code>文件夹</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /ngionx/dist</span><br></pre></td></tr></table></figure><ol><li>在 <code>nginx/dist</code>中写入 <code>index.html</code> 进行测试</li><li>通过 <code>nginx -s reload</code> 重启服务</li><li>在 浏览器中通过，<code>IP</code>测试访问</li></ol><p>最后附上项目部署的<code>nginx</code>配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 慕课网 icooc-front</span></span><br><span class="line">server &#123;</span><br><span class="line">  <span class="comment"># SSL 访问端口号为443</span></span><br><span class="line">  listen <span class="number">443</span> ssl;</span><br><span class="line">  <span class="comment"># 填写绑定证书的域名</span></span><br><span class="line">  server_name icooc<span class="literal">-front</span>.lgdsunday.club;</span><br><span class="line">  <span class="comment"># 证书文件名称</span></span><br><span class="line">  ssl_certificate imooc<span class="literal">-front</span>.lgdsunday.club_bundle.crt;</span><br><span class="line">  <span class="comment"># 私钥文件名称</span></span><br><span class="line">  ssl_certificate_key imooc<span class="literal">-front</span>.lgdsunday.club.key;</span><br><span class="line">  ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">  <span class="comment"># 请按照以下协议配置</span></span><br><span class="line">  ssl_protocols TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="comment"># 请按照以下套件配置，配置加密套件，写法遵循 openssl 标准:</span></span><br><span class="line">  SSl_ciphers ECDHE<span class="literal">-RSA-AES128-GCM-SHA256</span>:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  <span class="comment"># 打包之后的项目在服务器中的存放路径</span></span><br><span class="line">  root /sunday/imooc/front/dist/;</span><br><span class="line">  <span class="comment"># charset koi8-r;</span></span><br><span class="line">  </span><br><span class="line">  access_log logs/host.access.log main ;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 用来处理单页应用的切换</span></span><br><span class="line">  location / &#123;</span><br><span class="line">    <span class="comment"># index index.html index.htm;</span></span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 反向代理，解决跨域问题（单独代理请求到服务端）</span></span><br><span class="line">  location /prod<span class="literal">-api</span>/ &#123;</span><br><span class="line">    proxy_pass http://<span class="number">39.105</span>.<span class="number">131.75</span>:<span class="number">3005</span>/api/;</span><br><span class="line">    <span class="comment"># $host 变量，Host 为变量名</span></span><br><span class="line">    proxy_set_header Host             <span class="variable">$host</span>;<span class="comment">#域名转发</span></span><br><span class="line">    proxy_set_header X<span class="literal">-Real-IP</span>        <span class="variable">$remote_addr</span>;<span class="comment">#IP转发</span></span><br><span class="line">    proxy_set_header X<span class="literal">-Forwarded-For</span>  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_set_header Cookie           <span class="variable">$http_cookie</span>;<span class="comment"># cookie 配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 慕课网 imooc-front 接囗访问转发</span></span><br><span class="line">server &#123;</span><br><span class="line">  <span class="comment"># SSL 访问端口号为 443</span></span><br><span class="line">  listen <span class="number">443</span> ssl;</span><br><span class="line">  <span class="comment"># 填写绑定证书的域名</span></span><br><span class="line">  server_name api.imooc<span class="literal">-front</span>.lgdsunday.club;</span><br><span class="line">  <span class="comment"># 证书文件名称</span></span><br><span class="line">  ssl_certificate api.imooc<span class="literal">-front</span>.lgdsunday.club_bundle.crt</span><br><span class="line">  <span class="comment"># 私钥文件名称</span></span><br><span class="line">  ssl_certificate_key api.imooc<span class="literal">-front</span>.lgdsunday.club.key;</span><br><span class="line">  ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">  <span class="comment"># 请按照以下协议配置</span></span><br><span class="line">  ssl_protocols TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="comment"># 请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span></span><br><span class="line">  ssl_cipherS ECDHE<span class="literal">-RSA-AES128-GCM-SHA256</span>:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  <span class="comment"># charset koi8-r;</span></span><br><span class="line">  server_name api.imooc<span class="literal">-front</span>.lgdsunday.club;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://<span class="number">39.105</span>.<span class="number">131.75</span>:<span class="number">3005</span>/;</span><br><span class="line">    proxy_cookie_domain api.imooc<span class="literal">-front</span>.lgdsunday.club imooc<span class="literal">-front</span>.lgdsunday.club:</span><br><span class="line">    <span class="comment"># $host 变量，Host 为变量名</span></span><br><span class="line">    proxy_set_header  Host             <span class="variable">$host</span>; <span class="comment">#域名转发</span></span><br><span class="line">    proxy_set_header  X<span class="literal">-Real-IP</span>        <span class="variable">$remote_addr</span>; <span class="comment">#IP转发</span></span><br><span class="line">    proxy_set_header  X<span class="literal">-Forwarded-For</span>  <span class="variable">$proxy_add_x_forwarded_for</span> ;</span><br><span class="line">    proxy_set_header  Cookie           <span class="variable">$http_cookie</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h4><p>可以通过 XFTP 进行数据传输</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前中台解决方案项目（上）</title>
      <link href="/2024/08/19/project-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2024/08/19/project-%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="基于-Vue3打造前台-中台通用提效解决方案"><a href="#基于-Vue3打造前台-中台通用提效解决方案" class="headerlink" title="基于 Vue3打造前台+中台通用提效解决方案"></a>基于 Vue3打造前台+中台通用提效解决方案</h2><h3 id="1、项目架构"><a href="#1、项目架构" class="headerlink" title="1、项目架构"></a>1、项目架构</h3><p>本项目使用<code>vite</code> + <code>vue3</code>来实现前中台解决方案</p><h3 id="2、vite-的使用"><a href="#2、vite-的使用" class="headerlink" title="2、vite 的使用"></a>2、<code>vite</code> 的使用</h3><h4 id="vite对比webpack"><a href="#vite对比webpack" class="headerlink" title="vite对比webpack"></a>vite对比webpack</h4><p><strong>webpack</strong></p><blockquote><p><code>webpack</code>在开发时构建时，默认会去抓取并构建整个应用，然后才能提供服务，这就导致你的项目中，存在的任何一个错误（哪怕这个错误是在用户从来都没有进入过的页面中出现的)，它依然会影响到你的整个项目构建。<br>因此，当项目越大时，构建的时间就会越长，项目启动速度也就会越慢。</p></blockquote><p><strong>vite</strong></p><blockquote><p>vite 不会在一开始就构建你的整个项目，而是会将应用中的模块区分为依赖和源码（项目代码)两部分，对于源码部分，它会根据路由来拆分代码模块，只会去构建一开始就必须要构建的内容。<br>同时 vite以原生 ESM 的方式为浏览器提供源码，让浏览器接管了打包的部分工作。<br>因为这样的一个机制，无论项目多大，它只会构建一开始必须要构建的内容，这就让 vite在构建时的速度大大提升了。</p></blockquote><h4 id="vite缺点"><a href="#vite缺点" class="headerlink" title="vite缺点"></a><code>vite</code>缺点</h4><p><strong><code>vite</code>既然以原生<code>ESM</code>的方式为浏览器提供源码，让浏览器接管了打包的部分工作</strong>，</p><p>那么假如项目中存在 <code>cormmonJS</code>的内容怎么办?是不是就意味着无法解析呢?      是的!<br>在 <code>vite</code> 的早期版本中，确实存在这个问题。比如<code>axios</code> 因为 <code>axios</code> 中使用了很多的 <code>commonJS</code>规范，这就让 <code>vite</code> 无法解析对应的内容(对应的 <code>ieeue</code>),从而会抛出一个错误。</p><h4 id="官方是如何解决的"><a href="#官方是如何解决的" class="headerlink" title="官方是如何解决的"></a>官方是如何解决的</h4><p>针对于这个问题, <code>vite</code>在后期提供了依赖预构建的功能。 <code>vite</code> 会先将<code>CommonJS</code>或 <code>UMD</code>发布的依赖项转换为<code>ESM</code>之后，再重新进行编译。可以理解为速度对业务的一个妥协。</p><h3 id="3、初始化项目"><a href="#3、初始化项目" class="headerlink" title="3、初始化项目"></a>3、初始化项目</h3><ul><li><p>1、全局安装<code>vite</code> 版本2.8.5</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">-g</span> vite@<span class="number">2.8</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>2、使用<code>vite</code>创建项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm init vite@latest</span><br><span class="line"><span class="comment"># npx: installed 6 in 2.285s</span></span><br><span class="line"><span class="comment"># √ Project name: ... front</span></span><br><span class="line"><span class="comment"># √ Select a framework: » vue</span></span><br><span class="line"><span class="comment"># √ Select a variant: » vue</span></span><br></pre></td></tr></table></figure></li><li><p>3、运行项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="variable">$</span> npm run dev</span><br><span class="line"></span><br><span class="line">![<span class="type">image</span>-<span class="number">20220816094012941</span>](https://izdloyl<span class="literal">-blog</span>.oss<span class="literal">-cn-hangzhou</span>.aliyuncs.com/<span class="number">202408191455230</span>.jpg) </span><br><span class="line"></span><br><span class="line">可以看到，项目已经启动，但是没有 `network`地址；我们需要手动配置下</span><br><span class="line"></span><br><span class="line">package.json</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line"> <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite --host&quot;</span>, // dev后面 加上 <span class="literal">--host</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、tailwindcss工具"><a href="#4、tailwindcss工具" class="headerlink" title="4、tailwindcss工具"></a>4、tailwindcss工具</h3><h4 id="传统开发css痛点"><a href="#传统开发css痛点" class="headerlink" title="传统开发css痛点"></a>传统开发<code>css</code>痛点</h4><p>针对于一些”复杂”的功能，比如响应式（媒体查询)、主题定制。如果我们想要通过传统的 html + css 的形式来进行实现，无疑是非常复杂的。</p><p>除了上面提到的这些之外，还有很多其他的问题，感兴趣的同学可以看一下这篇文章的介绍CSS Utility Classes and “Separation of Concerns”<br>总而言之，传统的 html + css 的模式存在着很多的问题，tailwindcss就是一个很好地解决方向。</p><h4 id="安装tailwindcss"><a href="#安装tailwindcss" class="headerlink" title="安装tailwindcss"></a>安装tailwindcss</h4><p>1、安装依赖</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">-D</span> tailwindcss@<span class="number">3.0</span>.<span class="number">23</span> postcss@<span class="number">8.4</span>.<span class="number">8</span> autoprefixer@<span class="number">10.4</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><p>2、创建配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npx tailwindcss init <span class="literal">-p</span></span><br><span class="line"><span class="comment"># 执行当前命令生配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 表示tailwindcss的作用范围 [src下所有目录下的所有vue/js文件， 当前index.html文件]</span></span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;./index.html&quot;</span>, <span class="string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>,],  </span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导入<code>tailwindcss</code>的基础指令组件</p><p>创建<code>src/styles/index.scss</code>文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入`tailwindcss`的基础指令组件</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p>4、在项目的入口文件、<code>main.js</code>中引入<code>src/styles/index,scss</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line">+ <span class="keyword">import</span> <span class="string">&#x27;./styles/index.scss&#x27;</span></span><br></pre></td></tr></table></figure><p>保存之后，运行后，会报没有<code>sass</code>依赖包的错误，所以我们需要手动安装一下</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191455161.jpg" alt="image-20220816105339932"> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">-D</span> sass</span><br></pre></td></tr></table></figure><p>重启即可</p><blockquote><p>如果postcss报错的话，可以将package.json中 “type”: “module”删除掉</p></blockquote><h3 id="5、项目结构分析"><a href="#5、项目结构分析" class="headerlink" title="5、项目结构分析"></a>5、项目结构分析</h3><p>​    项目分为<strong>移动端</strong>和<strong>PC端</strong>，通过同一套代码进行实现，也就是所谓的响应式构建方案。</p><h4 id="移动端结构分析"><a href="#移动端结构分析" class="headerlink" title="移动端结构分析"></a>移动端结构分析</h4><p>移动端的结构相对比较简单，当我们去进行路由跳转时，它是以整个页面进行的整体路由切换。<br>那么由此可知，移动端不存在嵌套路由的概念，只需要在 APP.vue 中保留一个路由出口即可。</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191455355.jpg" alt="image-20220816154619643"> </p><h4 id="PC端结构分析"><a href="#PC端结构分析" class="headerlink" title="PC端结构分析"></a>PC端结构分析</h4><p>pc端相对于移动端、多了一个固定头部的部分，所以处理起来更加复杂一点</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191455218.jpg" alt="image-20220816154910365"></p><p>我们需要通过两个路由出口进行表示:</p><ol><li><p><code>App.vue</code> ：一级路由出口，用作整页路由切换</p></li><li><p><code>Main.vue</code> ：二级路由出口，用作局部路由切换</p><p>  移动端和PC端两者的路由结构是不同的，所以<strong>需要根据当前用户所在设备的不同，构建不同的路由表</strong></p></li></ol><h3 id="6、项目结构"><a href="#6、项目结构" class="headerlink" title="6、项目结构"></a>6、项目结构</h3><p>首先，项目中使用了<code>vuex</code>和<code>vue-router</code>；进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add vuex@4.0.2 vue-router@4.0.14</span><br></pre></td></tr></table></figure><p>项目的整体结构如下图所示</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191455647.jpg" alt="image-20220816160615099"></p><h3 id="7、企业级vite配置方案"><a href="#7、企业级vite配置方案" class="headerlink" title="7、企业级vite配置方案"></a>7、企业级vite配置方案</h3><h4 id="封装判断是否是移动端方法"><a href="#封装判断是否是移动端方法" class="headerlink" title="封装判断是否是移动端方法"></a>封装判断是否是移动端方法</h4><p>​    由于<code>tailwindcss</code>是遵循移动端优先的，所以在构建项目时，遵循<strong>移动端优先</strong>的规则</p><p>我们规定、屏幕宽度大于或等于1280像素的为pc端，小于1280像素的为移动端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">PC_DEVICE_WIDTH</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是移动端设备； 判断依据： 屏幕宽度小于 PC_DEVICE_WIDTH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isMoboleTerminal = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>, <span class="variable constant_">PC_DEVICE_WIDTH</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> &lt; <span class="variable constant_">PC_DEVICE_WIDTH</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面封装的方法有缺陷：当页面尺寸发生变化时，<code>isMoboleTerminal</code>的值并不会发生响应式改变；</p><p>这是因为<code>computed</code>重新执行的条件是，内部的响应式数据发生变化<code>computed</code>才会执行；</p><p>而此时内部没有响应式数据，所以并不会重新执行；所以我们可以监听屏幕的尺寸变化，并设置响应式宽度</p><p>使用第三方插件：<a href="https://vueuse.org/guide/">VueUse</a> 这个插件就像<code>react hook</code>一样，提供响应式数据。</p><ul><li><p>1、首先安装<code>vueuse</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm i @vueuse/core</span><br></pre></td></tr></table></figure></li><li><p>2、重构<code>isMoboleTerminal</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">PC_DEVICE_WIDTH</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../constants&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useWindowSize &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; width &#125; = <span class="title function_">useWindowSize</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否是移动端设备； 判断依据： 屏幕宽度小于 PC_DEVICE_WIDTH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isMoboleTerminal = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> width.<span class="property">value</span> &lt; <span class="variable constant_">PC_DEVICE_WIDTH</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置路由、判断当前是移动端还是pc端加载对应的路由"><a href="#配置路由、判断当前是移动端还是pc端加载对应的路由" class="headerlink" title="配置路由、判断当前是移动端还是pc端加载对应的路由"></a>配置路由、判断当前是移动端还是pc端加载对应的路由</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isMoboleTerminal &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils/flexible&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mobileRoutes <span class="keyword">from</span> <span class="string">&#x27;./modules/mobile-routes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pcRoutes <span class="keyword">from</span> <span class="string">&#x27;./modules/pc-routes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: isMoboleTerminal.<span class="property">value</span> ? mobileRoutes : pcRoutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="8、vite中的一些配置"><a href="#8、vite中的一些配置" class="headerlink" title="8、vite中的一些配置"></a>8、vite中的一些配置</h3><h4 id="符号代理src路径"><a href="#符号代理src路径" class="headerlink" title="@符号代理src路径"></a>@符号代理src路径</h4><p> vite官方给出来了，解决方案：<a href="https://vitejs.cn/config/#resolve-alias">resolve.alias</a></p><p>  vite.config.js</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">join</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="开发环境下跨域代理"><a href="#开发环境下跨域代理" class="headerlink" title="开发环境下跨域代理"></a>开发环境下跨域代理</h4><p> vite官方给出来了，解决方案：<a href="https://vitejs.cn/config/#server-proxy">server.proxy</a></p><p>  vite.config.js</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/prod-api&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27; http://localhost:3000&#x27;</span>,</span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="9、动态设置rem并修改tailmindcss默认配置"><a href="#9、动态设置rem并修改tailmindcss默认配置" class="headerlink" title="9、动态设置rem并修改tailmindcss默认配置"></a>9、动态设置rem并修改tailmindcss默认配置</h3><p>因为我们做的页面需要在不同设备下使用、要想在不同设备下适用；这里移动端我们采用的是<strong>flex+rem</strong>布局的方式：</p><p>首先我们先实现下rem布局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首次加载成功时设置html跟标签的fontSize属性值；最大基准值为40px</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useREM</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">MAX_FONT_SIZE</span> = <span class="number">40</span></span><br><span class="line">  <span class="comment">// 当文档被解析成功时调用</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置屏幕基准值的标准为 屏幕的宽度 / 10</span></span><br><span class="line">    <span class="keyword">const</span> fontSize = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="number">10</span></span><br><span class="line">    html.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="title class_">Math</span>.<span class="title function_">min</span>(fontSize, <span class="variable constant_">MAX_FONT_SIZE</span>) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mian.js中引入并调用<code>useREM</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useREM &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/flexible&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">useREM</span>()</span><br></pre></td></tr></table></figure><p>测试发现：<strong>字体非常大，不符合我们的预期；如下图</strong></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191456703.jpg" alt="image-20220820094254567"> </p><p>解决办法： <strong>tailwindcss提供了配置文件，可以在配置文件中自定义一些样式</strong></p><p>在<code>tailwind.config.js</code>中进行<code>theme.extend</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&#x27;./index.html&#x27;</span>, <span class="string">&#x27;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&#x27;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;</span><br><span class="line">      <span class="attr">fontSize</span>: &#123;</span><br><span class="line">        <span class="attr">xs</span>: [<span class="string">&#x27;0.25rem&#x27;</span>, &#123; <span class="attr">lineHeight</span>: <span class="string">&#x27;0.35rem&#x27;</span> &#125;],</span><br><span class="line">        <span class="attr">sm</span>: [<span class="string">&#x27;0.35rem&#x27;</span>, &#123; <span class="attr">lineHeight</span>: <span class="string">&#x27;0.45rem&#x27;</span> &#125;],</span><br><span class="line">        <span class="attr">base</span>: [<span class="string">&#x27;0.45rem&#x27;</span>, &#123; <span class="attr">lineHeight</span>: <span class="string">&#x27;0.55rem&#x27;</span> &#125;],</span><br><span class="line">        <span class="attr">lg</span>: [<span class="string">&#x27;0.55rem&#x27;</span>, &#123; <span class="attr">lineHeight</span>: <span class="string">&#x27;0.65rem&#x27;</span> &#125;],</span><br><span class="line">        <span class="attr">xl</span>: [<span class="string">&#x27;0.65rem&#x27;</span>, &#123; <span class="attr">lineHeight</span>: <span class="string">&#x27;0.75rem&#x27;</span> &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">boxShadow</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;l-white&#x27;</span>: <span class="string">&#x27;-10px 0 10px white&#x27;</span> <span class="comment">// 自定义类名样式 使用时 shadow-l-white</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191456132.jpg" alt="image-20220820095829409"> </p><h3 id="10、封装通用的svg-icon"><a href="#10、封装通用的svg-icon" class="headerlink" title="10、封装通用的svg-icon"></a>10、封装通用的svg-icon</h3><p>先看一下文件目录</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191456266.jpg" alt="image-20220820110904744"> </p><ul><li><p>1、封装<code>svg-icon</code>通用组件<code>libs/svg-icon/index.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;symbolId&quot; :fill=&quot;color&quot; :class=&quot;fillClass&quot; /&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  // 图标名称</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line">  // 颜色</span><br><span class="line">  color: &#123;</span><br><span class="line">    type: String</span><br><span class="line">  &#125;,</span><br><span class="line">  // 类名</span><br><span class="line">  fillClass: &#123;</span><br><span class="line">    type: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 生成图标唯一id #icon-xxx</span><br><span class="line">const symbolId = computed(() =&gt; `#icon-$&#123;props.name&#125;`)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2、导出注册组件对象 <code>libs/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&#x27;./svg-icon/index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出对象、这个对象有install方法，这样既可以通过app.use(options)来使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;svg-icon&#x27;</span>, <span class="title class_">SvgIcon</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、在<code>mian.js</code>中注册组件对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libs <span class="keyword">from</span> <span class="string">&#x27;@/libs&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(libs).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>4、安装<code>vite-plugin-svg-icons</code>插件，并配置vite</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> yarn add vite<span class="literal">-plugin-svg-icons</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure><p>vite.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-svg-icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="comment">// svg配置</span></span><br><span class="line">    <span class="title function_">createSvgIconsPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定需要缓存的图标文件夹</span></span><br><span class="line">      <span class="attr">iconDirs</span>: [path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;src/assets/icons&#x27;</span>)],</span><br><span class="line">      <span class="comment">// 指定symbolId格式</span></span><br><span class="line">      <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>5、在<code>main.js</code>中注册 <code>import &#39;virtual:svg-icons-register&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> libs <span class="keyword">from</span> <span class="string">&#x27;@/libs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:svg-icons-register&#x27;</span> <span class="comment">// 为固定格式</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(libs).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>6、在组件中使用svg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg-icon</span><br><span class="line">    name=&quot;hamburger&quot;</span><br><span class="line">    class=&quot;px-1 w-4 h-4 fixed top-0 right-[-2px] z-20 shadow-l-white bg-white&quot;</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191456309.jpg" alt="image-20220820111656263"> </p><h3 id="11、移动端navigation头部效果"><a href="#11、移动端navigation头部效果" class="headerlink" title="11、移动端navigation头部效果"></a>11、移动端navigation头部效果</h3><p>需要实现的效果如下：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191456764.gif" alt="20220820_144232"> </p><p><strong>实现思路：</strong>1. 选中的item下标: currentCategoryIndex</p><pre><code>       2. 所有item 元素: itemRefs       3. ul 的横向滚动偏离位置: ulScrollLeft       4. 最后在 currentCategoryIndex 发生改变时，获取 item 下标元素的 left 和 width，计算             sliderStyle 即可</code></pre><ul><li>1、滑块绝对定位动态改变滑块的 <code>left</code> 和 <code>width</code>值, 来改变滑块的位置</li><li>2、left值计算公式： 滚动x距离 + 点击元素距离屏幕左边的距离</li><li>3、width值计算公式： 点击元素的宽度</li></ul><p><strong>实现细节：</strong></p><ul><li><p>对于获取<code>v-for</code>生成的子元素的实例，需要使用回调函数获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul ref=&quot;ulEle&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in data&quot; :ref=&quot;getEleFn&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">    // 获取普通元素的实例，可以使用ref(null）获取</span><br><span class="line">    const ulEle = ref(null)</span><br><span class="line">    //对于获取`v-for`生成的子元素的实例，需要使用回调函数获取</span><br><span class="line">const getEleFn = (el) =&gt; &#123;</span><br><span class="line">        console.log(el)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>在初始化时，我们需要在li元素渲染完成之后触发一下重新设置一下滑块绝对定位动态改变滑块的 <code>left</code> 和 <code>width</code>值；我们可以监听渲染list的响应式数据是否改变，并且在改变后通过<code>nextTick</code>触发设置选中第一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听data初次数据渲染之后，将slider条设置到第一项</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> props.<span class="property">data</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      curretIndex.<span class="property">value</span> = <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p><strong>完整实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;bg-white sticky top-0 left-0 z-10&quot;&gt;</span><br><span class="line">    &lt;ul</span><br><span class="line">      ref=&quot;ulTarget&quot;</span><br><span class="line">      class=&quot;relative flex overflow-x-auto p-1 text-xs text-zinc-600 overflow-hidden&quot; </span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 顶部分类导航条 - 右侧 汉堡按钮 --&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        class=&quot;fixed top-0 right-[-1px] h-4 px-1 flex items-center bg-white z-20 shadow-l-white&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;m-svg-icon class=&quot;w-1.5 h-1.5&quot; name=&quot;hamburger&quot;&gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;!-- 顶部分类导航条 - 黑色滑块 --&gt;</span><br><span class="line">      &lt;li </span><br><span class="line">        ref=&quot;sliderTarget&quot;</span><br><span class="line">        :style=&quot;sliderStyle&quot;</span><br><span class="line">        class=&quot;absolute h-[22px] bg-zinc-900 rounded-lg duration-200&quot;</span><br><span class="line">      &gt;&lt;/li&gt;</span><br><span class="line">      &lt;!-- 顶部分类导航条 - item --&gt;</span><br><span class="line">      &lt;li </span><br><span class="line">        v-for=&quot;(item, index) in data&quot;</span><br><span class="line">        :key=&quot;item.id&quot;</span><br><span class="line">        class=&quot;shrink-0 px-1.5 py-0.5 z-10 duration-200 last:mr-4&quot;</span><br><span class="line">        :class=&quot;&#123;&#x27;text-zinc-100&#x27; : currentCategoryIndex === index&#125;&quot;</span><br><span class="line">        :ref=&quot;setItemRef&quot;</span><br><span class="line">        @click=&quot;onItemClick(index)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onBeforeUpdate, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useScroll &#125; from &#x27;@vueuse/core&#x27;;</span><br><span class="line"></span><br><span class="line">// vite 构建的项目中，可以直接使用 defineProps 方法</span><br><span class="line">defineProps(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        type: Array,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 顶部分类导航条 - 黑色滑块</span><br><span class="line">const sliderStyle = ref(&#123;</span><br><span class="line">    transform: &#x27;translateX(0px)&#x27;,</span><br><span class="line">    width: &#x27;52px&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 1、选中的item下标</span><br><span class="line">const currentCategoryIndex = ref(0)</span><br><span class="line"></span><br><span class="line">// 2、获取所有item元素</span><br><span class="line">let itemRefs = []</span><br><span class="line">const setItemRef = (el) =&gt; &#123;</span><br><span class="line">    if(el) itemRefs.push(el)</span><br><span class="line">&#125;</span><br><span class="line">// 数据改变之后， DOM 变化之前</span><br><span class="line">onBeforeUpdate(() =&gt; &#123;</span><br><span class="line">  itemRefs = [] // 重置itemRefs，防止数据发生改变，就push，导致重复数据过多</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 3、获取 ul 元素，以计算 ul 与屏幕左侧的偏移距离</span><br><span class="line">const ulTarget = ref(null)</span><br><span class="line">// 通过Vueuse -&gt; useScroll 获取响应式的 scroll 滚动距离</span><br><span class="line">const &#123; x: ulScrollLeft &#125; = useScroll(ulTarget)</span><br><span class="line"></span><br><span class="line">// 4、监听 currentCategoryIndex 发生改变 -- 获取 item 下标元素的 left 和 width，计算sliderStyle</span><br><span class="line">watch(currentCategoryIndex, (val) =&gt; &#123;</span><br><span class="line">    // 获取选中元素的 left、width</span><br><span class="line">    const &#123; left, width &#125; = itemRefs[val].getBoundingClientRect()</span><br><span class="line">    // 为 sliderStyle 设置属性</span><br><span class="line">    sliderStyle.value = &#123;</span><br><span class="line">        // 滑块位置 = ul 横向滚动位置 + 当前元素的 left 偏移量 - ul的padding</span><br><span class="line">        // transform: `translateX($&#123;ulScrollLeft.value + left - 10 + &#x27;px&#x27;&#125;)`,</span><br><span class="line">        transform: `translateX($&#123;ulScrollLeft.value + left - 10&#125;px)`,</span><br><span class="line">        width: width + &#x27;px&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// item 点击事件</span><br><span class="line">const onItemClick = (index) =&gt; &#123;</span><br><span class="line">    currentCategoryIndex.value = index</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="12、封装通用组件-popup"><a href="#12、封装通用组件-popup" class="headerlink" title="12、封装通用组件  popup"></a>12、封装通用组件  popup</h3><p>​    当点击面包屑按钮时，会有一个弹出窗口 popup自低而上弹出    </p><p>​      （封装为项目的通用组件  -&gt;  实现功能）</p><p> popup组件的功能：</p><ul><li><p>1、当 popup展开时，内容视图应该不属于任何一个组件内部，而应该直接被插入到 body下面</p></li><li><p>2、popup应该包含两部分内容，一部分为背景蒙版，一部分为内容的包裹容器</p></li><li><p>3、popup应该通过一个双向绑定进行控制展示和隐藏</p></li><li><p>4、popup展示时，滚动（顶部导航条）应该被锁定</p></li><li><p>5、内容区域应该接收所有的$attrs，并且应该通过插槽让调用方指定其内容</p></li></ul><p>在<code>libs/popup/index.vue</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Teleport to=&quot;body&quot;&gt;</span><br><span class="line">    &lt;Transition name=&quot;popup-mask&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">      &lt;!-- 遮罩层 --&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;w-screen h-screen bg-zinc-900/80 z-40 fixed top-0 left-0&quot;</span><br><span class="line">        @click=&quot;emits(&#x27;update:modelValue&#x27;, false)&quot;</span><br><span class="line">        v-if=&quot;modelValue&quot;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Transition name=&quot;popup-slide&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">      &lt;!-- 内容区域 --&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;w-screen bg-white z-50 fixed bottom-0&quot;</span><br><span class="line">        v-bind=&quot;$attrs&quot;</span><br><span class="line">        v-if=&quot;modelValue&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;slot /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line">  &lt;/Teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useScrollLock &#125; from &#x27;@vueuse/core&#x27;;</span><br><span class="line">import &#123; watch &#125; from &#x27;vue&#x27;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: &#123;</span><br><span class="line">    required: true,</span><br><span class="line">    type: Boolean</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const emits = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line">// 锁定滚动 - 遮罩层出现后，锁定滚动// 准备进入，离开完成</span><br><span class="line">const isLocked = useScrollLock(document.body)</span><br><span class="line">watch(</span><br><span class="line">  () =&gt; props.modelValue,</span><br><span class="line">  (val) =&gt; &#123;</span><br><span class="line">    isLocked.value = val</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.popup-mask-enter-from,</span><br><span class="line">.popup-mask-leave-to &#123;</span><br><span class="line">  opacity: 0; // 准备进入，离开完成</span><br><span class="line">&#125;</span><br><span class="line">.popup-mask-enter-active,</span><br><span class="line">.popup-mask-leave-active &#123;</span><br><span class="line">  transition: all 0.3s; // popup组件 mask(fade)动画</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.popup-slide-enter-from,</span><br><span class="line">.popup-slide-leave-to &#123;</span><br><span class="line">  transform: translateY(100%);</span><br><span class="line">&#125;</span><br><span class="line">.popup-slide-enter-active,</span><br><span class="line">.popup-slide-leave-active &#123;</span><br><span class="line">  transition: all 0.3s;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="双向数据绑定功能优化"><a href="#双向数据绑定功能优化" class="headerlink" title="双向数据绑定功能优化"></a><strong>双向数据绑定功能优化</strong></h4><p>使用<code>useVModel</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Teleport to=&quot;body&quot;&gt;</span><br><span class="line">    &lt;Transition name=&quot;popup-mask&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">      &lt;!-- 遮罩层 --&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;w-screen h-screen bg-zinc-900/80 z-40 fixed top-0 left-0&quot;</span><br><span class="line">        @click=&quot;isVisable = false&quot;</span><br><span class="line">        v-if=&quot;isVisable&quot;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Transition name=&quot;popup-slide&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">      &lt;!-- 内容区域 --&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;w-screen bg-white z-50 fixed bottom-0&quot;</span><br><span class="line">        v-bind=&quot;$attrs&quot;</span><br><span class="line">        v-if=&quot;isVisable&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 插槽 --&gt;</span><br><span class="line">        &lt;slot /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line">  &lt;/Teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useScrollLock, useVModel &#125; from &#x27;@vueuse/core&#x27;;</span><br><span class="line">import &#123; watch &#125; from &#x27;vue&#x27;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: &#123;</span><br><span class="line">    required: true,</span><br><span class="line">    type: Boolean</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line">// 是一个响应式数据，当 isVisable 值发生变化时，会自动触发 emit 修改 modelValue</span><br><span class="line">const isVisable = useVModel(props)</span><br><span class="line"></span><br><span class="line">// 锁定滚动 - 遮罩层出现后，锁定滚动</span><br><span class="line">const isLocked = useScrollLock(document.body)</span><br><span class="line">watch(</span><br><span class="line">  () =&gt; props.modelValue,</span><br><span class="line">  (val) =&gt; &#123;</span><br><span class="line">    isLocked.value = val</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="通用组件注册"><a href="#通用组件注册" class="headerlink" title="通用组件注册"></a><strong>通用组件注册</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&#x27;./svg-icon/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Popup</span> <span class="keyword">from</span> <span class="string">&#x27;./popup/index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出对象、这个对象有install方法，这样既可以通过app.use(options)来使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;svg-icon&#x27;</span>, <span class="title class_">SvgIcon</span>)</span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;Popup&#x27;</span>, <span class="title class_">Popup</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用通用组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-popup v-model=&quot;isOpenPopup&quot;&gt;</span><br><span class="line">     &lt;menu-vue @onItemClick=&quot;onItemClick&quot;&gt;&lt;/menu-vue&gt;</span><br><span class="line">&lt;/m-popup&gt;</span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191456412.gif" alt="20220820_172315"> </p><h4 id="将点击项展示在屏幕正中央，并加上过渡效果"><a href="#将点击项展示在屏幕正中央，并加上过渡效果" class="headerlink" title="将点击项展示在屏幕正中央，并加上过渡效果"></a>将点击项展示在屏幕正中央，并加上过渡效果</h4><p><strong>实现思路</strong></p><ul><li><p>1、在list菜单列表的数据发生改变后，获取每一项如果想要展示在中间需要滚动的距离</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">菜单展示中间需要向左滚动的距离l = 每一项距离屏幕左边的距离 - 1/2屏幕的宽度 + 1/2自身的宽度 </span><br></pre></td></tr></table></figure></li><li><p>2、在点击时获取【被点击项向左滚动的距离l】，使得ul平滑滚动到指定位置（本案例使用自定义封装的平滑滚动函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">scrollTransition</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">exec</span> (&#123;el = <span class="variable language_">document</span>.<span class="property">body</span>, position = <span class="number">0</span>, direction = <span class="string">&#x27;v&#x27;</span>,  time = <span class="number">150</span>&#125; = options) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    <span class="comment">// 每步的时间 ms</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">TIME_EVERY_STEP</span> = <span class="number">5</span> </span><br><span class="line">    <span class="comment">// 最大滚动距离</span></span><br><span class="line">    <span class="keyword">const</span> maxScrollSize = el.<span class="property">scrollWidth</span> - el.<span class="property">offsetWidth</span></span><br><span class="line">    <span class="comment">// 限定position的有效滚动范围</span></span><br><span class="line">    position = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(position, maxScrollSize), <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 可以分为多少步</span></span><br><span class="line">    <span class="keyword">let</span> steps = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(time / <span class="variable constant_">TIME_EVERY_STEP</span>)</span><br><span class="line">    <span class="keyword">const</span> stepSize = (position - el.<span class="property">scrollLeft</span>) / steps <span class="comment">// 每步的长度</span></span><br><span class="line">    </span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(el.scrollLeft , position)</span></span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">scrollLeft</span> !== <span class="title class_">Number</span>.<span class="built_in">parseInt</span>(position) &amp;&amp; position &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stepSize &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> scrollX = el.<span class="property">scrollLeft</span> + stepSize &gt;= position ? position :  el.<span class="property">scrollLeft</span> + stepSize</span><br><span class="line">          el.<span class="property">scrollLeft</span> = scrollX</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> scrollX = el.<span class="property">scrollLeft</span> + stepSize &lt;= position ? position :  el.<span class="property">scrollLeft</span> + stepSize</span><br><span class="line">          el.<span class="property">scrollLeft</span> = scrollX</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="variable constant_">TIME_EVERY_STEP</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>3、我们来处理下滑块的位置，因为滑块的位置是根据被选中项的<code>getBoundingClientRect</code>的属性值决定的；所以我们只要保证，在滑块获取<code>getBoundingClientRect</code>属性是在页面渲染之后即可；所以我们可以使用nextTick保证在页面dom元素发生变化后改变滑块的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(curretIndex, <span class="function">(<span class="params">newIndex, oldIndex</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 保证渲染之后再进行计算元素的位置, 在这里加上nextTick</span></span><br><span class="line">  <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取点击元素的距离左边屏幕的距离和元素的宽度</span></span><br><span class="line">    <span class="keyword">const</span> liEle = <span class="title class_">Array</span>.<span class="title function_">from</span>(liEles.<span class="property">value</span>)[newIndex]</span><br><span class="line">    <span class="keyword">if</span> (!liEle) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> &#123; left, width &#125; = liEle.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">    sliderStyle.<span class="property">value</span> = &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="string">`<span class="subst">$&#123;left + ulScrollLeft.value&#125;</span>px`</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="string">`<span class="subst">$&#123;width&#125;</span>px`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>实现代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;relative z-10 text-sm bg-white flex overflow-auto p-1 text-zinc-600&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">ref</span>=<span class="string">&quot;ulEle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;absolute top-1 h-[22.5px] bg-zinc-900 rounded-lg duration-200 z-10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:style</span>=<span class="string">&quot;sliderStyle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">&quot;(category, index) in data&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">&quot;category.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;shrink-0 px-1.5 py-0.5 last:mr-6 z-10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;text-zinc-50&#x27;: index === curretIndex &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">click</span>=<span class="string">&quot;handleSelectCategory(index)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:ref</span>=<span class="string">&quot;storeLiEle&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123; category.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">svg-icon</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">name</span>=<span class="string">&quot;hamburger&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;px-1 w-4 h-4 fixed top-0 right-[-2px] z-20 shadow-l-white bg-white&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">click</span>=<span class="string">&quot;visible = true&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">popup</span> <span class="attr">v-model</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:categorys</span>=<span class="string">&quot;data&quot;</span> @<span class="attr">handleSelectCategory</span>=<span class="string">&quot;handleSelectCategory&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">popup</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, watch, nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useScroll &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Menu</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/main/components/menu/index.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; scrollTransition &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> run = <span class="title function_">scrollTransition</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 默认选中索引</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> curretIndex = <span class="title function_">ref</span>(-<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> sliderStyle = <span class="title function_">ref</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">left</span>: <span class="string">&#x27;10px&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">width</span>: <span class="string">&#x27;0px&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">bottom</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//  ul dom元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> ulEle = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// li dom元素容器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> liEles = <span class="title function_">ref</span>(<span class="keyword">new</span> <span class="title class_">Set</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 每一项在屏幕中央时，需要向左滚动的距离</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> scrollRaces = <span class="title function_">ref</span>([])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ulScrollLeft 向左滚动的距离</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; <span class="attr">x</span>: ulScrollLeft &#125; = <span class="title function_">useScroll</span>(ulEle)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> visible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 选中索引</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">handleSelectCategory</span> = (<span class="params">index</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  curretIndex.<span class="property">value</span> = index</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  visible.<span class="property">value</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// ulEle.value.scrollTo(scrollRaces.value[index], 0)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">run</span>(&#123; <span class="attr">el</span>: ulEle.<span class="property">value</span>, <span class="attr">position</span>: scrollRaces.<span class="property">value</span>[index], <span class="attr">direction</span>: <span class="string">&#x27;l&#x27;</span>, <span class="attr">time</span>: <span class="number">200</span> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 获取v-for遍历的子元素dom节点时，需要使用回调函数获取; 注意: 每次页面更新之后storeLiEle，都会重新执行一遍，这样会导致liEles中存储的都是重复的元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 所以可以使用Set来存储数据，避免存入重复的数据， 也可以在obBeforeUpdate前设置liEles.value的值为初始化值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">storeLiEle</span> = (<span class="params">el</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  liEles.<span class="property">value</span>.<span class="title function_">add</span>(el)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">watch</span>(curretIndex, <span class="function">(<span class="params">newIndex, oldIndex</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 保证渲染之后再进行计算元素的位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取点击元素的距离左边屏幕的距离和元素的宽度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> liEle = <span class="title class_">Array</span>.<span class="title function_">from</span>(liEles.<span class="property">value</span>)[newIndex]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (!liEle) <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; left, width, height &#125; = liEle.<span class="title function_">getBoundingClientRect</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    sliderStyle.<span class="property">value</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">left</span>: <span class="string">`<span class="subst">$&#123;left + ulScrollLeft.value&#125;</span>px`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">width</span>: <span class="string">`<span class="subst">$&#123;width&#125;</span>px`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">height</span>: <span class="string">`<span class="subst">$&#123;height&#125;</span>px`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">immediate</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 监听data初次数据渲染之后，将slider条设置到第一项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">watch</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="function">() =&gt;</span> props.<span class="property">data</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (props.<span class="property">data</span>.<span class="property">length</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      curretIndex.<span class="property">value</span> = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 获取1/2屏幕的宽度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> halfScreenWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 每一项向左滚动的距离 = 每一项距离屏幕左边的距离 - 1/2屏幕的宽度 + 1/2自身的宽度 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      scrollRaces.<span class="property">value</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(liEles.<span class="property">value</span>).<span class="title function_">map</span>(<span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span> - halfScreenWidth + el.<span class="property">offsetWidth</span> / <span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">immediate</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/* ul &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-css"><span class="language-xml">  scroll-behavior: smooth;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-css"><span class="language-xml">&#125; */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191456084.gif" alt="20220822_104005"> </p><h3 id="13、通用组件自动化注册"><a href="#13、通用组件自动化注册" class="headerlink" title="13、通用组件自动化注册"></a>13、通用组件自动化注册</h3><p>如果每次开发完成一个通用组件之后，都去手动进行注册，过于麻烦，所以我们期望通过 vite 提供的功能，进行通用组件的自动化注册<br>那么,如果想要完成这个功能的话，就需要使用到两个关键的知识点:</p><ul><li><p>1、<a href="https://vitejs.cn/guide/features.html#glob-import">vite的Glob</a> 导入功能：该功能可以帮助我们在文件系统中导入多个模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&#x27;./dir/*.js&#x27;</span>)</span><br><span class="line"><span class="comment">// 以上将会被转译为下面的样子：</span></span><br><span class="line"><span class="keyword">const</span> modules = &#123;</span><br><span class="line">  <span class="string">&#x27;./dir/foo.js&#x27;</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./dir/foo.js&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;./dir/bar.js&#x27;</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./dir/bar.js&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>2、vue的 <a href="https://cn.vuejs.org/guide/components/async.html">defineAsyncComponent</a>方法：该方法可以创建一个按需加载的异步组件</li></ul><p><strong>我们先来看下现在的代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&#x27;./svg-icon/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Popup</span> <span class="keyword">from</span> <span class="string">&#x27;./popup/index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出对象、这个对象有install方法，这样既可以通过app.use(options)来使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;m-svg-icon&#x27;</span>, <span class="title class_">SvgIcon</span>)</span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;m-Popup&#x27;</span>, <span class="title class_">Popup</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改成动态导入的形式</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动化注册组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出对象、这个对象有install方法，这样既可以通过app.use(options)来使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、获取当前路径下所有文件夹中以index.vue结尾的文件</span></span><br><span class="line">    <span class="keyword">const</span> components = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&#x27;./*/index.vue&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [path, fn] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(components)) &#123; <span class="comment">// path: ./popup/index.vue</span></span><br><span class="line">      <span class="comment">// 2、遍历获取到的组件模块：根据path生成组件名称, defineAsyncComponent生成动态组件</span></span><br><span class="line">      <span class="keyword">const</span> componentName = <span class="string">&#x27;m-&#x27;</span> +  path.<span class="title function_">replace</span>(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="comment">// 3、利用 app.component 将组件注册到app上</span></span><br><span class="line">      app.<span class="title function_">component</span>(componentName, <span class="title function_">defineAsyncComponent</span>(fn))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、PC端基础架构"><a href="#14、PC端基础架构" class="headerlink" title="14、PC端基础架构"></a>14、PC端基础架构</h3><p>PC端 具备两个路由的出口：一级路由出口：APP.vue 中<br>                                                二级路由出口：Main.vue 中</p><p>当前的代码而言，仅存在一个一级路由出口，需要处理 二级路由出口：</p><ol><li>创建 src/views/layout/index.vue 文件，表示 一级路由出口 对应的组件</li><li><p>在 layout/components 中分别创建三个业务组件:</p><ol><li>header/index.vue: 表示P端头部区域</li><li>main.vue : 二级路由出口</li><li>floating: 右下角悬浮区域</li></ol></li><li><p>在 src/views/layout/index.vue 文件中，导入这三个组件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;h-screen&quot;&gt;</span><br><span class="line">      &lt;!-- 需要在 tailwind 中定义 h-header、h-main 高度 --&gt;</span><br><span class="line">      &lt;header-vue class=&quot;h-header&quot;&gt;&lt;/header-vue&gt;</span><br><span class="line">      &lt;div class=&quot;h-main&quot;&gt;</span><br><span class="line">        &lt;main-vue&gt;&lt;/main-vue&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;floating-vue&gt;&lt;/floating-vue&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script setup&gt;</span><br><span class="line">  import headerVue from &#x27;./components/header/index.vue&#x27;</span><br><span class="line">  import mainVue from &#x27;./components/main.vue&#x27;</span><br><span class="line">  import floatingVue from &#x27;./components/floating.vue&#x27;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>在 tailwind 中定义 h-header、h-main 高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extend</span>: &#123;</span><br><span class="line">    <span class="comment">// PC端顶部和内容区高度</span></span><br><span class="line">     <span class="attr">height</span>: &#123;</span><br><span class="line">       <span class="attr">header</span>: <span class="string">&#x27;72px&#x27;</span>,</span><br><span class="line">       <span class="attr">main</span>: <span class="string">&#x27;calc(100vh - 72px)&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>PC端路由出口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/layout/index.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>:[]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="header模块的简单搭建"><a href="#header模块的简单搭建" class="headerlink" title="header模块的简单搭建"></a>header模块的简单搭建</h4><p>在 layout/components/header 中分别创建三个业务组件:</p><ol><li>header-search/index.vue: 表示PC端头部搜索区域</li><li>header-my.vue : 个人信息展示</li><li>header-theme: 头部主题切换</li></ol><p>在<code>header/index.vue</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;w-full bg-white  border-b border-b-zinc-200 px-2 py-1&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div class=&quot;flex items-center&quot;&gt;</span><br><span class="line">      &lt;img </span><br><span class="line">        class=&quot;h-4 cursor-pointer mr-2 guide-home&quot;</span><br><span class="line">        src=&quot;&quot; </span><br><span class="line">         @click=&quot;onToHome&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;header-search-vue class=&quot;mr-1&quot;&gt;&lt;/header-search-vue&gt;</span><br><span class="line">      &lt;header-theme-vue class=&quot;mr-1&quot;&gt;&lt;/header-theme-vue&gt;</span><br><span class="line">      &lt;header-my-vue&gt;&lt;/header-my-vue&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import headerSearchVue from &#x27;./header-search/index.vue&#x27;</span><br><span class="line">import headerThemeVue from &#x27;./header-theme.vue&#x27;</span><br><span class="line">import headerMyVue from &#x27;./header-my.vue&#x27;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">// router === this.$router</span><br><span class="line">const router = useRouter()</span><br><span class="line">// 点击跳转到首页</span><br><span class="line">const onToHome = () =&gt; &#123;</span><br><span class="line">  router.push(&#x27;/&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="15、封装通用组件-search"><a href="#15、封装通用组件-search" class="headerlink" title="15、封装通用组件 search"></a>15、封装通用组件 search</h3><h4 id="search-搜索框能力分析"><a href="#search-搜索框能力分析" class="headerlink" title="search 搜索框能力分析"></a>search 搜索框能力分析</h4><p>search 部分为搜索框，对于该搜索框而言把它做成通用组件, 它应该具备的功能：</p><ol><li>输入内容实现双向数据绑定</li><li>鼠标移入与获取焦点时的动画</li><li>一键清空文本功能</li><li>搜索触发功能</li><li>可控制，可填充的下拉展示区</li><li>监听到以下事件列表：<ol><li>clear：删除所有文本事件</li><li>input：输入事件</li><li>focus：获取焦点事件</li><li>blur：失去焦点事件</li><li>search：触发搜索(点击或回车)事件</li></ol></li></ol><h4 id="search-搜索框样式处理"><a href="#search-搜索框样式处理" class="headerlink" title="search 搜索框样式处理"></a>search 搜索框样式处理</h4><p><code>libs\search\index.vue</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;group relative p-0.5 rounded-xl border-white duration-500 hover:bg-red-100/40&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- 搜索图标 --&gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        class=&quot;w-1.5 h-1.5 absolute translate-y-[-50%] top-[50%] left-2&quot;</span><br><span class="line">        name=&quot;search&quot;</span><br><span class="line">        color=&quot;#707070&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;!-- 输入框 --&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        class=&quot;block w-full h-[44px] pl-4 text-sm outline-0 bg-zinc-100 caret-zinc-400 rounded-xl text-zinc-900 tracking-wide font-semibold border border-zinc-100 duration-500 group-hover:bg-white group-hover:border-zinc-200 focus:border-red-300&quot;</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        placeholder=&quot;搜索&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;!-- 删除按钮 --&gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        v-show=&quot;inputValue&quot;</span><br><span class="line">        name=&quot;input-delete&quot;</span><br><span class="line">        class=&quot;h-1.5 w-1.5 absolute translate-y-[-50%] top-[50%] right-9 duration-500 cursor-pointer&quot;</span><br><span class="line">      &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;!-- 分割线 --&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;opacity-0 h-1.5 w-[1px] absolute translate-y-[-50%] top-[50%] right-[62px] duration-500 bg-zinc-200 group-hover:opacity-100&quot;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">      &lt;!-- TODO: 搜索按钮(通用组件) --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 下拉区 --&gt;</span><br><span class="line">    &lt;transition name=&quot;slide&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;max-h-[368px] w-full text-base overflow-auto bg-white absolute z-20 left-0 top-[56px] p-2 rounded border border-zinc-200 duration-200 hover:shadow-3xl scrollbar-thin scrollbar-thumb-zinc-200 dark:scrollbar-thumb-zinc-900 scrollbar-track-transparent&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;slot name=&quot;dropdown&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="完善search基本功能"><a href="#完善search基本功能" class="headerlink" title="完善search基本功能"></a>完善search基本功能</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    ref=&quot;containerTarget&quot;</span><br><span class="line">    class=&quot;group relative p-0.5 rounded-xl border-white duration-500 hover:bg-red-100/40&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- 搜索图标 --&gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        class=&quot;w-1.5 h-1.5 absolute translate-y-[-50%] top-[50%] left-2&quot;</span><br><span class="line">        name=&quot;search&quot;</span><br><span class="line">        color=&quot;#707070&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;!-- 输入框 --&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        class=&quot;block w-full h-[44px] pl-4 text-sm outline-0 bg-zinc-100 caret-zinc-400 rounded-xl text-zinc-900 tracking-wide font-semibold border border-zinc-100 duration-500 group-hover:bg-white group-hover:border-zinc-200 focus:border-blue-300&quot;</span><br><span class="line">        type=&quot;text&quot;</span><br><span class="line">        placeholder=&quot;搜索&quot;</span><br><span class="line">        v-model=&quot;inputValue&quot;</span><br><span class="line">        @focus=&quot;onFocusHandler&quot;</span><br><span class="line">        @blur=&quot;onBlurHandler&quot;</span><br><span class="line">        @keyup.enter=&quot;onSearchHandlder&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;!-- 删除按钮 --&gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        v-show=&quot;inputValue&quot;</span><br><span class="line">        name=&quot;input-delete&quot;</span><br><span class="line">        class=&quot;h-1.5 w-1.5 absolute translate-y-[-50%] top-[50%] right-9 duration-500 cursor-pointer&quot;</span><br><span class="line">        @click=&quot;onClearClick&quot;</span><br><span class="line">      &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;!-- 分割线 --&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;opacity-0 h-1.5 w-[1px] absolute translate-y-[-50%] top-[50%] right-[62px] duration-500 bg-zinc-200 group-hover:opacity-100&quot;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">      &lt;!-- TODO: 搜索按钮(通用组件) --&gt;</span><br><span class="line">      &lt;m-button</span><br><span class="line">          class=&quot;absolute translate-y-[-50%] top-[50%] right-1 rounded-xl duration-500 opacity-0 group-hover:opacity-100&quot;</span><br><span class="line">          icon=&quot;search&quot;</span><br><span class="line">          iconColor=&quot;#ffffff&quot;</span><br><span class="line">          @click=&quot;onSearchHandlder&quot;</span><br><span class="line">        &gt;&lt;/m-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 下拉区 --&gt;</span><br><span class="line">    &lt;transition name=&quot;slide&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;$slots.dropdown&quot;</span><br><span class="line">        v-show=&quot;isFocus&quot;</span><br><span class="line">        class=&quot;max-h-[368px] w-full text-base overflow-auto bg-white absolute z-20 left-0 top-[56px] p-2 rounded border border-zinc-200 duration-200 hover:shadow-3xl scrollbar-thin scrollbar-thumb-zinc-200 dark:scrollbar-thumb-zinc-900 scrollbar-track-transparent&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;slot name=&quot;dropdown&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 更新事件</span><br><span class="line">const EMIT_UPDATE_MODELVALUE = &#x27;update:modelValue&#x27;</span><br><span class="line">// 触发搜索（点击或回车）事件</span><br><span class="line">const EMIT_SEARCH = &#x27;search&#x27;</span><br><span class="line">// 删除所有文本事件</span><br><span class="line">const EMIT_CLEAR = &#x27;clear&#x27;</span><br><span class="line">// 输入事件</span><br><span class="line">const EMIT_INPUT = &#x27;input&#x27;</span><br><span class="line">// 获取焦点事件</span><br><span class="line">const EMIT_FOCUS = &#x27;focus&#x27;</span><br><span class="line">// 失去焦点事件</span><br><span class="line">const EMIT_BLUR = &#x27;blur&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">/**</span><br><span class="line"> * 1. 输入内容实现双向数据绑定</span><br><span class="line"> * 2. 搜索按钮在 hover 是展示</span><br><span class="line"> * 3. 一键清空文本功能</span><br><span class="line"> * 4. 触发搜索</span><br><span class="line"> * 5. 控制下拉展示区的展示</span><br><span class="line"> * 6. 事件处理</span><br><span class="line"> */</span><br><span class="line">import &#123; watch, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useVModel, onClickOutside &#125; from &#x27;@vueuse/core&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  modelValue: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 注册事件</span><br><span class="line">const emits = defineEmits([</span><br><span class="line">  EMIT_UPDATE_MODELVALUE,</span><br><span class="line">  EMIT_CLEAR,</span><br><span class="line">  EMIT_INPUT,</span><br><span class="line">  EMIT_FOCUS,</span><br><span class="line">  EMIT_BLUR,</span><br><span class="line">  EMIT_SEARCH</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// 输入文本</span><br><span class="line">const inputValue = useVModel(props)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 清空文本</span><br><span class="line"> */</span><br><span class="line">const onClearClick = () =&gt; &#123;</span><br><span class="line">  inputValue.value = &#x27;&#x27;</span><br><span class="line">  emits(EMIT_CLEAR, &#x27;&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 触发搜索</span><br><span class="line"> */</span><br><span class="line">const onSearchHandlder = () =&gt; &#123;</span><br><span class="line">  emits(EMIT_SEARCH, inputValue.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 监听焦点行为</span><br><span class="line"> */</span><br><span class="line">const isFocus = ref(false)</span><br><span class="line">const onFocusHandler = () =&gt; &#123;</span><br><span class="line">  isFocus.value = true</span><br><span class="line">  emits(EMIT_FOCUS)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 失去焦点</span><br><span class="line"> */</span><br><span class="line">const onBlurHandler = () =&gt; &#123;</span><br><span class="line">  emits(EMIT_BLUR)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 点击区域外隐藏 dropdown</span><br><span class="line"> */</span><br><span class="line">const containerTarget = ref(null)</span><br><span class="line">onClickOutside(containerTarget, () =&gt; &#123;</span><br><span class="line">  isFocus.value = false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 监听输入行为</span><br><span class="line"> */</span><br><span class="line">watch(inputValue, (val) =&gt; &#123;</span><br><span class="line">  emits(EMIT_INPUT, val)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">// 搜索框下拉区动画</span><br><span class="line">.slide-enter-active,</span><br><span class="line">.slide-leave-active &#123;</span><br><span class="line">  transition: all 0.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-enter-from,</span><br><span class="line">.slide-leave-to &#123;</span><br><span class="line">  transform: translateY(40px);</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="16、封装通用组件-button"><a href="#16、封装通用组件-button" class="headerlink" title="16、封装通用组件 button"></a>16、封装通用组件 button</h3><p>需要实现的组件如下</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191457602.jpg" alt="image-20220823102101628"></p><p>在<code>tailwind.config.js</code>中添加项目主色值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extend</span>: &#123;</span><br><span class="line">   <span class="attr">colors</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;#667eb0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hover-main&#x27;</span>: <span class="string">&#x27;#6495ED&#x27;</span></span><br><span class="line">      &#125;, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>libs\button\index.vue</code>中封装通用组件 button：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button</span><br><span class="line">    class=&quot;text-sm text-center rounded duration-150 flex justify-center items-center&quot;</span><br><span class="line">    :class=&quot;[</span><br><span class="line">      typeEnum[type],</span><br><span class="line">      sizeEnum[sizeKey].button,</span><br><span class="line">      &#123; &#x27;active:scale-105&#x27;: isActiveAnim &#125;</span><br><span class="line">    ]&quot;</span><br><span class="line">    @click.stop=&quot;onBtnClick&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- .stop防止冒泡 --&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;!-- 展示 loading --&gt;</span><br><span class="line">    &lt;m-svg-icon</span><br><span class="line">      v-if=&quot;loading&quot;</span><br><span class="line">      name=&quot;loading&quot;</span><br><span class="line">      class=&quot;w-2 h-2 animate-spin mr-1&quot;</span><br><span class="line">    &gt;&lt;/m-svg-icon&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- icon 按钮 --&gt;</span><br><span class="line">    &lt;m-svg-icon</span><br><span class="line">      v-if=&quot;icon&quot;</span><br><span class="line">      :name=&quot;icon&quot;</span><br><span class="line">      class=&quot;m-auto&quot;</span><br><span class="line">      :class=&quot;sizeEnum[sizeKey].icon&quot;</span><br><span class="line">      :color=&quot;iconColor&quot;</span><br><span class="line">      :fillClass=&quot;iconClass&quot;</span><br><span class="line">    &gt;&lt;/m-svg-icon&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 文字按钮 --&gt;</span><br><span class="line">    &lt;slot v-else /&gt;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">// type 可选项：表示按钮风格</span><br><span class="line">const typeEnum = &#123;</span><br><span class="line">  primary: &#x27;text-white bg-zinc-800 hover:bg-zinc-900 active:bg-zinc-800&#x27;,</span><br><span class="line">  main: &#x27;text-white bg-main hover:bg-hover-main active:bg-main&#x27;,</span><br><span class="line">  info: &#x27;text-zinc-800 bg-zinc-200 hover:bg-zinc-300 active:bg-zinc-200&#x27;</span><br><span class="line">&#125;</span><br><span class="line">// size 可选项：表示按钮大小。区分文字按钮和icon按钮</span><br><span class="line">const sizeEnum = &#123;</span><br><span class="line">    // 文字按钮</span><br><span class="line">  default: &#123;</span><br><span class="line">    button: &#x27;w-8 h-4 text-base&#x27;,</span><br><span class="line">    icon: &#x27;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">//   icon按钮</span><br><span class="line">  &#x27;icon-default&#x27;: &#123;</span><br><span class="line">    button: &#x27;w-4 h-4&#x27;,</span><br><span class="line">    icon: &#x27;w-1.5 h-1.5&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  small: &#123;</span><br><span class="line">    button: &#x27;w-7 h-3 text-base&#x27;,</span><br><span class="line">    icon: &#x27;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x27;icon-small&#x27;: &#123;</span><br><span class="line">    button: &#x27;w-3 h-3&#x27;,</span><br><span class="line">    icon: &#x27;w-1.5 h-1.5&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const EMITS_CLICK = &#x27;click&#x27; // 常量 - 按钮点击事件</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">/**</span><br><span class="line"> * 1.构建 type 风格可选项和 size 大小可选项</span><br><span class="line"> * 2.通过 props 让开发者控制按钮</span><br><span class="line"> * 3.区分 icon button 和 text button</span><br><span class="line"> * 4.依据当前的数据，实现视图</span><br><span class="line"> * 5.处理点击事件</span><br><span class="line"> */ </span><br><span class="line"> const props = defineProps(&#123;</span><br><span class="line">  icon:  String, // icon 图标名字</span><br><span class="line">  iconColor: String, // icon 图标颜色</span><br><span class="line">  iconClass: String, // icon 图标类名（匹配 tailwind）</span><br><span class="line"></span><br><span class="line">  // 按钮风格</span><br><span class="line">  type: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;main&#x27;,</span><br><span class="line">    validator(val) &#123;</span><br><span class="line">      const keys = Object.keys(typeEnum) // 获取所有的可选的按钮风格</span><br><span class="line">      const result = keys.includes(val) // 开发者指定风格是否在可选风格中</span><br><span class="line">      if (!result) &#123; // 如果不在则给开发者提示</span><br><span class="line">        throw new Error(`你的 type 必须是 $&#123;keys.join(&#x27;、&#x27;)&#125; 中的一个`)</span><br><span class="line">      &#125;</span><br><span class="line">      return result // 返回校验结果</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 大小风格</span><br><span class="line">  size: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;default&#x27;,</span><br><span class="line">    validator(val) &#123;</span><br><span class="line">      // 获取所有的可选的大小（注意剔除 icon 开头的元素，因为我们期望开发者输入 size=&quot;default&quot;，但不期望开发者输入 size=&quot;icon-default&quot;）</span><br><span class="line">      const keys = Object.keys(sizeEnum).filter((key) =&gt; !key.includes(&#x27;icon&#x27;))</span><br><span class="line">      const result = keys.includes(val) // 开发者指定大小是否在可选大小中</span><br><span class="line">      if (!result) &#123; // 如果不在则给开发者提示</span><br><span class="line">        throw new Error(`你的 size 必须是 $&#123;keys.join(&#x27;、&#x27;)&#125; 中的一个`)</span><br><span class="line">      &#125;</span><br><span class="line">      return result // 返回校验结果</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 按钮在点击时是否需要动画</span><br><span class="line">  isActiveAnim: &#123;</span><br><span class="line">    type: Boolean,</span><br><span class="line">    default: true</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 加载状态</span><br><span class="line">  loading: &#123;</span><br><span class="line">    type: Boolean,</span><br><span class="line">    default: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// props.size  处理大小的 key 值</span><br><span class="line">const sizeKey = computed(() =&gt; &#123;</span><br><span class="line">  return props.icon ? &#x27;icon-&#x27; + props.size : props.size</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 按钮点击事件处理</span><br><span class="line"> */</span><br><span class="line"> const onBtnClick = () =&gt; &#123;</span><br><span class="line">  if (props.loading) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  emits(EMITS_CLICK)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="17、通用组件-popover"><a href="#17、通用组件-popover" class="headerlink" title="17、通用组件 popover"></a>17、通用组件 popover</h3><p>通用组件popover应具备以下功能：</p><ul><li>1、指定两个插槽、分别插入触发内容和弹出内容</li><li>2、触发弹出内容的方式分为多种，<code>click</code>、<code>hover</code>、<code>focus</code>、<code>manual</code></li><li>3、可以设定弹出层相对于触发元素的位置 <code>bottom</code>,<code>bottom-start</code>, <code>bottom-end</code>, <code>top</code>, <code>top-start</code>, <code>top-end</code></li><li>4、将弹出层指定挂载到body元素上、并且当页面滚动和页面尺寸发生变化时、弹出层也应虽则触发元素的位置改变而改变</li><li>5、弹出层展示和隐藏时要有过渡效果</li></ul><p><strong>实现思路</strong></p><ul><li>1、对用户指定的属性值进行校验</li><li>2、当页面挂载之后获取父元素的 <strong>宽度</strong>、<strong>高度</strong>、<strong>距离屏幕左边left</strong>、<strong>距离屏幕顶边top</strong></li><li>3、当触发弹出元素显示后，立即获取显示元素的<strong>宽度</strong>、<strong>高度</strong>， 结合触发元素的属性与显示的位置，计算出弹出元素应该显示到的位置 left, top</li><li>4、当页面滚动/尺寸发生改变、重新计算生成新的显示到的位置 left, top</li><li>5、根据触发方式对应的显示和隐藏弹出元素；（注意： 在hover触发下、鼠标触发元素触发弹出元素显示后、然后再移动到显示元素上时，我们需要处理一下，避免弹出层先隐藏再展示的bug; 处理方法可以使用<code>setTimeout</code>延时修改元素的隐藏、在定时器触发之前、如果触发元素的显示、则先清理定时器）</li></ul><h4 id="基础功能实现"><a href="#基础功能实现" class="headerlink" title="基础功能实现"></a>基础功能实现</h4><p>新建<code>libs\popover\index.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;relative&quot; @mouseleave=&quot;onMouseleave&quot; @mouseenter=&quot;onMouseenter&quot;&gt;</span><br><span class="line">      &lt;div ref=&quot;referenceTarget&quot;&gt;</span><br><span class="line">        &lt;!-- 具名插槽：触发弹层的视图 --&gt;</span><br><span class="line">        &lt;slot name=&quot;reference&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 气泡展示动画 --&gt;</span><br><span class="line">      &lt;transition name=&quot;slide&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          v-show=&quot;isVisable&quot;</span><br><span class="line">          ref=&quot;contentTarget&quot;</span><br><span class="line">          class=&quot;absolute p-1 z-20 bg-white dark:bg-zinc-900 border rounded-md dark:border-zinc-700&quot;</span><br><span class="line">          :style=&quot;contentStyle&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;!-- 匿名插槽：弹出层视图中展示的内容 --&gt;</span><br><span class="line">          &lt;slot /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 延迟关闭时长</span><br><span class="line">const DELAY_TIME = 100</span><br><span class="line"></span><br><span class="line">const PROP_TOP_LEFT = &#x27;top-left&#x27;</span><br><span class="line">const PROP_TOP_RIGHT = &#x27;top-right&#x27;</span><br><span class="line">const PROP_BOTTOM_LEFT = &#x27;bottom-left&#x27;</span><br><span class="line">const PROP_BOTTOM_RIGHT = &#x27;bottom-right&#x27;</span><br><span class="line"></span><br><span class="line">// 定义指定位置的 Enum</span><br><span class="line">const placementEnum = [</span><br><span class="line">  PROP_TOP_LEFT,</span><br><span class="line">  PROP_TOP_RIGHT,</span><br><span class="line">  PROP_BOTTOM_LEFT,</span><br><span class="line">  PROP_BOTTOM_RIGHT</span><br><span class="line">]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch, nextTick &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  // 控制气泡弹出位置，并给出开发者错误的提示</span><br><span class="line">  placement: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;bottom-left&#x27;,</span><br><span class="line">    validator(val) &#123;</span><br><span class="line">      const result = placementEnum.includes(val)</span><br><span class="line">      if (!result) &#123;</span><br><span class="line">        throw new Error(</span><br><span class="line">          `你的 placement 必须是 $&#123;placementEnum.join(&#x27;、&#x27;)&#125; 中的一个`</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      return result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 控制 menu 展示</span><br><span class="line">const isVisable = ref(false)</span><br><span class="line"></span><br><span class="line">// 控制延迟关闭</span><br><span class="line">let timeout = null</span><br><span class="line">/**</span><br><span class="line"> * 鼠标移入的触发行为</span><br><span class="line"> */</span><br><span class="line"> const onMouseenter = () =&gt; &#123;</span><br><span class="line">  isVisable.value = true</span><br><span class="line">  // 再次触发时，清理延时装置</span><br><span class="line">  if (timeout) &#123;</span><br><span class="line">    clearTimeout(timeout)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 鼠标移出的触发行为</span><br><span class="line"> */</span><br><span class="line">const onMouseleave = () =&gt; &#123;</span><br><span class="line">  // 延时装置</span><br><span class="line">  timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">    isVisable.value = false</span><br><span class="line">    timeout = null</span><br><span class="line">  &#125;, DELAY_TIME)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 计算元素尺寸</span><br><span class="line"> */</span><br><span class="line"> const referenceTarget = ref(null)</span><br><span class="line">const contentTarget = ref(null)</span><br><span class="line">const useElementSize = (target) =&gt; &#123;</span><br><span class="line">  if (!target) return &#123;&#125;</span><br><span class="line">  return &#123;</span><br><span class="line">    width: target.offsetWidth,</span><br><span class="line">    height: target.offsetHeight</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 计算弹层位置</span><br><span class="line"> */</span><br><span class="line">const contentStyle = ref(&#123;</span><br><span class="line">  top: 0,</span><br><span class="line">  left: 0</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 监听展示的变化，在展示时计算气泡位置</span><br><span class="line"> */</span><br><span class="line">watch(isVisable, (val) =&gt; &#123;</span><br><span class="line">  if (!val) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  // 等待渲染成功之后</span><br><span class="line">  nextTick(() =&gt; &#123;</span><br><span class="line">    switch (props.placement) &#123;</span><br><span class="line">      // 左上</span><br><span class="line">      case PROP_TOP_LEFT:</span><br><span class="line">        contentStyle.value.top = 0</span><br><span class="line">        contentStyle.value.left =</span><br><span class="line">          -useElementSize(contentTarget.value).width + &#x27;px&#x27;</span><br><span class="line">        break</span><br><span class="line">      // 右上</span><br><span class="line">      case PROP_TOP_RIGHT:</span><br><span class="line">        contentStyle.value.top = 0</span><br><span class="line">        contentStyle.value.left =</span><br><span class="line">          useElementSize(referenceTarget.value).width + &#x27;px&#x27;</span><br><span class="line">        break</span><br><span class="line">      // 左下</span><br><span class="line">      case PROP_BOTTOM_LEFT:</span><br><span class="line">        contentStyle.value.top =</span><br><span class="line">          useElementSize(referenceTarget.value).height + &#x27;px&#x27;</span><br><span class="line">        contentStyle.value.left =</span><br><span class="line">          -useElementSize(contentTarget.value).width + &#x27;px&#x27;</span><br><span class="line">        break</span><br><span class="line">      // 右下</span><br><span class="line">      case PROP_BOTTOM_RIGHT:</span><br><span class="line">        contentStyle.value.top =</span><br><span class="line">          useElementSize(referenceTarget.value).height + &#x27;px&#x27;</span><br><span class="line">        contentStyle.value.left =</span><br><span class="line">          useElementSize(referenceTarget.value).width + &#x27;px&#x27;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">// slide 展示动画</span><br><span class="line">.slide-enter-active,</span><br><span class="line">.slide-leave-active &#123;</span><br><span class="line">  transition: opacity 0.3s, transform 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-enter-from,</span><br><span class="line">.slide-leave-to &#123;</span><br><span class="line">  transform: translateY(20px);</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="组件使用：主题切换"><a href="#组件使用：主题切换" class="headerlink" title="组件使用：主题切换"></a>组件使用：主题切换</h4><p>在<code>constants\index.js</code>中添加主题常量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暗黑主题 - 极夜黑</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">THEME_DARK</span> = <span class="string">&#x27;dark&#x27;</span></span><br><span class="line"><span class="comment">// 浅色主题 - 极简白</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">THEME_LIGHT</span> = <span class="string">&#x27;light&#x27;</span></span><br><span class="line"><span class="comment">// 系统主题 - 跟随系统</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">THEME_SYSTEM</span> = <span class="string">&#x27;system&#x27;</span></span><br></pre></td></tr></table></figure><p>在<code>view\layout\components\header\header-theme.vue</code>中使用popover组件实现主题切换功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;m-popover&gt;</span><br><span class="line">    &lt;!-- 具名插槽：触发弹层的视图 --&gt;</span><br><span class="line">    &lt;template #reference&gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        :name=&quot;svgIconName&quot;</span><br><span class="line">        class=&quot;guide-theme w-4 h-4 p-1 cursor-pointer rounded-sm duration-200 outline-none hover:bg-zinc-100/60 dark:hover:bg-zinc-900&quot;</span><br><span class="line">        fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">      &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- 匿名插槽：弹出层视图中展示的内容 --&gt;</span><br><span class="line">    &lt;div class=&quot;w-[140px] overflow-hidden&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;flex items-center p-1 cursor-pointer rounded hover:bg-zinc-100/60 dark:hover:bg-zinc-800&quot;</span><br><span class="line">        v-for=&quot;item in themeArr&quot;</span><br><span class="line">        :key=&quot;item.id&quot;</span><br><span class="line">        @click=&quot;onItemClick(item)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          :name=&quot;item.icon&quot;</span><br><span class="line">          class=&quot;w-1.5 h-1.5 mr-1&quot;</span><br><span class="line">          fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;span class=&quot;text-zinc-800 dark:text-zinc-300 text-sm&quot;&gt;</span><br><span class="line">          &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/m-popover&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; THEME_DARK, THEME_LIGHT, THEME_SYSTEM &#125; from &#x27;@/constants&#x27;</span><br><span class="line"></span><br><span class="line">// 构建渲染数据源</span><br><span class="line">const themeArr = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;0&#x27;,</span><br><span class="line">    type: THEME_LIGHT,</span><br><span class="line">    icon: &#x27;theme-light&#x27;,</span><br><span class="line">    name: &#x27;极简白&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;1&#x27;,</span><br><span class="line">    type: THEME_DARK,</span><br><span class="line">    icon: &#x27;theme-dark&#x27;,</span><br><span class="line">    name: &#x27;极夜黑&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;2&#x27;,</span><br><span class="line">    type: THEME_SYSTEM,</span><br><span class="line">    icon: &#x27;theme-system&#x27;,</span><br><span class="line">    name: &#x27;跟随系统&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="鼠标慢速移动时，处理气泡消失问题"><a href="#鼠标慢速移动时，处理气泡消失问题" class="headerlink" title="鼠标慢速移动时，处理气泡消失问题"></a>鼠标慢速移动时，处理气泡消失问题</h4><p>​    气泡消失是因为在 reference 与 气泡 之间存在间隙，当鼠标移动到这个间隙处时，就会触发mouseleave 鼠标移出事件，那么此时isVisable 就会变为 false。</p><p>可以利用 <strong>类似于防抖（debounce）</strong>概念<br>    <strong>鼠标刚离开时，不立刻修改 isVisable，而是延迟一段时间，如果在这段时间之内，再次触发了鼠标移入事件，则不再修改 isViable</strong></p><p>1.定义延迟关闭时长</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延迟关闭时长</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DELAY_TIME</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure><p>2.通过定时器，处理延迟关闭</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制延迟关闭</span></span><br><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鼠标移入的触发行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">onMouseenter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isVisable.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 再次触发时，清理延时装置</span></span><br><span class="line">  <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鼠标移出的触发行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onMouseleave</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 延时装置</span></span><br><span class="line">  timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    isVisable.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">    timeout = <span class="literal">null</span></span><br><span class="line">  &#125;, <span class="variable constant_">DELAY_TIME</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件使用：个人中心"><a href="#组件使用：个人中心" class="headerlink" title="组件使用：个人中心"></a>组件使用：个人中心</h4><p>在<code>view\layout\components\header\header-my.vue</code>中实现用户中心显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;m-popover class=&quot;flex items-center&quot; placement=&quot;bottom-left&quot;&gt;</span><br><span class="line">    &lt;template #reference&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;guide-my relative flex items-center p-0.5 rounded-sm cursor-pointer duration-200 outline-none hover:bg-zinc-100 dark:hover:bg-zinc-900&quot;</span><br><span class="line">      &gt;</span><br><span class="line">      </span><br><span class="line">        &lt;!-- 用户头像 --&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          class=&quot;w-3 h-3 rounded-sm&quot;</span><br><span class="line">          src=&quot;https://cn.bing.com/images/search?view=detailV2&amp;ccid=aVWH7Tes&amp;id=3FC731F85EB45885B3A3BEB73C3F77C7393FEC3C&amp;thid=OIP.aVWH7TesrK94UHrFv6aksAHaHa&amp;mediaurl=https%3a%2f%2fstatic.aisnogames.com%2faisnoweb%2fcn%2faisno%2faisno-web%2faisno.png&amp;exph=474&amp;expw=474&amp;q=%e6%ad%a6%e5%99%a8%e8%bf%b7%e9%80%94%e5%a4%b4%e5%83%8f&amp;simid=608015766186321973&amp;FORM=IRPRST&amp;ck=E3B149C9B8FE258A8F818BBC7A663998&amp;selectedIndex=64&amp;itb=0&amp;ajaxhist=0&amp;ajaxserp=0&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 用户头像右边下箭头 --&gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          class=&quot;h-1.5 w-1.5 ml-0.5&quot;</span><br><span class="line">          name=&quot;down-arrow&quot;</span><br><span class="line">          fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- vip 标记 --&gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          name=&quot;vip&quot;</span><br><span class="line">          class=&quot;w-1.5 h-1.5 absolute right-[16px] bottom-0&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 气泡框 --&gt;</span><br><span class="line">    &lt;div class=&quot;w-[140px] overflow-hidden&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;flex items-center p-1 cursor-pointer rounded hover:bg-zinc-100/60 dark:hover:bg-zinc-800&quot;</span><br><span class="line">        v-for=&quot;item in menuArr&quot;</span><br><span class="line">        :key=&quot;item.id&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          :name=&quot;item.icon&quot;</span><br><span class="line">          class=&quot;w-1.5 h-1.5 mr-1&quot;</span><br><span class="line">          fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;span class=&quot;text-zinc-800 dark:text-zinc-300 text-sm&quot;&gt;</span><br><span class="line">          &#123;&#123; item.title&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/m-popover&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 构建 menu 数据源</span><br><span class="line">const menuArr = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: 0,</span><br><span class="line">    title: &#x27;个人资料&#x27;,</span><br><span class="line">    icon: &#x27;profile&#x27;,</span><br><span class="line">    path: &#x27;/profile&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: 1,</span><br><span class="line">    title: &#x27;升级 VIP&#x27;,</span><br><span class="line">    icon: &#x27;vip-profile&#x27;,</span><br><span class="line">    path: &#x27;/member&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: 2,</span><br><span class="line">    title: &#x27;退出登录&#x27;,</span><br><span class="line">    icon: &#x27;logout&#x27;,</span><br><span class="line">    path: &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="18、响应式下-navigationBar-的实现"><a href="#18、响应式下-navigationBar-的实现" class="headerlink" title="18、响应式下 navigationBar 的实现"></a>18、响应式下 navigationBar 的实现</h3><h4 id="实现方案分析"><a href="#实现方案分析" class="headerlink" title="实现方案分析"></a>实现方案分析</h4><p>通常情况下 复杂功能的响应式处理，一般有三种处理方案:</p><ol><li>一套代码处理多端：<ol><li>优势：代码量相对比较少</li><li>劣势：耦合性强，不利于后期维护</li></ol></li><li>多套代码分别处理各端：<ol><li>优势：逻辑清晰</li><li>劣势：可能会产生很多重复的逻辑</li></ol></li><li>结合以上两种方案，<strong>抽离公用逻辑，封装私有逻辑</strong>：<ol><li>优势：结合以上两点优势</li><li>劣势：需要对业务和逻辑足够清楚<br>项目 navigationBar 通过第三种方式来去进行实现。</li></ol></li></ol><p>一个功能由两部分组成：数据 和 视图</p><ol><li>数据<br> 移动端和 PC端的数据是一样的，这一块是完全可以复用的。目前的数据是通过 <code>src/views/main/components/navigation/index.vue</code> 获取，然后进行传递的。那么进行数据的复用，如果一直进行数据传递的话，未免有些过于复杂了。所以对于数据，可以直接通过<code>vuex</code>来封装这一系列的 <strong>获取、切换</strong> 行为。</li><li><p>视图<br> 移动端和 PC端的视图在展示中的逻辑具备较大差异，为了综合可维护性，视图逻辑部分我们期望单独封装到各自的组件中来进行处理。</p><p>navigationBar 的公有和私有部分：</p><ol><li>数据为公有数据，可以在 vuex 中进行抽离处理。</li><li>视图为私有部分，需要在各自的组件中进行单独处理。</li></ol></li></ol><h4 id="在vuex中封装数据"><a href="#在vuex中封装数据" class="headerlink" title="在vuex中封装数据"></a>在<code>vuex</code>中封装数据</h4><ol><li><code>store\index.js</code>完成vuex初始化</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> category <span class="keyword">from</span> <span class="string">&#x27;./modules/category&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    category</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol><li><code>main.js</code>中注册</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">useREM</span>()</span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(store).<span class="title function_">use</span>(mLibs).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>新建<code>store\modules\category.js</code>处理 navigationBar 中的数据 categorys</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCategory &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/category&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ALL_CATEGORY_ITEM</span>, <span class="variable constant_">CATEGORY_NOMAR_DATA</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 独立作用域</span></span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// navigationBar 展示的数据源</span></span><br><span class="line">    <span class="attr">categorys</span>: <span class="variable constant_">CATEGORY_NOMAR_DATA</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为 categorys 赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setCategorys</span>(<span class="params">state, categorys</span>) &#123;</span><br><span class="line">      state.<span class="property">categorys</span> = [<span class="variable constant_">ALL_CATEGORY_ITEM</span>, ...categorys]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 category 数据，并自动保存到 vuex 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">useCategoryData</span>(<span class="params">context</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; categorys &#125; = <span class="keyword">await</span> <span class="title function_">getCategory</span>()</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;setCategorys&#x27;</span>, categorys)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>store\getters.js</code>实现简单访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 简单访问</span></span><br><span class="line">    <span class="attr">categorys</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">category</span>.<span class="property">categorys</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>将<code>mobile\index.vue</code>和<code>navigation\index.vue</code>使用categorys数据的地方更换为<code>$store.getters.categorys</code></p><p><code>navigation\index.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;mobileNavigationVue v-if=&quot;isMobileTerminal&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import mobileNavigationVue from &#x27;./mobile/index.vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">const store = useStore()</span><br><span class="line">// 触发 category 数据获取动作</span><br><span class="line">store.dispatch(&#x27;category/useCategoryData&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>mobile\index.vue</code>：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;bg-white sticky top-0 left-0 z-10&quot;&gt;</span><br><span class="line">    &lt;ul</span><br><span class="line">        ref=&quot;ulTarget&quot;</span><br><span class="line">        class=&quot;relative flex overflow-x-auto p-1 text-xs text-zinc-600 overflow-hidden&quot; </span><br><span class="line">    &gt; </span><br><span class="line">        &lt;!-- 顶部分类导航条 - item --&gt;</span><br><span class="line">        &lt;li </span><br><span class="line">            v-for=&quot;(item, index) in $store.getters.categorys&quot;</span><br><span class="line">            :key=&quot;item.id&quot;</span><br><span class="line">            class=&quot;shrink-0 px-1.5 py-0.5 z-10 duration-200 last:mr-4&quot;</span><br><span class="line">            :class=&quot;&#123;&#x27;text-zinc-100&#x27; : currentCategoryIndex === index&#125;&quot;</span><br><span class="line">            :ref=&quot;setItemRef&quot;</span><br><span class="line">            @click=&quot;onItemClick(index)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">            &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!-- 顶部导航条右侧 汉堡按钮 - 弹出层 --&gt;</span><br><span class="line">    &lt;m-popup v-model=&quot;isVisable&quot;&gt;</span><br><span class="line">        &lt;MenuVue @onItemClick=&quot;onItemClick&quot;&gt;&lt;/MenuVue&gt;</span><br><span class="line">    &lt;/m-popup&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onBeforeUpdate, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useScroll &#125; from &#x27;@vueuse/core&#x27;;</span><br><span class="line">import MenuVue from &#x27;@/view/main/components/menu/index.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="PC端下的基本展示"><a href="#PC端下的基本展示" class="headerlink" title="PC端下的基本展示"></a>PC端下的基本展示</h4><p><code>navigation\pc\index.vue</code>中实现基本布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;bg-white dark:bg-zinc-800 duration-500 sticky top-0 left-0 w-full z-10&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;ul</span><br><span class="line">        class=&quot;w-[800px] relative flex flex-wrap justify-center overflow-x-auto px-[10px] py-1 text-xs text-zinc-600 duration-300 overflow-hidden mx-auto&quot;</span><br><span class="line">        :class=&quot;[isOpenCategoty ? &#x27;h-[206px]&#x27; : &#x27;h-[56px]&#x27;]&quot;</span><br><span class="line">      &gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- lg 下展开箭头 --&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;absolute right-1 bottom-1 z-20 p-1 rounded cursor-pointer duration-200 hover:bg-zinc-200 dark:hover:bg-zinc-900&quot;</span><br><span class="line">          @click=&quot;triggerState&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;m-svg-icon</span><br><span class="line">            :name=&quot;isOpenCategoty ? &#x27;fold&#x27; : &#x27;unfold&#x27;&quot;</span><br><span class="line">            class=&quot;w-1 h-1&quot;</span><br><span class="line">            fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">          &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- category item --&gt;</span><br><span class="line">        &lt;li</span><br><span class="line">          v-for=&quot;(item, index) in $store.getters.categorys&quot;</span><br><span class="line">          :key=&quot;item.id&quot;</span><br><span class="line">          class=&quot;shrink-0 px-1.5 py-0 z-10 duration-200 last:mr-4 text-zinc-900 dark:text-zinc-500 dark:hover:text-zinc-300 text-base font-bold h-4 leading-4 cursor-pointer hover:bg-zinc-200 dark:hover:bg-zinc-900 rounded mr-1 mb-1&quot;</span><br><span class="line">          :class=&quot;&#123;</span><br><span class="line">            &#x27;text-zinc-900 dark:text-zinc-300 bg-zinc-200 dark:bg-zinc-900&#x27;:</span><br><span class="line">              $store.getters.currentCategoryIndex === index</span><br><span class="line">          &#125;&quot;</span><br><span class="line">          @click=&quot;onItemClick(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script setup&gt;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">  </span><br><span class="line">  const store = useStore()</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 状态切换处理 - 展开 收起</span><br><span class="line">   */</span><br><span class="line">  const isOpenCategoty = ref(false)</span><br><span class="line">  const triggerState = () =&gt; &#123;</span><br><span class="line">    isOpenCategoty.value = !isOpenCategoty.value</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 选中状态处理 - 高亮</span><br><span class="line">   */</span><br><span class="line">  const currentCategoryIndex = ref(0)</span><br><span class="line">  const onItemClick = (index) =&gt; &#123;</span><br><span class="line">    currentCategoryIndex.value = index</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在<code>navigation\index.vue</code>进行按需渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;mobileNavigationVue v-if=&quot;isMobileTerminal&quot; /&gt;</span><br><span class="line">    &lt;pcNavigationVue v-else /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; isMobileTerminal &#125; from &#x27;@/utils/flexible&#x27;</span><br><span class="line">import mobileNavigationVue from &#x27;./mobile/index.vue&#x27;</span><br><span class="line">import pcNavigationVue from &#x27;./pc/index.vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">const store = useStore()</span><br><span class="line">// 触发 category 数据获取动作</span><br><span class="line">store.dispatch(&#x27;category/useCategoryData&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>layout\components\main.vue</code>中指定pc端下二级路由出口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在<code>router\modules\pc-route.js</code>中添加路由路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/layout/index.vue&#x27;</span>),</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/main/index.vue&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="解决闪烁问题"><a href="#解决闪烁问题" class="headerlink" title="解决闪烁问题"></a>解决闪烁问题</h4><p>​    在用户刷新页面时，PC端<code>navigationBar</code>会出现闪动的情况，即一开始只出现<code>全部</code>,随之（获取完数据）才会展示<code>全部</code>和所有分类。</p><p><strong>问题原因</strong>：<code>navigationBar</code>的数据是从服务端来进行获取的，在最初渲染页面时，一开始展示的是<code>vuex</code>中保存的最初的<code>category</code>数据，而最初的<code>category</code>数据只有一个<code>全部</code>，展示完之后就会尝试从服务端获取数据，在数据获取完成之后，才会展示所有内容。</p><p><strong>解决方案</strong>：</p><ol><li><p>让 categorys 具备一个初始化数据</p></li><li><p>从服务端获取数据，替换初始化数据</p></li><li><p>为了防止初始化数据太老，把每次获取到的新数据，都作为下一<br> 次的初始化数据</p><p>第三步方案：每次从接口得到的数据，进行缓存。在下次运行时，把缓存的数据作为初始值</p></li></ol><p>在<code>constants\index.js</code>中构建<code>category</code>的初始化数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// category 的本地构建数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ALL_CATEGORY_ITEM</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;全部&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  category 的初始化数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">CATEGORY_NOMAR_DATA</span> = [</span><br><span class="line">    <span class="variable constant_">ALL_CATEGORY_ITEM</span>,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;web_app_icon&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;UI/UX&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;design&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;平面&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;illustration&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;插画/漫画&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;photography&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;摄影&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;games&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;游戏&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;anime&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;动漫&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;industrial_design&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;工业设计&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;industrial_design&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;建筑设计&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;industrial_design&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;人文艺术&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;industrial_design&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;家居/家装&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p><code>store\modules\category.js</code>中将<code>categorys: ALL_CATEGORY_ITEM</code>修改为<code>categorys: CATEGORY_NOMAR_DATA</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCategory &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/category&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ALL_CATEGORY_ITEM</span>, <span class="variable constant_">CATEGORY_NOMAR_DATA</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 独立作用域</span></span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// navigationBar 展示的数据源</span></span><br><span class="line">    <span class="attr">categorys</span>: <span class="variable constant_">CATEGORY_NOMAR_DATA</span></span><br><span class="line">  &#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上述解决方案中的第三步，使用<code>vuex-persistedstate</code>  将每次从接口得到的数据，进行缓存。在下次运行时，把缓存的数据作为初始值</p><p>第三方插件：<a href="https://github.com/robinvdvleuten/vuex-persistedstate">vuex-persistedstate</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">--save</span> vuex<span class="literal">-persistedstate</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> category <span class="keyword">from</span> <span class="string">&#x27;./modules/category&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    category</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;imooc-front&#x27;</span>, <span class="comment">// 保存到 localStorage 中的 key</span></span><br><span class="line">      <span class="attr">paths</span>: [<span class="string">&#x27;category&#x27;</span>]<span class="comment">// 需要保存的模块</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h3 id="19、实现主题切换"><a href="#19、实现主题切换" class="headerlink" title="19、实现主题切换"></a>19、实现主题切换</h3><p>原理： <strong>通过类名的切换使html元素在不同类名下展示不同的样式（主题）</strong></p><p><strong>实现思路</strong>：（此方案基于tailwindcss插件）</p><ul><li><p>1、将当前主题类型存储在vuex中</p></li><li><p>2、当切换主题时修改vuex中的主题类型</p></li><li><p>3、监听主题类型的变化： theme-light 、 theme-dark 、theme-system、给html标签动态设置class的属性值</p></li><li><p>4、html的class属性值变化后会匹配到对应主题的class、从而展示出来对应的主题的颜色</p></li><li><p>5、给标签设置两套的类名：白色一套、暗色一套</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-zinc-300 dark:bg-zinc-900&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="极简白和极夜黑"><a href="#极简白和极夜黑" class="headerlink" title="极简白和极夜黑"></a>极简白和极夜黑</h4><p>vuex中配置<code>store\modules\theme.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">THEME_LIGHT</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 当前主题模式</span></span><br><span class="line">    <span class="attr">themeType</span>: <span class="variable constant_">THEME_LIGHT</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">//  切换主题模式</span></span><br><span class="line">    <span class="title function_">changeThemeType</span>(<span class="params">state, newTheme</span>) &#123;</span><br><span class="line">      state.<span class="property">themeType</span> = newTheme</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>store\index.js</code>中注册<code>theme</code>模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> category <span class="keyword">from</span> <span class="string">&#x27;./modules/category&#x27;</span></span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">&#x27;./modules/theme&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    category,theme</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;imooc-front&#x27;</span>, <span class="comment">// 保存到 localStorage 中的 key</span></span><br><span class="line">      <span class="attr">paths</span>: [<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;theme&#x27;</span>]<span class="comment">// 需要保存的模块</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>在<code>store\getter.js</code>中创建当前主题的快捷访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 简单访问</span></span><br><span class="line">    <span class="attr">categorys</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">category</span>.<span class="property">categorys</span>,</span><br><span class="line">    <span class="attr">theme</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">theme</span>.<span class="property">themeType</span>, <span class="comment">//当前主题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.监听主题的切换行为<br>2.根据行为保存当前需要展示的主题到 vuex 中<br>3.根据 vuex 中保存的当前主题，展示 header-theme 下的显示图标<br>4.根据 vuex 中保存的当前主题，修改 html的 class</p><p><strong>header-theme.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;m-popover placement=&quot;bottom-left&quot;&gt;</span><br><span class="line">    &lt;!-- 具名插槽：触发弹层的视图 --&gt;</span><br><span class="line">    &lt;template #reference&gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        :name=&quot;svgIconName&quot;</span><br><span class="line">        class=&quot;guide-theme w-4 h-4 p-1 cursor-pointer rounded-sm duration-200 outline-none hover:bg-zinc-100/60 dark:hover:bg-zinc-900&quot;</span><br><span class="line">        fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">      &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 匿名插槽：弹出层视图中展示的内容 --&gt;</span><br><span class="line">    &lt;div class=&quot;w-[140px] overflow-hidden&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;flex items-center p-1 cursor-pointer rounded hover:bg-zinc-100/60 dark:hover:bg-zinc-800&quot;</span><br><span class="line">        v-for=&quot;item in themeArr&quot;</span><br><span class="line">        :key=&quot;item.id&quot;</span><br><span class="line">        @click=&quot;onItemClick(item)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          :name=&quot;item.icon&quot;</span><br><span class="line">          class=&quot;w-1.5 h-1.5 mr-1&quot;</span><br><span class="line">          fillClass=&quot;fill-zinc-900 dark:fill-zinc-300&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;span class=&quot;text-zinc-800 dark:text-zinc-300 text-sm&quot;&gt;</span><br><span class="line">          &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/m-popover&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; THEME_DARK, THEME_LIGHT, THEME_SYSTEM &#125; from &#x27;@/constants&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 构建渲染数据源</span><br><span class="line">const themeArr = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;0&#x27;,</span><br><span class="line">    type: THEME_LIGHT,</span><br><span class="line">    icon: &#x27;theme-light&#x27;,</span><br><span class="line">    name: &#x27;极简白&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;1&#x27;,</span><br><span class="line">    type: THEME_DARK,</span><br><span class="line">    icon: &#x27;theme-dark&#x27;,</span><br><span class="line">    name: &#x27;极夜黑&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: &#x27;2&#x27;,</span><br><span class="line">    type: THEME_SYSTEM,</span><br><span class="line">    icon: &#x27;theme-system&#x27;,</span><br><span class="line">    name: &#x27;跟随系统&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 1.监听主题的切换行为</span><br><span class="line">// 2.根据行为保存当前需要展示的主题到 vuex 中</span><br><span class="line">// 3.根据 vuex 中保存的当前主题，展示 header-theme 下的显示图标</span><br><span class="line">// 4.根据 vuex 中保存的当前主题，修改 html的 class</span><br><span class="line"></span><br><span class="line">// 控制图标展示</span><br><span class="line">const store = useStore()</span><br><span class="line">const svgIconName = computed(() =&gt; &#123;</span><br><span class="line">  // 根据当前的 themeType 返回当前的选中 icon</span><br><span class="line">  const findTheme = themeArr.find((theme) =&gt; &#123;</span><br><span class="line">    return theme.type === store.getters.themeType</span><br><span class="line">  &#125;)</span><br><span class="line">  return findTheme?.icon || themeArr[0].type</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// menu 切换事件</span><br><span class="line">const onItemClick = (theme) =&gt; &#123;</span><br><span class="line">  store.commit(&#x27;theme/changeThemeType&#x27;, theme.type)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在<strong>utils/theme.js</strong>中创建工具类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">THEME_LIGHT</span>, <span class="variable constant_">THEME_DARK</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化主题</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1.当主题发生改变时，或者当进入系统时，可以进行 html class 的配置</span></span><br><span class="line">  <span class="title function_">watch</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    store.<span class="property">getters</span>.<span class="property">themeType</span>, </span><br><span class="line">    <span class="function">(<span class="params">theme</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// html 的 class</span></span><br><span class="line">      <span class="keyword">let</span> themeClassName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">switch</span> (theme) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">THEME_LIGHT</span>:</span><br><span class="line">          themeClassName = <span class="string">&#x27;light&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="attr">THEME_DARK</span>:</span><br><span class="line">          themeClassName = <span class="string">&#x27;dark&#x27;</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 修改 html 的 class</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>).<span class="property">className</span> = themeClassName</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 初始执行一次</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跟随系统变更主题"><a href="#跟随系统变更主题" class="headerlink" title="跟随系统变更主题"></a>跟随系统变更主题</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia">Window.matchMedia()</a>方法返回一个新的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList"><code>MediaQueryList</code></a> 对象，表示指定的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">媒体查询 (en-US)</a>字符串解析后的结果。返回的<code>MediaQueryList</code> 可被用于判定<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a>是否匹配媒体查询，或者监控一个<code>document</code> 来判定它匹配了或者停止匹配了此媒体查询。</p><p>可以使用返回的媒体查询来执行即时检查和事件驱动检查，以查看文档是否与媒体查询匹配。</p><p>要执行一次瞬时检查以查看文档是否与媒体查询匹配，请查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList/matches"><code>matches</code></a>属性的值，当 document 满足媒体查询条件的时候将会返回<code>true</code>。</p><p>想要生成跟随系统的主题变更，就需要 <strong>监听系统的主题变化</strong>。可以利用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia">Window.matchMedia()</a>方法，该方法接收一个 <code>mediaQueryString</code>(<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">媒体查询 (en-US)</a>解析的字符串)，该字符串可以传递 prefers-color-scheme，即 <code>window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;)</code>方法<br>该方法可以返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList"><code>MediaQueryList</code></a>  对象：</p><ol><li><p>该对象存在一个 shange 事件，可以监听 主题发生变更 的行为。</p></li><li><p>同时存在一个 matches 属性，该属性为 boolean 性的值:</p><ol><li><p>true ：深色主题</p></li><li><p>false ：浅色主题</p></li></ol></li></ol><p>那么据此，可生成以下代码。在<code>src/utils/theme.js</code> 中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">THEME_LIGHT</span>, <span class="variable constant_">THEME_DARK</span>, <span class="variable constant_">THEME_SYSTEM</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听系统主题变更</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> matchMedia</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">watchSystemThemeChange</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 仅需初始化一次即可</span></span><br><span class="line">  <span class="keyword">if</span> (matchMedia) <span class="keyword">return</span></span><br><span class="line">  matchMedia = <span class="variable language_">window</span>.<span class="title function_">matchMedia</span>(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>)</span><br><span class="line">  <span class="comment">// 监听主题变更</span></span><br><span class="line">  matchMedia.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">changeTheme</span>(<span class="variable constant_">THEME_SYSTEM</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 变更主题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; theme 主题的标记常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeTheme</span> = (<span class="params">theme</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> themeClassName = <span class="string">&#x27;&#x27;</span> <span class="comment">// html 的 class</span></span><br><span class="line">  <span class="keyword">switch</span> (theme) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">THEME_LIGHT</span>:</span><br><span class="line">      themeClassName = <span class="string">&#x27;light&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="attr">THEME_DARK</span>:</span><br><span class="line">      themeClassName = <span class="string">&#x27;dark&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="attr">THEME_SYSTEM</span>:</span><br><span class="line">      <span class="comment">// 调用方法，监听系统主题变化</span></span><br><span class="line">      <span class="title function_">watchSystemThemeChange</span>()</span><br><span class="line">      themeClassName = matchMedia.<span class="property">matches</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 修改 html 的 class</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>).<span class="property">className</span> = themeClassName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化主题</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1.当主题发生改变时，或者当进入系统时，可以进行 html class 的配置</span></span><br><span class="line">  <span class="title function_">watch</span>(<span class="function">() =&gt;</span> </span><br><span class="line">    store.<span class="property">getters</span>.<span class="property">themeType</span>,</span><br><span class="line">    changeTheme,</span><br><span class="line">    &#123; <span class="comment">// 初始执行一次</span></span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20、实现瀑布流布局"><a href="#20、实现瀑布流布局" class="headerlink" title="20、实现瀑布流布局"></a>20、实现瀑布流布局</h3><h4 id="构建基础列表展示"><a href="#构建基础列表展示" class="headerlink" title="构建基础列表展示"></a>构建基础列表展示</h4><p><code>api\pexels.js</code>获取图片列表数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取图片数据列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getPexelsList</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pexels/list&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>view\main\components\list</code>下的<code>item.vue</code>和<code>index.vue</code></p><p><code>index.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;item-vue v-for=&quot;item in pexelsList&quot; :key=&quot;item.id&quot; :data=&quot;item&quot;&gt;&lt;/item-vue&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; getPexelsList &#125; from &#x27;@/api/pexels&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import itemVue from &#x27;./item.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 构建数据请求</span><br><span class="line">let query = &#123;</span><br><span class="line">  page: 1,</span><br><span class="line">  size: 20,</span><br><span class="line">  categoryId: &#x27;&#x27;,</span><br><span class="line">  searchText: &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加载数据的方法</span><br><span class="line">const pexelsList = ref([]) // 数据源</span><br><span class="line">const getPexelsData = async () =&gt; &#123;</span><br><span class="line">  const res = await getPexelsList(query)</span><br><span class="line">  pexelsList.value = res.list</span><br><span class="line">&#125;</span><br><span class="line">getPexelsData()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>item.vue</code>：单个图片的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;bg-white dark:bg-zinc-900 xl:dark:bg-zinc-800 rounded pb-1&quot; h-[280px] w-[230px]&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;relative w-full rounded cursor-zoom-in group&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 图片 --&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          class=&quot;w-full rounded bg-transparent&quot;</span><br><span class="line">          :src=&quot;data.photo&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;!-- 遮罩层 --&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;hidden opacity-0 w-full h-full bg-zinc-900/50 absolute top-0 left-0 rounded duration-300 group-hover:opacity-100 xl:block&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;!-- 图片内按钮 - 分享 --&gt;</span><br><span class="line">          &lt;m-button class=&quot;absolute top-1.5 left-1.5&quot; @click=&quot;onShareClick&quot;&gt;</span><br><span class="line">            分享</span><br><span class="line">          &lt;/m-button&gt;</span><br><span class="line">          &lt;!-- 图片内按钮 - 点赞 --&gt;</span><br><span class="line">          &lt;m-button</span><br><span class="line">            class=&quot;absolute top-1.5 right-1.5&quot;</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            icon=&quot;heart&quot;</span><br><span class="line">            iconClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;!-- 图片内按钮 - 下载 --&gt;</span><br><span class="line">          &lt;m-button</span><br><span class="line">            class=&quot;absolute bottom-1.5 left-1.5 bg-zinc-100/70&quot;</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            size=&quot;small&quot;</span><br><span class="line">            icon=&quot;download&quot;</span><br><span class="line">            iconClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">            @click=&quot;onDownload&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;!-- 图片内按钮 - 全屏 --&gt;</span><br><span class="line">          &lt;m-button</span><br><span class="line">            class=&quot;absolute bottom-1.5 right-1.5 bg-zinc-100/70&quot;</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            size=&quot;small&quot;</span><br><span class="line">            icon=&quot;full&quot;</span><br><span class="line">            iconClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">            @click=&quot;onImgFullScreen&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 标题 --&gt;</span><br><span class="line">      &lt;p</span><br><span class="line">        class=&quot;text-sm mt-1 font-bold text-zinc-900 dark:text-zinc-300 line-clamp-2 px-1&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123; data.title &#125;&#125;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">      &lt;!-- 作者：头像 姓名 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex items-center mt-1 px-1&quot;&gt;</span><br><span class="line">        &lt;img v-lazy class=&quot;h-2 w-2 rounded-full&quot; :src=&quot;data.avatar&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">        &lt;span class=&quot;text-sm text-zinc-500 ml-1&quot;&gt;</span><br><span class="line">            &#123;&#123; data.author &#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在<code>view\main\index.vue</code>导入<code>item.vue</code>和<code>index.vue</code>组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">      class=&quot;h-full overflow-auto bg-white dark:bg-zinc-800 duration-500 scrollbar-thin scrollbar-thumb-transparent xl:scrollbar-thumb-zinc-200 xl:dark:scrollbar-thumb-zinc-900 scrollbar-track-transparent&quot;</span><br><span class="line">      ref=&quot;containerTarget&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;navigationVue /&gt;</span><br><span class="line">      &lt;div class=&quot;max-w-screen-xl mx-auto relative m-1 xl:mt-4&quot;&gt;</span><br><span class="line">        &lt;list-vue&gt;&lt;/list-vue&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import navigationVue from &#x27;./components/navigation/index.vue&#x27;</span><br><span class="line">import listVue from &#x27;./components/list/index.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="瀑布流组件构建分析"><a href="#瀑布流组件构建分析" class="headerlink" title="瀑布流组件构建分析"></a>瀑布流组件构建分析</h4><p>目前图片列表组件展示存在的问题就是：<strong>每个 item 应该横向排列，第二行的 item 顺序连接到当前最短的列中</strong>，而这个就是构建瀑布流的核心逻辑。<br>想要实现这个核心逻辑，每个 item 就不能使用正常的布局方式，而必须使用 absolute 绝对布局，并通过 top 和left 来手动控制位置,</p><p>那么我们期望，将来这个通用组件可以这样使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-waterfall</span><br><span class="line">  :data=&quot;&quot; //数据源</span><br><span class="line">  :nodeKey=&quot;&quot; // 唯一标识的Key</span><br><span class="line">  :column=&quot;&quot; // 渲染的列数</span><br><span class="line">  :picturePreReading=&quot;&quot; // 是否需要图片预渲染(在不知道图片的高度的情况下)</span><br><span class="line">&gt;</span><br><span class="line">  &lt;template v-slot=&quot;&#123; item, width &#125;&quot;&gt;</span><br><span class="line">    // 对应的item </span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/m-waterfall&gt;</span><br></pre></td></tr></table></figure><p>综合起来，整个的一个瀑布流组件的构建需要分成几部分：</p><ol><li>通过 props 传递关键数据(部分)<ol><li>data：数据源</li><li>nodeKey：唯一标识</li><li>column：渲染的列数</li><li>picturePreReading：是否需要图片预渲染</li></ol></li><li>瀑布流渲染机制:通过 absolute 配合 relative 完成布局，布局逻辑为：<strong>每个 item 应该横向排列，第二行的item 顺序连接到当前最短的列中</strong></li><li>通过 <strong>作用域插槽</strong> 将每个 item 中涉及到的关键数据，传递到 item 视图中</li></ol><h4 id="获取容器宽度和列宽"><a href="#获取容器宽度和列宽" class="headerlink" title="获取容器宽度和列宽"></a>获取容器宽度和列宽</h4><ol><li>创建<code>libs\waterfall\index.vue</code>组件，并创建如下<code>props</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 数据源</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 唯一标识的 key</span></span><br><span class="line">  <span class="attr">nodeKey</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 列数</span></span><br><span class="line">  <span class="attr">column</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 列间距</span></span><br><span class="line">  <span class="attr">columnSpacing</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 行间距</span></span><br><span class="line">  <span class="attr">rowSpacing</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否需要进行图片预读取</span></span><br><span class="line">  <span class="attr">picturePreReading</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>构建对应的基础视图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;relative&quot;</span><br><span class="line">    ref=&quot;containerTarget&quot;</span><br><span class="line">    :style=&quot;&#123;</span><br><span class="line">      height: containerHeight + &#x27;px&#x27; // 因为是 relative 布局，需要主动指定高度</span><br><span class="line">    &#125;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 因为列数不确定，需要根据列数计算每列的宽度，所以等待列宽计算完成，并且有了数据源之后进行渲染 --&gt;</span><br><span class="line">    &lt;template v-if=&quot;columnWidth &amp;&amp; data.length&quot;&gt;</span><br><span class="line">      &lt;!-- 通过动态的 style 来去计算对应的列宽、left、top --&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;m-waterfall-item absolute duration-300&quot;</span><br><span class="line">        :style=&quot;&#123;</span><br><span class="line">          width: columnWidth + &#x27;px&#x27;,</span><br><span class="line">          left: item._style?.left + &#x27;px&#x27;,</span><br><span class="line">          top: item._style?.top + &#x27;px&#x27;</span><br><span class="line">        &#125;&quot;</span><br><span class="line">        v-for=&quot;(item, index) in data&quot;</span><br><span class="line">        :key=&quot;nodeKey ? item[nodeKey] : index&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;slot :item=&quot;item&quot; :width=&quot;columnWidth&quot; :index=&quot;index&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- 可以给一个加载中的描述，没有也无所谓 --&gt;</span><br><span class="line">    &lt;div v-else&gt;加载中...&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li>根据以上的基础视图，我们需要生成对应的：<pre><code>1. `containerHeight`：总高度2. `columnWidth`：列宽3. `item._style.left`：每个item 对应的 left4. `item._style.right`：每个item 对应的 right</code></pre></li><li>要计算 <strong>总高度</strong>，需要计算出 <strong>每一列的高度</strong>，最高的一列为 <strong>总高度</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器的总高度 = 最高的这一列的高度</span></span><br><span class="line"><span class="keyword">const</span> containerHeight = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 记录每列高度的容器。key：所在列  val：列高</span></span><br><span class="line"><span class="keyword">const</span> columnHeightObj = <span class="title function_">ref</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建记录各列的高度的对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useColumnHeightObj</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  columnHeightObj.<span class="property">value</span> = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.<span class="property">column</span>; i++) &#123;</span><br><span class="line">    columnHeightObj.<span class="property">value</span>[i] = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>要计算列宽，那么首先需要有容器的总宽度：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器实例</span></span><br><span class="line"><span class="keyword">const</span> containerTarget = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 容器总宽度(不包含 padding、margin、border)</span></span><br><span class="line"><span class="keyword">const</span> containerWidth = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 容器左边距，计算 item left 时，需要使用定位</span></span><br><span class="line"><span class="keyword">const</span> containerLeft = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算容器宽度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useContainerWidth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; paddingLeft, paddingRight &#125; = <span class="title function_">getComputedStyle</span>(containerTarget.<span class="property">value</span>, <span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// 容器左边距</span></span><br><span class="line">  containerLeft.<span class="property">value</span> = <span class="built_in">parseFloat</span>(paddingLeft)</span><br><span class="line">  <span class="comment">// 容器宽度</span></span><br><span class="line">  containerWidth.<span class="property">value</span> =</span><br><span class="line">    containerTarget.<span class="property">value</span>.<span class="property">offsetWidth</span> - <span class="built_in">parseFloat</span>(paddingLeft) - <span class="built_in">parseFloat</span>(paddingRight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>计算列宽</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算列宽 = （容器的宽度 - 所有的列间距宽度）/ 列数</span></span><br><span class="line"><span class="keyword">const</span> columnWidth = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 列间距合计</span></span><br><span class="line"><span class="keyword">const</span> columnSpacingTotal = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果是5列，则存在 4 个列间距</span></span><br><span class="line">  <span class="keyword">return</span> (props.<span class="property">column</span> - <span class="number">1</span>) * props.<span class="property">columnSpacing</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开始计算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useColumnWidth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useContainerWidth</span>() <span class="comment">// 获取容器宽度</span></span><br><span class="line">  <span class="comment">// 计算：列宽 = （容器的宽度 - 所有的列间距宽度）/ 列数</span></span><br><span class="line">  columnWidth.<span class="property">value</span> = (containerWidth.<span class="property">value</span> - columnSpacingTotal.<span class="property">value</span>) / props.<span class="property">column</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">useColumnWidth</span>() <span class="comment">// 计算列宽</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>此时，在 <code>src/views/main/components/ist/index.vue</code>中使用该组件，可以打印出计算的值</li></ol><h4 id="区分图片预加载"><a href="#区分图片预加载" class="headerlink" title="区分图片预加载"></a>区分图片预加载</h4><p>想要计算每列的 left、right ，需要拿到每个 item 的高度，只有有了每个 item 高，才可以判断下一列的第一个 item 的位置。<br>同时根据<code>pitturePreReading</code>又可以分为两种情况：</p><pre><code>1. 需要图片预加载时：图片高度未知1. 不需要图片预加载时：图片高度已知</code></pre><p><strong>需要图片预加载时</strong></p><ol><li>图片高度未知</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// item 高度集合</span></span><br><span class="line"><span class="keyword">let</span> itemHeights = []</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听图片加载完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">waitImgComplate</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  itemHeights = []</span><br><span class="line">  <span class="comment">// 拿到所有元素</span></span><br><span class="line">  <span class="keyword">let</span> itemElements = [...<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;m-waterfall-item&#x27;</span>)]</span><br><span class="line">  <span class="comment">// 获取所有元素的 img 标签</span></span><br><span class="line">  <span class="keyword">const</span> imgElements = <span class="title function_">getImgElements</span>(itemElements)</span><br><span class="line">  <span class="comment">// 获取所有 img 标签的图片</span></span><br><span class="line">  <span class="keyword">const</span> allImgs = <span class="title function_">getAllImg</span>(imgElements)</span><br><span class="line">  <span class="title function_">onComplateImgs</span>(allImgs).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 图片加载完成，获取高度</span></span><br><span class="line">    itemElements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">      itemHeights.<span class="title function_">push</span>(el.<span class="property">offsetHeight</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">useItemLocation</span>()<span class="comment">// 渲染位置</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>以上使用到了多个工具方法，可以创建 <code>src/libs/waterfalt/utils.js</code> 模块进行处理：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 itemElement 中抽离出所有的 imgElements</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getImgElements</span> = (<span class="params">itemElements</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> imgElements = []</span><br><span class="line">    itemElements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">      imgElements.<span class="title function_">push</span>(...el.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;img&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> imgElements</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成所有的图片链接数组</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getAllImg</span> = (<span class="params">imgElements</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> imgElements.<span class="title function_">map</span>(<span class="function">(<span class="params">imgElement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> imgElement.<span class="property">src</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 监听图片数组加载完成（通过 promise 完成）</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">onComplateImgs</span> = (<span class="params">imgs</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> promiseAll = []<span class="comment">// promise 集合</span></span><br><span class="line">    <span class="comment">// 循环 imgs, 构建 promiseAll</span></span><br><span class="line">    imgs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">img, index</span>) =&gt;</span> &#123;</span><br><span class="line">      promiseAll[index] = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 img 加载情况</span></span><br><span class="line">        <span class="keyword">const</span> imageObj = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">        imageObj.<span class="property">src</span> = img</span><br><span class="line">        imageObj.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(&#123; img, index &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promiseAll)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>不需要图片预加载时</strong>：</p><ol><li>图片高度已知</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片不需要预加载时，计算 item 高度</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useItemHeight</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  itemHeights = []</span><br><span class="line">  <span class="comment">// 拿到所有元素</span></span><br><span class="line">  <span class="keyword">let</span> itemElements = [...<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;m-waterfall-item&#x27;</span>)]</span><br><span class="line">  <span class="comment">// 计算 item 高度</span></span><br><span class="line">  itemElements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 依据传入数据计算出的 img 高度</span></span><br><span class="line">    itemHeights.<span class="title function_">push</span>(el.<span class="property">offsetHeight</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">useItemLocation</span>()<span class="comment">// 渲染位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染位置：在<code>useItemLocation</code>方法中，打印所有的图片高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为每个 item 生成位置属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useItemLocation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(itemHeights)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算定位item位置"><a href="#计算定位item位置" class="headerlink" title="*计算定位item位置"></a>*计算定位item位置</h4><ol><li>在 <code>useItemLocation</code> 方法中为每个item 定位位置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为每个 item 生成位置属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useItemLocation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 遍历数据源</span></span><br><span class="line">  props.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">_style</span>) <span class="keyword">return</span> <span class="comment">// 避免重复计算</span></span><br><span class="line">    item.<span class="property">_style</span> = &#123;&#125; <span class="comment">// 生成 _style 属性</span></span><br><span class="line">    item.<span class="property">_style</span>.<span class="property">left</span> = <span class="title function_">getItemLeft</span>() <span class="comment">// left</span></span><br><span class="line">    item.<span class="property">_style</span>.<span class="property">top</span> = <span class="title function_">getItemTop</span>() <span class="comment">// top</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">increasingHeight</span>(index) <span class="comment">// 指定列高度自增</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 指定容器高度</span></span><br><span class="line">  containerHeight.<span class="property">value</span> = <span class="title function_">getMaxHeight</span>(columnHeightObj.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 <code>getItemLeft</code> 方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回下一个 item 的 left</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getItemLeft</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 最小高度所在的列 * (列宽 + 间距)</span></span><br><span class="line">  <span class="keyword">const</span> column = <span class="title function_">getMinHeightColumn</span>(columnHeightObj.<span class="property">value</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    column * (columnWidth.<span class="property">value</span> + props.<span class="property">columnSpacing</span>) + containerLeft.<span class="property">value</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 <code>utils</code> 中创建 <code>getMinHeightcolumn</code> 方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回列高对象中的最小高度所在的列</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getMinHeightColumn</span> = (<span class="params">columnHeightObj</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> minHeight = <span class="title function_">getMinHeight</span>(columnHeightObj)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(columnHeightObj).<span class="title function_">find</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> columnHeightObj[key] === minHeight</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 <code>getItemTop</code> 方法:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回下一个 item 的 top</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getItemTop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 列高对象中的最小的高度</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getMinHeight</span>(columnHeightObj.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 <code>utils</code> 中创建<code>getMinHeight</code>方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回列高对象中的最小的高度</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getMinHeight</span> = (<span class="params">columnHeightObj</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> columnHeightArr = <span class="title class_">Object</span>.<span class="title function_">values</span>(columnHeightObj)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(...columnHeightArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 <code>increasingHeight</code> 方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定列高度自增</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increasingHeight</span> = (<span class="params">index</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 最小高度所在的列</span></span><br><span class="line">  <span class="keyword">const</span> minHeightColumn = <span class="title function_">getMinHeightColumn</span>(columnHeightObj.<span class="property">value</span>)</span><br><span class="line">  <span class="comment">// 该列高度自增</span></span><br><span class="line">  columnHeightObj.<span class="property">value</span>[minHeightColumn] +=</span><br><span class="line">    itemHeights[index] + props.<span class="property">rowSpacing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 <code>utils</code> 中创建 <code>getMaxHeight</code> 方法，作为容器高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回列高对象中的最大的高度</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getMaxHeight</span> = (<span class="params">columnHeightObj</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> columnHeightArr = <span class="title class_">Object</span>.<span class="title function_">values</span>(columnHeightObj)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...columnHeightArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.在组件销毁时，清除所有的<code>_style</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件销毁时，清除所有的 _style</span></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  props.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> item.<span class="property">_style</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="解决瀑布流展示不全"><a href="#解决瀑布流展示不全" class="headerlink" title="解决瀑布流展示不全"></a>解决瀑布流展示不全</h4><p>运行项目可以发现最底部的瀑布流元素无法展示完全。</p><p>出现这个问题的原因是因为在 <code>src/views/layout/index.vue</code> 中的 <code>h-main</code> 的高度，被子组件内部的 <code>h-full</code> 的<code>class</code> 给冲掉了。<br>为了防止以后还出现这样的情况，需要在 <code>src/views/layout/index.vue</code>中为 <code>main-vue</code> 外层包一个 <code>div</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;h-main&quot;&gt;</span><br><span class="line">  &lt;main-vue&gt;&lt;/main-vue&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="适配移动端，动态列"><a href="#适配移动端，动态列" class="headerlink" title="适配移动端，动态列"></a>适配移动端，动态列</h4><p>目前，瀑布流组件可以适配 PC 端，但是移动端，还存在一些问题，所以说，我们需要让我们的 瀑布流 组件可以适配移动端场景。</p><p>适配移动端，关键在于：</p><p><strong>列数的变化</strong></p><p>在<code>view/main/components/list/index.vue</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:column = <span class="string">&quot;isMobileTerminal ? 2 : 5&quot;</span></span><br></pre></td></tr></table></figure><p><strong>列宽和定位</strong></p><p>在<strong>列宽发生变化</strong>时，重新执行计算列宽：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 适应移动端：监听列数变化（2 || 5），重新构建瀑布流</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">useColumnWidth</span>() <span class="comment">// 重新计算列宽</span></span><br><span class="line">    <span class="comment">// 重置所有的定位数据，因为 data 中进行了深度监听，所以该操作会触发 data 的 watch</span></span><br><span class="line">    props.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item.<span class="property">_style</span> = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听列数变换</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> props.<span class="property">column</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">picturePreReading</span>) &#123;</span><br><span class="line">      <span class="comment">// 在 picturePreReading 为 true 的前提下，需要首先为列宽滞空，列宽滞空之后，会取消瀑布流渲染</span></span><br><span class="line">      columnWidth.<span class="property">value</span> = <span class="number">0</span></span><br><span class="line">      <span class="comment">// 等待页面渲染之后，重新执行计算。否则在 item 没有指定过高度的前提下，计算出的 item 高度会不正确</span></span><br><span class="line">      <span class="title function_">reset</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此时，在<code>src/views/main/components/list/index.vue</code> 中修改 <code>picturePreReading</code><br>为<code>true</code> ，表示等待图片硕加载。则 双端切换可以正常实现。</p><p>处理两个样式问题：</p><ol><li><p>移动端下<code>navigationBar</code>定位，在<code>App.vue</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 一级路由出口 --&gt;</span><br><span class="line">&lt;!-- 设置导航条吸顶效果 --&gt;</span><br><span class="line">&lt;div class=&quot;h-screen fixed top-0 left-0 w-screen&quot;&gt;</span><br><span class="line">  &lt;router-view /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>移动端下列表的横向<code>padding</code>，<code>view/main/components/list/index.vue</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;m-waterfall</span><br><span class="line">...</span><br><span class="line">class = &quot;w-full px-1&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="优化无需图片预加载时"><a href="#优化无需图片预加载时" class="headerlink" title="优化无需图片预加载时"></a>优化无需图片预加载时</h4><p>当设置<code>:picturePreReading=&quot;false&quot;</code>，不进行图片预加载时，在切换PC端和移动端时会出现图片重叠现象（图片高度计算出现错误）</p><p><strong>问题原因</strong>：不进行图片预加载时，会直接获取当前<code>item</code>的高度，因为没有等待图片加载完成，此时的高度是不包含图片的高度，从而使整个<code>item</code>高度计算错误。</p><p>服务端返回的图片接口数据是包含图片宽高<code>photoHeight</code>、<code>photoWidth</code>的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&quot;Uğurcan Özmen&quot;</span>,</span><br><span class="line">    <span class="attr">authorLike</span>: <span class="string">&quot;https://www.pexels.com/zh-cn/@ugurcan-ozmen-61083217&quot;</span>,</span><br><span class="line">    <span class="attr">avatar</span>: <span class="string">&quot;https://images.pexels.com/users/avatars/61083217/ugurcan-ozmen-235.jpeg?auto=compress&amp;fit=crop&amp;h=60&amp;w=60&quot;</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;8051987&quot;</span>,</span><br><span class="line">    <span class="attr">photo</span>: <span class="string">&quot;https://images.pexels.com/photos/8051987/pexels-photo-8051987.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500&quot;</span></span><br><span class="line">    <span class="attr">photoHeight</span>: <span class="number">625</span>, <span class="comment">// 图片高度</span></span><br><span class="line">    <span class="attr">photoWidth</span>: <span class="number">500</span>, <span class="comment">//  图片宽度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>view/main/components/liat/index.vue</code>的作用域插槽返回了图片的宽度，将它传入<code>itemVue</code>里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-slot=&quot;&#123; item, width &#125;&quot;&gt;</span><br><span class="line">  &lt;itemVue :data=&quot;item&quot; :width=&quot;width&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在<code>list/item.vue</code>中接收传入的宽度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="attr">width</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并利用宽度生成网页图片高度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img</span><br><span class="line">  ....</span><br><span class="line">  :style=&quot;&#123;</span><br><span class="line">    // 计算后的图片高度 = （计算得到宽度/图片真实宽度）* 图片真实高度</span><br><span class="line">    height: (width / data.photoWidth) * data.photoHeight + &#x27;px&#x27;</span><br><span class="line">  &#125;&quot;</span><br></pre></td></tr></table></figure><p>重新监听列数变换，增加图片不进行预加载的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> props.<span class="property">column</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">picturePreReading</span>) &#123;</span><br><span class="line">      <span class="comment">// 在 picturePreReading 为 true 的前提下，需要首先为列宽滞空，列宽滞空之后，会取消瀑布流渲染</span></span><br><span class="line">      columnWidth.<span class="property">value</span> = <span class="number">0</span></span><br><span class="line">      <span class="comment">// 等待页面渲染之后，重新执行计算。否则在 item 没有指定过高度的前提下，计算出的 item 高度会不正确</span></span><br><span class="line">      <span class="title function_">nextTick</span>(reset)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 在 picturePreReading 为 false</span></span><br><span class="line">      <span class="title function_">reset</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>下面梳理一下整个瀑布流的构建过程：</p><ul><li>1.瀑布流的核心就是：通过<code>relative</code> 和<code>absolute</code>定位的方式，来控制每个 <code>item</code> 的位置</li><li>2．影响瀑布流高度的主要元素，通常都是<code>img</code>标签</li><li><p>3.有些服务端会返回<strong>关键img的高度</strong>，有些不会，所以需要分别处理：</p><ul><li><ol><li>当服务端<strong>不返回</strong>高度时：需要等待 <code>img</code> 加载完成之后，再来计算高度，然后通过得到的高度计算定位。否则则会出现高度计算不准确导致定位计算不准确的问题。</li></ol></li></ul><ul><li><ol><li>当服务端<strong>返回</strong>高度时：开发者则必须利用此高度为 <code>item</code> 进行高度设定。一旦 <code>item</code>具备指定高度，那么就不需要等待 <code>img</code>加载的过程，这样效率更高，并且可以业务的逻辑会变得更加简单。</li></ol></li></ul></li><li>4.当进行响应式切换时，同样需要区分对应场景：<ul><li><ol><li>当服务端<strong>不返回</strong>高度时：需要<strong>重新执行整个渲染流程</strong>，虽然会耗费一些性能，但可以最大可能的避免出现逻辑错误。让组件拥有更强的普适性。</li></ol></li><li><ol><li>当服务端<strong>返回</strong>高度时：同样需要重新计算<strong>列宽</strong>和<strong>定位</strong>，但因为 <code>item</code>具备明确的高度，所以可以直接拿到具体的高度，而无需重复整个渲染流程，从而可以实现更多的交互逻辑。比如：位移动画、将来的图片懒加载占位…</li></ol></li></ul></li></ul><h3 id="21、通用组件-infinite"><a href="#21、通用组件-infinite" class="headerlink" title="21、通用组件  infinite"></a>21、通用组件  <code>infinite</code></h3><p>对于首页中的瀑布流而言，是需要进行长列表展示的，也就说它是一个分页的数据。那么对于这种分页功能而言，应该如何进行实现</p><ol><li><strong>长列表的实现原理</strong></li></ol><p>长列表分页加载，其实指的就是：<strong>当滚动到列表底部时，加载数据</strong></p><p>要想实现这个功能，需要做的核心的一点就是<strong>能够监听到列表滚动到底部</strong></p><p>监听到列表滚动到底部，可以利用<code>IntersectionObserver</code>，该接口可以判断：<strong>目标元素与其祖先元素或顶级文档视窗(<code>viewport</code>)的交叉状态（是否可见）</strong></p><p>利用这个特性，把一个元素<strong>置于列表底部</strong>，当这个元素可见时则表示<strong>列表滚动到了底部</strong>。</p><p>由于原生的<code>IntersectionObserver</code>使用起来比较复杂，所以<code>vueuse</code>提供了<code>useIntersectionObserver</code>方法。</p><ol><li><strong>如何使用</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;infinite-list</span><br><span class="line">v-model=<span class="string">&quot;&quot;</span>       <span class="comment">// 当前是否处于加载状态</span></span><br><span class="line">  :isFinished=<span class="string">&quot;&quot;</span>   <span class="comment">// 数据是否全部加载完成</span></span><br><span class="line">  @onLoad=<span class="string">&quot;&quot;</span>       <span class="comment">// 加载下一页数据的触发事件</span></span><br><span class="line">&gt;</span><br><span class="line">list列表</span><br><span class="line">&lt;/infinite-list&gt;</span><br></pre></td></tr></table></figure><h4 id="构建长列表组件"><a href="#构建长列表组件" class="headerlink" title="构建长列表组件"></a>构建长列表组件</h4><ol><li>创建<code>libs/infinite/index.vue</code>组件</li><li>构建<code>props</code>与<code>emits</code>，并处理双向数据绑定逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useVModel, useIntersectionObserver &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 是否处于加载状态</span></span><br><span class="line">  <span class="attr">modelValue</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 数据是否全部加载完成</span></span><br><span class="line">  <span class="attr">isFinished</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;onLoad&#x27;</span>, <span class="string">&#x27;update:modelValue&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 loading 状态</span></span><br><span class="line"><span class="keyword">const</span> loading = <span class="title function_">useVModel</span>(props)</span><br></pre></td></tr></table></figure><ol><li>构建对应视图和插槽逻辑</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">     &lt;!-- 内容 --&gt;</span><br><span class="line">     &lt;slot /&gt;</span><br><span class="line">    &lt;div ref=&quot;laodingTarget&quot; class=&quot;h-6 py-4&quot;&gt;</span><br><span class="line">      &lt;!-- 加载更多 --&gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        v-show=&quot;loading&quot;</span><br><span class="line">        class=&quot;w-4 h-4 mx-auto animate-spin&quot;</span><br><span class="line">        name=&quot;infinite-load&quot;</span><br><span class="line">      &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;!-- 没有更多数据了 --&gt;</span><br><span class="line">      &lt;p v-if=&quot;isFinished&quot; class=&quot;text-center text-base text-zinc-400&quot;&gt;</span><br><span class="line">        已经没有更多数据了!</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol><li>利用 <a href="https://vueuse.org/core/useIntersectionObserver/">useIntersectionObserver</a> 方法，监听元素可见行为，用于判断列表滚动到底部</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动的元素</span></span><br><span class="line"><span class="keyword">const</span> laodingTarget = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="title function_">useIntersectionObserver</span>(laodingTarget, <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当加载更多的视图可见时，同时 loading 为 false，同时 数据尚未全部加载完</span></span><br><span class="line">    <span class="comment">// 处理加载更多的逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(isIntersecting &amp;&amp; !loading.<span class="property">value</span> &amp;&amp; !props.<span class="property">isFinished</span>)&#123;</span><br><span class="line">        <span class="comment">// 修改加载数据标记</span></span><br><span class="line">        loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 触发加载更多行为</span></span><br><span class="line">        <span class="title function_">emits</span>(<span class="string">&#x27;onLoad&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="结合瀑布流组件的使用"><a href="#结合瀑布流组件的使用" class="headerlink" title="结合瀑布流组件的使用"></a>结合瀑布流组件的使用</h4><p>通过应用<code>infinite</code>组件 结合<code>waterfall</code>组件构建长列表瀑布流效果</p><ol><li>在<code>view/main/components/list/index.vue</code>中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 长列表处理 --&gt;</span><br><span class="line">    &lt;m-infinite</span><br><span class="line">      v-model=&quot;isLoading&quot;</span><br><span class="line">      :isFinished=&quot;isFinished&quot;</span><br><span class="line">      @onLoad=&quot;getPexelsData&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;m-waterfall</span><br><span class="line">        ...</span><br><span class="line">      &lt;/m-waterfall&gt;</span><br><span class="line">    &lt;/m-infinite&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">...</span><br><span class="line">// 构建数据请求</span><br><span class="line">let query = &#123;</span><br><span class="line">  page: 1,</span><br><span class="line">  size: 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 长列表组件属性</span><br><span class="line">const isLoading = ref(false)  // 数据是否在加载中</span><br><span class="line">const isFinished = ref(false) // 数据是否全部加载完成</span><br><span class="line"></span><br><span class="line">// 加载数据的方法</span><br><span class="line">const pexelsList = ref([]) // 数据源</span><br><span class="line">const getPexelsData = async () =&gt; &#123;</span><br><span class="line">  // 数据全部加载完成则 return</span><br><span class="line">  if (isFinished.value) &#123;</span><br><span class="line">      return</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 完成第一次请求之后，后续请求让 page 自增</span><br><span class="line">  if (pexelsList.value.length) &#123;</span><br><span class="line">      query.page += 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 触发接口请求</span><br><span class="line">  const res = await getPexelsList(query)</span><br><span class="line">  // 初始请求清空数据源</span><br><span class="line">  if (query.page === 1) &#123;</span><br><span class="line">      pexelsList.value = res.list</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      pexelsList.value.push(...res.list)</span><br><span class="line">  &#125;</span><br><span class="line">  // 判断数据是否全部加载完成</span><br><span class="line">  if (pexelsList.value.length === res.total) &#123;</span><br><span class="line">      isFinished.value = true</span><br><span class="line">  &#125;</span><br><span class="line">  // 修改 loading 标记</span><br><span class="line">  isLoading.value = false</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>当loading图标显示时，加载更多的瀑布流数据</p><h4 id="解决首次数据无法铺满全屏的问题"><a href="#解决首次数据无法铺满全屏的问题" class="headerlink" title="解决首次数据无法铺满全屏的问题"></a>解决首次数据无法铺满全屏的问题</h4><p>当更改数据请求<code>size=5</code>时，刷新页面，会触发一次接口请求，页面只显示一行图片数据，且鼠标滚动也无法触发下一页请求，导致首次数据加载无法铺满全屏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建数据请求</span></span><br><span class="line"><span class="keyword">let</span> query = &#123;</span><br><span class="line">  <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">size</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原因：</strong>当首次加载数据无法铺满全屏的时候，<code>isIntersecting</code>判断（检测是否可见的变量）虽然为<code>true</code>，但是它只会被触发一次，也就是<code>setIntersectionObserver</code>里的回调只会触发一次，不会再一次触发对应的<code>loading</code>，从而出现上述问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useIntersectionObserver</span>(laodingTarget, <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当加载更多的视图可见时， loading 为 false， 数据尚未全部加载完</span></span><br><span class="line">  <span class="keyword">if</span>(isIntersecting &amp;&amp; !loading.<span class="property">value</span> &amp;&amp; !props.<span class="property">isFinished</span>)&#123;</span><br><span class="line">     loading.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 修改加载数据标记</span></span><br><span class="line">     <span class="title function_">emits</span>(<span class="string">&#x27;onLoad&#x27;</span>) <span class="comment">// 触发加载更多行为</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong>判断<code>isIntersecting</code>方法在<code>loading</code>发生变化后重新进行一次判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> targetIsIntersecting = <span class="title function_">ref</span>(<span class="literal">false</span>) <span class="comment">// 记录当前是否在底部（是否交叉）</span></span><br><span class="line"><span class="title function_">useIntersectionObserver</span>(laodingTarget, <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取当前交叉状态</span></span><br><span class="line">  targetIsIntersecting.<span class="property">value</span> = isIntersecting</span><br><span class="line">  <span class="title function_">emitLoad</span>() <span class="comment">// 触发 load</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发 load</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">emitLoad</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当加载更多的视图可见时，加载更多数据</span></span><br><span class="line">  <span class="keyword">if</span> (targetIsIntersecting.<span class="property">value</span> &amp;&amp; !loading.<span class="property">value</span> &amp;&amp; !props.<span class="property">isFinished</span>) &#123;</span><br><span class="line">    loading.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 修改加载数据标记</span></span><br><span class="line">    <span class="title function_">emits</span>(<span class="string">&#x27;onLoad&#x27;</span>) <span class="comment">// 触发加载更多行为</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 loading 的变化，解决数据加载完成后，首屏未铺满的问题</span></span><br><span class="line"><span class="title function_">watch</span>(loading, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 触发 load，延迟处理，等待 渲染和 useIntersectionObserver 的再次触发</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">emitLoad</span>()</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="22、实现图片懒加载指令"><a href="#22、实现图片懒加载指令" class="headerlink" title="22、实现图片懒加载指令"></a>22、实现图片懒加载指令</h3><p><strong>使用图片懒加载的原因：</strong></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191506497.jpg" alt="image-20220827101927965"></p><p>这个是在项目中截取的图片、可以看到在初始化时，加载了76张图片、而实际首屏在可视范围内也就只展示了10多张图片；剩余的60来张图片完全没有必要在可视范围外加载，我们需要当图片在可视范围内再加载对应的图片</p><p><strong>图片懒加载的优点：</strong>减少服务器带宽、资源；提升用户首屏加载速度、用户体验</p><p><strong>图片懒加载实现原理：</strong></p><p>图片懒加载指：<strong>当图片不可见时，不加载图片。当图片可见时，才去加载图片。</strong></p><p><strong>可以监听所有图片是否被可见，如果图片处于不可见状态，那么就不加载图片，如果图片处于可见状态，那么开始加载图片。</strong><br>而这个功能的实现关键就是 <strong><code>IntersectionObserver</code></strong>。</p><h4 id="实现懒加载v-lazy指令"><a href="#实现懒加载v-lazy指令" class="headerlink" title="实现懒加载v-lazy指令"></a>实现懒加载<code>v-lazy</code>指令</h4><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191506484.jpg" alt="image-20220827110753001"> </p><p>创建<code>src/directives/modules/lazy/index.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useIntersectionObserver <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="comment">// 处理图片懒加载</span></span><br><span class="line"><span class="comment">// 1、在元素挂载到页面中的钩子函数中、保存img的src</span></span><br><span class="line"><span class="comment">// 2、将img的src属性置为 空 或者置位默认图片</span></span><br><span class="line"><span class="comment">// 3、监听图片是否在可视范围内？ 在可视范围内将img保存在src重新复制到img上 并 取消监听</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、拿到当前 img 标签的 src</span></span><br><span class="line">    <span class="keyword">const</span> imgSrc = el.<span class="property">src</span></span><br><span class="line">    <span class="comment">// 2、将img的src属性置为 空 或者置位默认图片</span></span><br><span class="line">    el.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">//  3、监听图片是否在可视范围内</span></span><br><span class="line">    <span class="keyword">const</span> &#123; stop &#125; = <span class="title function_">useIntersectionObserver</span>(el, <span class="function">(<span class="params">&#123; isIntersecting &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">        el.<span class="property">src</span> = imgSrc <span class="comment">// 3. 当图片可见时,加载图片</span></span><br><span class="line">        <span class="title function_">stop</span>() <span class="comment">// 4. 停止监听</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指令的自动注册"><a href="#指令的自动注册" class="headerlink" title="指令的自动注册"></a>指令的自动注册</h4><p>完成指令的自动注册需要利用 [Glob导入(import.meta.globEager)][[(<a href="https://cn.vitejs.dev/guide/features#glob-import">https://cn.vitejs.dev/guide/features#glob-import</a>)] 和 [Object.entries][(<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries</a>)] 功能</p><p>创建<code>src/directives/index.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局指令注册</span></span><br><span class="line"><span class="comment"> * https://cn.vitejs.dev/guide/features.html#glob-import</span></span><br><span class="line"><span class="comment"> * import.meta.globEager 为同步导入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> directives = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">&#x27;./modules/*.js&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(directives)) &#123;</span><br><span class="line">      <span class="comment">// 拼接组件注册的 name</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(key) <span class="comment">// ./modules/lazy.js</span></span><br><span class="line">      <span class="keyword">const</span> arr = key.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> directiveName = arr[arr.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">replace</span>(<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">      app.<span class="title function_">directive</span>(directiveName, value.<span class="property">default</span>) <span class="comment">// 完成注册</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>main.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> directives <span class="keyword">from</span> <span class="string">&#x27;@/directives&#x27;</span> <span class="comment">// + 引入注册指令模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:svg-icons-register&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(store).<span class="title function_">use</span>(libs)</span><br><span class="line">    .<span class="title function_">use</span>(directives) <span class="comment">// + 注册指令</span></span><br><span class="line">    .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="指定图片彩色占位符"><a href="#指定图片彩色占位符" class="headerlink" title="指定图片彩色占位符"></a>指定图片彩色占位符</h4><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191507552.jpg" alt="image-20220827110753001"></p><p>当图片加载比较慢的时候，会出现图片区域显示空白的情况，给每个图片设置个随机颜色来作为图片加载完成前的填充，使其更加美观。</p><p>在<code>utils/color.js</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成随机色值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">randomRGB</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)</span><br><span class="line">  <span class="keyword">const</span> g = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)</span><br><span class="line">  <span class="keyword">const</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>view/main/components/list/item.vue</code>中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;bg-white dark:bg-zinc-900 xl:dark:bg-zinc-800 rounded pb-1&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;relative w-full rounded cursor-zoom-in group&quot;</span><br><span class="line">        :style=&quot;&#123; backgroundColor: randomRGB() &#125;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        ...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; randomRGB &#125; from &#x27;@/utils/color&#x27;</span><br><span class="line">...</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="23、多组件联动"><a href="#23、多组件联动" class="headerlink" title="23、多组件联动"></a>23、多组件联动</h3><p>在实际开发中，经常会遇到多个组件之间互相进行联动的场景。这样的场景通常应该怎么去进行处理</p><p>多组件联动，通常指的是：<strong>多个组件之间，存在一个或多个共享的数据。当数据发生改变时，执行对应的逻辑</strong>。<br>那么把这一句话拆分开来看，就是两部分：</p><pre><code>1. 多组件之间需要共享数据2. 监听数据变化，并执行对应逻辑</code></pre><p><strong>多组件之间需要共享数据</strong></p><ol><li>组件之间的数据传递 —- 常见于层级关系比较清晰的多组件之中<ol><li>父传子</li><li>子传父</li><li>…</li></ol></li><li>依赖注入： [Provide/Inject][[(<a href="https://cn.vuejs.org/guide/components/provide-inject.html">https://cn.vuejs.org/guide/components/provide-inject.html</a>)] —- 嵌套层级比较深，并且子组件只需要父组件的部分内容</li><li>全局状态管理工具：vuex —- 以上两种情况都不适用的情况下</li></ol><p>针对于本项目的场景，层级关系比较复杂，并且需要进行复杂的逻辑操作，那么此时，多组件之间共享数据的策略就需要通过<code>vuex</code>来实现。</p><p><strong>监听数据变化的方式</strong></p><p>当组件之间共享的数据发生变化时，需要执行对应的逻辑操作。首当其冲就需要监听到数据的变化。</p><p>在 vue 中监听数据变化的方式，首推就是 watch。</p><p>本项目共享的数据需要被保存到 vuex 中，所以就需要通过 watch 监听到 vuex 中共享数据的变化，然后在监听到变化时，执行对应的业务逻辑。</p><p>依据以上所说的内容，整体实现逻辑应该为：</p><ol><li>创建共享数据对应的 vuex 模块</li><li>在 getters 中建立对应的快捷访问计算属性</li><li>在对应的业务组件中，监听 getters，并执行对应逻辑</li></ol><h4 id="NavigationBar对应list"><a href="#NavigationBar对应list" class="headerlink" title="NavigationBar对应list"></a><code>NavigationBar</code>对应<code>list</code></h4><p>当 navigationBar 中的 item 发生切换时，切换对应的 list 中的展示数据，而切换的关键就在于<strong>共享数据的变化，引起的逻辑变化</strong>。在这样的场景中，共享数据指的就是<strong>被选中项</strong>。</p><p>无论是 <code>PC端</code> 下还是 <code>移动端</code> 下，被选中项都是在组件内部进行处理的，这不符合最初逻辑。我们期望共享的数据可以在 <code>vuex</code> 中被维护。</p><ol><li>创建<code>store/modules/app.js</code>，该模块下的数据<strong>不会</strong>被缓存：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ALL_CATEGORY_ITEM</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 当前选中的分类</span></span><br><span class="line">    <span class="attr">currentCategory</span>: <span class="variable constant_">ALL_CATEGORY_ITEM</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 切换选中分类</span></span><br><span class="line">    <span class="title function_">changeCurrentCategory</span>(<span class="params">state, newCategory</span>) &#123;</span><br><span class="line">      state.<span class="property">currentCategory</span> = newCategory</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>store/getters.js</code>中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isMobileTerminal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/flexible&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//简单访问：navigationBar 数据源</span></span><br><span class="line">  <span class="attr">categorys</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">category</span>.<span class="property">categorys</span>,</span><br><span class="line">  <span class="comment">// 当前主题</span></span><br><span class="line">  <span class="attr">themeType</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">theme</span>.<span class="property">themeType</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// category选中项</span></span><br><span class="line">  <span class="attr">currentCategory</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">app</span>.<span class="property">currentCategory</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// category选中项下标</span></span><br><span class="line">  <span class="attr">currentCategoryIndex</span>: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.<span class="property">categorys</span>.<span class="title function_">findIndex</span>(</span><br><span class="line">      <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === getters.<span class="property">currentCategory</span>.<span class="property">id</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>PC端</code>和<code>移动端</code>分别触发</li></ol><p><code>pc/index.js</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">class</span>=<span class="string">&quot;bg-white dark:bg-zinc-800 duration-500 sticky top-0 left-0 w-full z-10&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    ......</span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- category item --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in $store.getters.categorys&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;shrink-0 px-1.5 py-0 z-10 duration-200 last:mr-4 text-zinc-900 dark:text-zinc-500 dark:hover:text-zinc-300 text-base font-bold h-4 leading-4 cursor-pointer hover:bg-zinc-200 dark:hover:bg-zinc-900 rounded mr-1 mb-1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:class</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        &#x27;text-zinc-900 dark:text-zinc-300 bg-zinc-200 dark:bg-zinc-900&#x27;:</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        $store.getters.currentCategoryIndex === index</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">      &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">click</span>=<span class="string">&quot;onItemClick(item)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123; item.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">...... </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 选中状态处理 - 高亮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">onItemClick</span> = (<span class="params">item</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  store.<span class="title function_">commit</span>(<span class="string">&#x27;app/changeCurrentCategory&#x27;</span>, item)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>mobile/index.js</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-white dark:bg-zinc-900 sticky top-0 left-0 z-10&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ......</span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 顶部分类导航条 - item --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in $store.getters.categorys&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;shrink-0 px-1.5 py-0.5 z-10 duration-200 last:mr-4&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:class</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml"> &#x27;text-zinc-100&#x27; :</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            $store.getters.currentCategoryIndex === index</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml"> &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:ref</span>=<span class="string">&quot;setItemRef&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">click</span>=<span class="string">&quot;onItemClick(item)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123; item.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     ......</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">......</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">......</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">watch</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="function">() =&gt;</span> store.<span class="property">getters</span>.<span class="property">currentCategoryIndex</span>, </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取选中元素的 left、width</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> &#123; left, width &#125; = itemRefs[val].<span class="title function_">getBoundingClientRect</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 为 sliderStyle 设置属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        sliderStyle.<span class="property">value</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">transform</span>: <span class="string">`translateX(<span class="subst">$&#123;ulScrollLeft.value + left - <span class="number">10</span>&#125;</span>px)`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">width</span>: width + <span class="string">&#x27;px&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// item 点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">onItemClick</span> = (<span class="params">index</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    store.<span class="title function_">commit</span>(<span class="string">&#x27;app/changeCurrentCategory&#x27;</span>, item)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    isVisable.<span class="property">value</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">......</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>在<code>list/index.vue</code>中进行监听<code>currentCategory</code> 的变化</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选中状态发生改变 -- 通过此方法修改 query 请求参数，重新发起请求</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">resetQuery</span> = (<span class="params">newQuery</span>) =&gt; &#123;</span><br><span class="line">  query = &#123; ...query, ...newQuery &#125;</span><br><span class="line">  <span class="comment">// 重置状态</span></span><br><span class="line">  isFinished.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">  pexelsList.<span class="property">value</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 currentCategory 的变化 -- 选中状态发生改变</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> store.<span class="property">getters</span>.<span class="property">currentCategory</span>,</span><br><span class="line">  <span class="function">(<span class="params">currentCategory</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 重置请求参数</span></span><br><span class="line">    <span class="title function_">resetQuery</span>(&#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">categoryId</span>: currentCategory.<span class="property">id</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="searchBar对应list"><a href="#searchBar对应list" class="headerlink" title="searchBar对应list"></a><code>searchBar</code>对应<code>list</code></h4><p>对于 searchBar区域而言，目前还没有处理完成，所以需要先把searchBar区域的处理流程捋清楚，然后再处理对应的联动。<br>对于 searchBar 区域目前还缺少三部分的内容处理：</p><pre><code>1. 搜索提示2. 搜索历史3. 推荐主题所以接下来的处理顺序为：1. 搜索提示2. 搜索历史3. 推荐主题4. search 触发时的 list 联动</code></pre><h4 id="获取搜索提示"><a href="#获取搜索提示" class="headerlink" title="获取搜索提示"></a>获取搜索提示</h4><ol><li>在<code>api/pexels.js</code>中新增获取搜索提示接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取搜索提示</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getHint</span> = (<span class="params">q</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pexels/hint&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      q</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/header-search/hint.vue</code>中发起接口请求获取数据。并渲染视图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-for=&quot;(item, index) in hintData&quot;</span><br><span class="line">        :key=&quot;index&quot;</span><br><span class="line">        class=&quot;py-1 pl-1 text-base font-bold text-zinc-500 rounded cursor-pointer duration-300 hover:bg-zinc-200 dark:hover:bg-zinc-900&quot;</span><br><span class="line">        @click=&quot;onItemClick(item)&quot;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  const EMITS_ITEM_CLICK = &#x27;itemClick&#x27;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script setup&gt;</span><br><span class="line">  import &#123; getHint &#125; from &#x27;@/api/pexels&#x27;</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  </span><br><span class="line">  // 接收搜索数据</span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    searchText: &#123; // 搜索文本</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // 声明item 被点击触发事件</span><br><span class="line">  const emits = defineEmits([EMITS_ITEM_CLICK])</span><br><span class="line">  </span><br><span class="line">  // 获取搜索提示数据</span><br><span class="line">  const hintData = ref([])</span><br><span class="line">  const getHintData = async () =&gt; &#123;</span><br><span class="line">    if (!props.searchText) return</span><br><span class="line">    const &#123; result &#125; = await getHint(props.searchText)</span><br><span class="line">    hintData.value = result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监听搜索文本的变化，并获取对应提示数据</span><br><span class="line">  watch(() =&gt; props.searchText, getHintData, &#123;</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // item 点击事件</span><br><span class="line">  const onItemClick = (item) =&gt; &#123;</span><br><span class="line">    emits(EMITS_ITEM_CLICK, item)</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol><li>在父组件<code>view/layout/components/header/header-search/index.vue</code>进行搜索提示的展示</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;w-full guide-search&quot;&gt;</span><br><span class="line">    &lt;m-search v-model=&quot;inputValue&quot;&gt;</span><br><span class="line">      &lt;template #dropdown&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;!-- 搜索提示 --&gt;</span><br><span class="line">          &lt;hintVue</span><br><span class="line">            v-show=&quot;inputValue&quot;</span><br><span class="line">            :searchText=&quot;inputValue&quot;</span><br><span class="line">            @itemClick=&quot;onSearchHandler&quot;</span><br><span class="line">          &gt;&lt;/hintVue&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/m-search&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import hintVue from &#x27;./hint.vue&#x27;</span><br><span class="line"></span><br><span class="line">const inputValue = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">// 搜索的回调事件</span><br><span class="line">const onSearchHandler = (val) =&gt; &#123;</span><br><span class="line">  inputValue.value = val</span><br><span class="line">  if (val) &#123;</span><br><span class="line">    store.commit(&#x27;search/addHistory&#x27;, val) // 保存历史记录</span><br><span class="line">    // console.log(&#x27;触发 searchText 变化&#x27;)</span><br><span class="line">    store.commit(&#x27;app/changeSearchText&#x27;, val) // 触发 searchText 变化</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="处理防抖功能"><a href="#处理防抖功能" class="headerlink" title="处理防抖功能"></a>处理防抖功能</h4><p>目前的 searchBar 中，当输入内容时，会触发搜索提示功能。但是当搜索一个单词，比<br>如：mac ，却进行了三次的搜索（m、ma、mac）。这明显是不合理的。<br>所以如果想要让这个搜索变得更加合理，那么就需要使用到 <strong>防抖</strong> 这样的功能。</p><p>防抖(<code>debounce</code>)指：<strong>当触发一个事件时，不去立刻执行，而是延迟一段时间，该事件变为等待执行事件。如果在这段时间之内，该事件被再次触发，则上次等待执行的事件取消，本次触发的事件变为等待执行事件。循环往复，直到某一个等待事件被执行为止</strong></p><p>目前在 <code>view/layout/components/header/header-search/hint.vue</code> 中，是通过 <code>watch</code> 监听输入内容的变化，所以当输入内容发生变化时，就会立刻触发 <code>getHintData</code> 事件。</p><p>此时所需要做的防抖处理，就需要在<code>watch</code> 中进行。不过这样的防抖 watch 不需要自己进行实现， <code>vueuse</code> 中提供了对应的 <a href="https://vueuse.org/shared/watchDebounced/">watchDebounced</a> ，可以直接利用这个 <code>API</code> 直接实现防抖的<code>watch</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; getHint &#125; from &#x27;@/api/pexels&#x27;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; watchDebounced &#125; from &#x27;@vueuse/core&#x27;</span><br><span class="line">......</span><br><span class="line">// 监听搜索文本的变化，并获取对应提示数据</span><br><span class="line">watchDebounced(() =&gt; props.searchText, getHintData, &#123;</span><br><span class="line">  immediate: true,</span><br><span class="line">  debounce: 500 // 每次事件触发时，延迟的时间</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="实现关键字的高亮"><a href="#实现关键字的高亮" class="headerlink" title="实现关键字的高亮"></a>实现关键字的高亮</h4><p>在<code>view/layout/components/header/header-search/hint.vue</code>中将输入的正常搜索文本替换成带<code>html</code>标签的文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-for=&quot;(item, index) in hintData&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      class=&quot;py-1 pl-1 text-base font-bold text-zinc-500 rounded cursor-pointer duration-300 hover:bg-zinc-200 dark:hover:bg-zinc-900&quot;</span><br><span class="line">      @click=&quot;onItemClick(item)&quot;</span><br><span class="line">      v-html=&quot;highlightText(item)&quot;</span><br><span class="line">    &gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">......</span><br><span class="line">// 处理关键字高亮</span><br><span class="line">const highlightText = (text) =&gt; &#123;</span><br><span class="line">  // 生成高亮标签</span><br><span class="line">  const highlightStr = `&lt;span class=&quot;text-zinc-900 dark:text-zinc-200&quot;&gt;$&#123;props.searchText&#125;&lt;/span&gt;`</span><br><span class="line">  // 构建正则表达式，从《显示文本中》找出与《用户输入文本相同的内容》，使用《高亮标签》进行替换</span><br><span class="line">  const reg = new RegExp(props.searchText, &#x27;gi&#x27;)</span><br><span class="line">  return text.replace(reg, highlightStr) // 替换</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="搜索历史"><a href="#搜索历史" class="headerlink" title="搜索历史"></a>搜索历史</h4><ol><li>在<code>store/modules/search.js</code>中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">historys</span>: []</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 新增</span></span><br><span class="line"><span class="comment">       * 1. 新增的历史记录位于头部</span></span><br><span class="line"><span class="comment">       * 2. 不可出现重复的记录</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="title function_">addHistory</span>(<span class="params">state, newHistory</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> isFindIndex = state.<span class="property">historys</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item === newHistory)</span><br><span class="line">        <span class="comment">// 剔除旧数据</span></span><br><span class="line">        <span class="keyword">if</span> (isFindIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">          state.<span class="property">historys</span>.<span class="title function_">splice</span>(isFindIndex, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        state.<span class="property">historys</span>.<span class="title function_">unshift</span>(newHistory)<span class="comment">// 新增记录</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 删除指定历史记录数据</span></span><br><span class="line">      <span class="title function_">deleteHistory</span>(<span class="params">state, index</span>) &#123;</span><br><span class="line">        state.<span class="property">historys</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 删除所有历史记录</span></span><br><span class="line">      <span class="title function_">deleteAllHistory</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        state.<span class="property">historys</span> = []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>store/index.js</code>中完成<code>search</code>模块对应的注册</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">import</span> search <span class="keyword">from</span> <span class="string">&#x27;./modules/search&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  getters,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    category,</span><br><span class="line">    theme,</span><br><span class="line">    app,</span><br><span class="line">    search</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">      <span class="comment">// 保存到 localStorage 中的 key</span></span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;imooc-front&#x27;</span>,</span><br><span class="line">      <span class="comment">// 需要保存的模块</span></span><br><span class="line">      <span class="attr">paths</span>: [<span class="string">&#x27;category&#x27;</span>, <span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;search&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol><li>在<code>store/getters.js</code>新增<code>search</code>的快速访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// 搜索记录历史</span></span><br><span class="line">  <span class="attr">historys</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">search</span>.<span class="property">historys</span>,</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/header-search/history.vue</code>渲染历史记录的页面视图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;&quot;&gt;</span><br><span class="line">      &lt;!-- 最近搜索文本 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex items-center text-xs mb-1 text-zinc-400&quot;&gt;</span><br><span class="line">        &lt;span&gt;最近搜索&lt;/span&gt;</span><br><span class="line">        &lt;m-svg-icon</span><br><span class="line">          name=&quot;delete&quot;</span><br><span class="line">          class=&quot;w-2.5 h-2.5 ml-1 p-0.5 cursor-pointer duration-300 rounded-sm hover:bg-zinc-100&quot;</span><br><span class="line">          fillClass=&quot;fill-zinc-400&quot;</span><br><span class="line">          @click=&quot;onDeleteAllClick&quot;</span><br><span class="line">        &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 搜索历史内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex flex-wrap&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          v-for=&quot;(item, index) in $store.getters.historys&quot;</span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">          class=&quot;mr-2 mb-1.5 flex items-center cursor-pointer bg-zinc-100 px-1.5 py-0.5 text-zinc-900 text-sm font-bold rounded-sm duration-300 hover:bg-zinc-200&quot;</span><br><span class="line">          @click=&quot;onItemClick(item)&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; item &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;m-svg-icon</span><br><span class="line">            name=&quot;input-delete&quot;</span><br><span class="line">            class=&quot;w-2.5 h-2.5 p-0.5 ml-1 duration-300 rounded-sm hover:bg-zinc-100&quot;</span><br><span class="line">            @click.stop=&quot;onDeleteClick(index)&quot;</span><br><span class="line">          &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  const EMITS_ITEM_CLICK = &#x27;itemClick&#x27;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script setup&gt;</span><br><span class="line">  import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">  import &#123; confirm &#125; from &#x27;@/libs&#x27;</span><br><span class="line">  </span><br><span class="line">  const emits = defineEmits([EMITS_ITEM_CLICK])</span><br><span class="line">  const store = useStore()</span><br><span class="line">  </span><br><span class="line">  // 删除所有搜索历史记录</span><br><span class="line">  const onDeleteAllClick = () =&gt; &#123;</span><br><span class="line">    store.commit(&#x27;search/deleteAllHistory&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 删除单个搜索历史记录</span><br><span class="line">  const onDeleteClick = (index) =&gt; &#123;</span><br><span class="line">    store.commit(&#x27;search/deleteHistory&#x27;, index)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // item 单个搜索历史记录的点击事件</span><br><span class="line">  const onItemClick = (item) =&gt; &#123;</span><br><span class="line">    emits(EMITS_ITEM_CLICK, item)</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>在父组件<code>view/layout/components/header/header-search/index.vue</code>中导入使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;w-full guide-search&quot;&gt;</span><br><span class="line">    &lt;m-search v-model=&quot;inputValue&quot; @search=&quot;onSearchHandler&quot;&gt;</span><br><span class="line">      &lt;template #dropdown&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;!-- 搜索提示 --&gt;</span><br><span class="line">          &lt;hintVue</span><br><span class="line">            v-show=&quot;inputValue&quot;</span><br><span class="line">            :searchText=&quot;inputValue&quot;</span><br><span class="line">            @itemClick=&quot;onSearchHandler&quot;</span><br><span class="line">          &gt;&lt;/hintVue&gt;</span><br><span class="line">          &lt;!-- 最近搜索 --&gt;</span><br><span class="line">          &lt;historyVue</span><br><span class="line">            v-show=&quot;!inputValue&quot;</span><br><span class="line">            @itemClick=&quot;onSearchHandler&quot;</span><br><span class="line">          &gt;&lt;/historyVue&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/m-search&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">import hintVue from &#x27;./hint.vue&#x27;</span><br><span class="line">import historyVue from &#x27;./history.vue&#x27;</span><br><span class="line"></span><br><span class="line">const store = useStore()</span><br><span class="line">const inputValue = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">// 搜索的回调事件</span><br><span class="line">const onSearchHandler = (val) =&gt; &#123;</span><br><span class="line">  inputValue.value = val</span><br><span class="line">  if (val) &#123;</span><br><span class="line">    store.commit(&#x27;search/addHistory&#x27;, val) // 保存历史记录</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="构建热门精选模块"><a href="#构建热门精选模块" class="headerlink" title="构建热门精选模块"></a>构建热门精选模块</h4><ol><li>在<code>api/pexels.js</code>中定义热门精选主题的接口</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取推荐主题</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getThemes</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pexels/themes&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/header-search/theme.vue</code>中发起接口请求获取数据。并渲染视图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;text-xs mb-1 text-zinc-400&quot;&gt;热门精选&lt;/div&gt;</span><br><span class="line">    &lt;!-- 第一列大图 --&gt;</span><br><span class="line">    &lt;div class=&quot;flex h-[140px]&quot; v-if=&quot;themeData.list.length&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        class=&quot;relative rounded w-[260px] cursor-pointer&quot;</span><br><span class="line">        :style=&quot;&#123; backgroundColor: randomRGB() &#125;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          class=&quot;h-full w-full object-cover rounded&quot;</span><br><span class="line">          v-lazy</span><br><span class="line">          :src=&quot;themeData.big.photo&quot;</span><br><span class="line">          alt=&quot;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;p</span><br><span class="line">          class=&quot;absolute bottom-0 left-0 w-full h-[45%] flex items-center backdrop-blur rounded px-1 text-white text-xs duration-300 hover:backdrop-blur-none&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          # &#123;&#123; themeData.big.title &#125;&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 2，3，4列两行小图 --&gt;</span><br><span class="line">      &lt;div class=&quot;flex flex-wrap flex-1 max-w-[860px]&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          v-for=&quot;item in themeData.list&quot;</span><br><span class="line">          :key=&quot;item.id&quot;</span><br><span class="line">          class=&quot;h-[45%] w-[260px] text-white text-xs relative ml-1.5 mb-1.5 rounded&quot;</span><br><span class="line">          :style=&quot;&#123; backgroundColor: randomRGB() &#125;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;img</span><br><span class="line">            class=&quot;w-full h-full object-cover rounded&quot;</span><br><span class="line">            v-lazy</span><br><span class="line">            :src=&quot;item.photo&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;p</span><br><span class="line">            class=&quot;backdrop-blur absolute top-0 left-0 w-full h-full flex items-center px-1 rounded cursor-pointer duration-300 hover:backdrop-blur-none&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            # &#123;&#123; item.title &#125;&#125;</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; getThemes &#125; from &#x27;@/api/pexels&#x27;</span><br><span class="line">import &#123; randomRGB &#125; from &#x27;@/utils/color&#x27;</span><br><span class="line"></span><br><span class="line">// 热门精选主题数据</span><br><span class="line">const themeData = ref(&#123;</span><br><span class="line">  big: &#123;&#125;,</span><br><span class="line">  list: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 获取 热门精选 数据</span><br><span class="line">const getThemeData = async () =&gt; &#123;</span><br><span class="line">  const &#123; themes &#125; = await getThemes()</span><br><span class="line">  themeData.value = &#123;</span><br><span class="line">    big: themes[0],</span><br><span class="line">    list: themes.splice(1, themes.length)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getThemeData()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>在父组件<code>view/layout/components/header/header-search/index.vue</code>进行搜索框内热门精选的展示</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;w-full guide-search&quot;&gt;</span><br><span class="line">          .....</span><br><span class="line">          &lt;!-- 推荐主题 --&gt;</span><br><span class="line">          &lt;themeVue v-show=&quot;!inputValue&quot;&gt;&lt;/themeVue&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/m-search&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">......</span><br><span class="line">import themeVue from &#x27;./theme.vue&#x27;</span><br><span class="line">.....</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="searchBar与list的联动"><a href="#searchBar与list的联动" class="headerlink" title="searchBar与list的联动"></a>searchBar与list的联动</h4><ol><li>在<code>store/modules/app.js</code>中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ALL_CATEGORY_ITEM</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/constants&#x27;</span></span><br><span class="line"><span class="comment">// app模块中的数据不会被缓存</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">currentCategory</span>: <span class="variable constant_">ALL_CATEGORY_ITEM</span>, </span><br><span class="line">    <span class="attr">searchText</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 搜索的文本</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 修改 searchText</span></span><br><span class="line">    <span class="title function_">changeSearchText</span>(<span class="params">state, newSearchText</span>) &#123;</span><br><span class="line">      state.<span class="property">searchText</span> = newSearchText</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>store/getters.js</code>新增快捷访问</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">........</span><br><span class="line">  <span class="comment">// 搜索文本</span></span><br><span class="line">  <span class="attr">searchText</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">app</span>.<span class="property">searchText</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/componentx/header/header-search/index.vue</code>中触发搜索<code>changeSearchText</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">......</span><br><span class="line">// 搜索的回调事件</span><br><span class="line">const onSearchHandler = (val) =&gt; &#123;</span><br><span class="line">  inputValue.value = val</span><br><span class="line">  if (val) &#123;</span><br><span class="line">    store.commit(&#x27;search/addHistory&#x27;, val)</span><br><span class="line">    store.commit(&#x27;app/changeSearchText&#x27;, val) // 触发 searchText 变化</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>在<code>view/main/components/list/index.vue</code>中监听搜索内容项<code>searchText</code>的变化</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">......</span><br><span class="line">// 监听搜索内容项searchText的变化</span><br><span class="line">watch(</span><br><span class="line">  () =&gt; store.getters.searchText,</span><br><span class="line">  (val) =&gt; &#123;</span><br><span class="line">    // 重置请求参数</span><br><span class="line">    resetQuery(&#123;</span><br><span class="line">      page: 1,</span><br><span class="line">      searchText: val</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="24、通用组件-confirm"><a href="#24、通用组件-confirm" class="headerlink" title="24、通用组件 confirm"></a>24、通用组件 <code>confirm</code></h3><p>想要搞明白这一点，就需要了解一些比较冷僻的知识点，那就是渲染函数，在渲染函数中，需要了解如下概念：</p><ul><li><p><strong>虚拟<code>dom</code></strong>：通过<code>js</code>来描述<code>dom</code></p></li><li><p><strong><code>vnode</code>虚拟节点</strong>：告诉<code>vue</code>页面上需要渲染什么样子的节点</p></li><li><p><strong><code>h</code>函数:</strong> 用来创建<code>vnode</code>的函数，接受三个参数(要渲染的 <code>dom</code>，<code>attrs对象</code>，子元素)</p></li><li><p><strong><code>render</code></strong>函数：可以根据<code>vnode</code>来渲染<code>dom</code></p></li></ul><p><strong>通过<code>h</code>函数可以生成一个<code>vnode</code>，该 <code>vnode</code> 可以通过 <code>render</code>函数被渲染</strong></p><p>所以据此我们就可以得出 <code>confirm</code> 组件的实现思路：</p><ol><li>创建一个<code>confirm</code>组件</li><li>创建一个<code>index.js</code>模块，在该模块中<strong>返回一个 <code>promise</code></strong></li><li>同时利用<code>h</code>函数生成<code>confirm.vue</code>的<code>vnode</code></li><li>最后利用<code>render</code>函数，渲染<code>vnode</code>到 <code>body</code>中</li></ol><h4 id="构建confirm组件"><a href="#构建confirm组件" class="headerlink" title="构建confirm组件"></a>构建<code>confirm</code>组件</h4><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191508046.jpeg" alt="image-20220830160243841"> </p><p>说明： </p><p><code>confirm/index.vue</code>：是confirm组件<br><code>confirm/index.js</code>：是confirm导出的函数，通过调用函数可以触发confirm显示</p><blockquote><p>在封装之前，需要明确当前要封装的组件，和<code>Vue</code>主程序的组件是不一样的；可以把它和主程序看做是两个不同的程序、所以它不能直接从主程序注册的组件中拿过来使用、也不能获取到主程序的<code>app</code></p></blockquote><p><strong>封装细节：</strong></p><ol><li>创建<code>libs/confirm/index.vue</code>组件，并创建对应的<code>props</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 标题</span></span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 描述</span></span><br><span class="line">  <span class="attr">content</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消按钮文本</span></span><br><span class="line">  <span class="attr">cancelText</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;取消&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 确定按钮文本</span></span><br><span class="line">  <span class="attr">confirmText</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;确定&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消按钮事件</span></span><br><span class="line">  <span class="attr">cancelHandler</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Function</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 确定按钮事件</span></span><br><span class="line">  <span class="attr">confirmHandler</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Function</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 关闭 confirm 的回调</span></span><br><span class="line">  <span class="attr">close</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Function</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>因为最终<code>confirm</code>组件是通过方法进行调用的，会导致 <strong>自动导入的组件无法使用</strong>，所以需要手动导入需要使用到的通用组件：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为将来confirm 组件会以方法调用的形式展示，需要主动导入组件</span></span><br><span class="line"><span class="keyword">import</span> mButton <span class="keyword">from</span> <span class="string">&#x27;../button/index.vue&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>创建对应样式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 蒙版 --&gt;</span><br><span class="line">    &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;isVisable&quot;</span><br><span class="line">        @click=&quot;close&quot;</span><br><span class="line">        class=&quot;w-screen h-screen bg-zinc-900/80 z-40 fixed top-0 left-0&quot;</span><br><span class="line">      &gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;!-- 提示内容 --&gt;</span><br><span class="line">    &lt;transition name=&quot;up&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-if=&quot;isVisable&quot;</span><br><span class="line">        class=&quot;w-[80%] fixed top-1/3 left-[50%] translate-x-[-50%] z-50 px-2 py-1.5 rounded-sm border dark:border-zinc-600 cursor-pointer bg-white dark:bg-zinc-800 xl:w-[35%]&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 标题 --&gt;</span><br><span class="line">        &lt;div class=&quot;text-lg font-bold text-zinc-900 dark:text-zinc-200 mb-2&quot;&gt;</span><br><span class="line">          &#123;&#123; title &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 内容文本 --&gt;</span><br><span class="line">        &lt;div class=&quot;text-base text-zinc-900 dark:text-zinc-200 mb-2&quot;&gt;</span><br><span class="line">          &#123;&#123; content &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 底部 取消 &amp; 确认 按钮 --&gt;</span><br><span class="line">        &lt;div class=&quot;flex justify-end&quot;&gt;</span><br><span class="line">          &lt;mButton type=&quot;info&quot; class=&quot;mr-2&quot; @click=&quot;onCancelClick&quot;&gt;</span><br><span class="line">            &#123;&#123; cancelText&#125;&#125;</span><br><span class="line">          &lt;/mButton&gt;</span><br><span class="line">          &lt;mButton type=&quot;primary&quot; @click=&quot;onConfirmClick&quot;&gt;</span><br><span class="line">            &#123;&#123; confirmText &#125;&#125;</span><br><span class="line">          &lt;/mButton&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  transition: all 0.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter-from,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">// up动画</span><br><span class="line">.up-enter-active,</span><br><span class="line">.up-leave-active &#123;</span><br><span class="line">  transition: all 0.5s;</span><br><span class="line">&#125;</span><br><span class="line">// 准备进入，离开完成</span><br><span class="line">.up-enter-from,</span><br><span class="line">.up-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-50%, 100px, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>创建展示控制方法，由于<code>confirm</code>是有动画的、并且将来要将confirm对应的<code>vnode</code>通过<code>render</code>函数挂载到真实<code>dom</code>上；所以<strong>要先等组件挂载到页面上之后再控制confirm显示</strong>；同样，<strong>要等到关闭动画执行完之后再将真实dom从页面上移除</strong>。所以在<code>mounted</code>时，让内容展示：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirm 提示框的展示</span></span><br><span class="line"><span class="keyword">const</span> isVisable = <span class="title function_">ref</span>(<span class="literal">false</span>) <span class="comment">// 控制显示处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">show</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isVisable.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理动画(render 函数的渲染，会直接进行)</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">show</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>处理关闭控制方法，同样因为动画需要展示，所以需要预留动画执行时间：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭动画执行时间</span></span><br><span class="line"><span class="keyword">const</span> duration = <span class="string">&#x27;0.5s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// confirm 关闭，保留动画执行时长</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">close</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isVisable.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">  <span class="comment">//延迟一段时间进行关闭，等待动画完全关闭之后，再去触发props.close()</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">close</span>) &#123;</span><br><span class="line">      props.<span class="title function_">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="built_in">parseInt</span>(duration.<span class="title function_">replace</span>(<span class="string">&#x27;0.&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) * <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>利用 <a href="https://cn.vuejs.org/api/sfc-css-features.html#v-bind-in-css">状态驱动css概念</a> 绑定响应式数据到<code>css</code>中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> scoped&gt;</span><br><span class="line">.<span class="property">fade</span>-enter-active,</span><br><span class="line">.<span class="property">fade</span>-leave-active &#123;</span><br><span class="line">  <span class="attr">transition</span>: all v-<span class="title function_">bind</span>(duration);</span><br><span class="line">&#125;</span><br><span class="line">........</span><br><span class="line"><span class="comment">// up动画</span></span><br><span class="line">.<span class="property">up</span>-enter-active,</span><br><span class="line">.<span class="property">up</span>-leave-active &#123;</span><br><span class="line">  <span class="attr">transition</span>: all v-<span class="title function_">bind</span>(duration);</span><br><span class="line">&#125;</span><br><span class="line">.......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>取消按钮和确定按钮的点击事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消按钮的点击事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onCancelClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="property">cancelHandler</span>) &#123;</span><br><span class="line">    props.<span class="title function_">cancelHandler</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定按钮的点击事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onConfirmClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="property">confirmHandler</span>) &#123;</span><br><span class="line">    props.<span class="title function_">confirmHandler</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="api调用函数"><a href="#api调用函数" class="headerlink" title="api调用函数"></a><code>api</code>调用函数</h4><p><strong>函数的作用</strong>：</p><ul><li>1、当函数被调用时<code>confirm</code>组件展示</li><li>2、函数的返回值为<code>promise</code>对象、<ul><li>2.1、当用户点击取消按钮时、promise状态为<code>拒绝</code>状态</li><li>2.2、当用户点击确认按钮时、promise状态为<code>成功</code>状态</li></ul></li><li>3、<code>title</code>和<code>content</code>至少有一个、当<code>title</code>有时<code>content</code>没有时，把<code>title</code>的值赋值给<code>content</code>，<code>title</code>的值置为空</li></ul><p><strong>实现的一些api说明：</strong></p><p><strong>h函数</strong>：<a href="https://cn.vuejs.org/api/render-function.html#h">官网</a> 根据传入的参数生成对应的<code>vnode</code> 虚拟<code>dom</code></p><p>​    常见的h函数的第一个参数一般都是标签名， 但在<code>vue3</code>提供的<strong>h函数</strong> <strong>第一个参数不但可以接收字符串变签名，还可以支持组件</strong></p><p><strong>render函数</strong>： 在vue3中有两种render： 第一种就是组件中的render，它返回一个vnode树； 第二种就是本次使用的render，它的作用就是将虚拟dom渲染到真实dom中</p><p>在<code>libs/confirm/index.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> confirmComponent <span class="keyword">from</span> <span class="string">&#x27;./index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 展示confirm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; title 标题（如果用户没有传递内容，那么标题被作为内容）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; content 文本内容（如果没有title，那么content会被作为第一个参数传入）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; cancelText 取消按钮文本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; confirmText 确定按钮文本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">confirm</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  title,</span></span><br><span class="line"><span class="params">  content,</span></span><br><span class="line"><span class="params">  cancelText = <span class="string">&#x27;取消&#x27;</span>,</span></span><br><span class="line"><span class="params">  confirmText = <span class="string">&#x27;确定&#x27;</span></span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 允许只传递 content</span></span><br><span class="line">    <span class="keyword">if</span> (title &amp;&amp; !content) &#123;</span><br><span class="line">      content = title</span><br><span class="line">      title = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭弹层事件 - 在用户点击关闭弹框后，会延时.5s执行，目的是让动画走完</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">close</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 3. 把渲染的 vnode 去掉 - 此时动画已经走完、所以将组件从页面中移除</span></span><br><span class="line">      <span class="title function_">render</span>(<span class="literal">null</span>, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消按钮事件</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">cancelHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;取消按钮点击&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定按钮事件</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">confirmHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 生成vnode - 通过h函数将confirm组件创建成对应的虚拟dom ， 第二项传入组件的属性值</span></span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="title function_">h</span>(confirmComponent, &#123;</span><br><span class="line">      title,</span><br><span class="line">      content,</span><br><span class="line">      cancelText,</span><br><span class="line">      confirmText,</span><br><span class="line">      confirmHandler,</span><br><span class="line">      cancelHandler,</span><br><span class="line">      close</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 2. render渲染 - // 通过render函数创虚拟dom挂载到真实dom上</span></span><br><span class="line">    <span class="title function_">render</span>(vnode, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191508192.jpeg" alt="image-20220830172046623"> </p><ol><li>在<code>libs/index.js</code>导入并导出<code>confirm</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动化注册组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; confirm &#125; <span class="keyword">from</span> <span class="string">&#x27;./confirm&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>在<code>view/layout/components/header/header-search/history</code>中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> confirm <span class="keyword">from</span> <span class="string">&#x27;@/libs/confirm/index&#x27;</span></span><br><span class="line">  <span class="comment">// 删除所有搜索历史记录</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onDeleteAllClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">confirm</span>(<span class="string">&#x27;提示&#x27;</span>, <span class="string">&#x27;要删除所有历史记录吗？&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.<span class="title function_">commit</span>(<span class="string">&#x27;search/deleteAllHistory&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="25、通用组件message"><a href="#25、通用组件message" class="headerlink" title="25、通用组件message"></a>25、通用组件<code>message</code></h3><h4 id="图片下载功能"><a href="#图片下载功能" class="headerlink" title="图片下载功能"></a>图片下载功能</h4><p>功能：当点击图片item中的下载按钮时，可以下载当前的图片。<br>目前常用的支持下载功能包有两个：</p><pre><code> 1. 小文件下载：[file-saver](https://github.com/eligrey/FileSaver.js) 2. 大文件下载：[streamsaver](https://github.com/jimmywarting/StreamSaver.js)</code></pre><p>本项目图片下载属于小文件的下载，可以直接使用<code>file-saver</code></p><ol><li>安装file-saver ：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save file-saver</span><br></pre></td></tr></table></figure><ol><li>在 <code>src/views/main/components/list/item.vue</code>中，增加下载功能：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ......</span><br><span class="line">          &lt;!-- 图片内按钮 - 下载 --&gt;</span><br><span class="line">          &lt;m-button</span><br><span class="line">            class=&quot;absolute bottom-1.5 left-1.5 bg-zinc-100/70&quot;</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            size=&quot;small&quot;</span><br><span class="line">            icon=&quot;download&quot;</span><br><span class="line">            iconClass=&quot;fill-zinc-900 dark:fill-zinc-200&quot;</span><br><span class="line">            @click=&quot;onDownload&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">  .......</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; randomRGB &#125; from &#x27;@/utils/color&#x27;</span><br><span class="line">import &#123; saveAs &#125; from &#x27;file-saver&#x27;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    width: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 图片下载按钮点击事件</span><br><span class="line"> const onDownload = () =&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 接收两个参数：</span><br><span class="line">     * 1. 下载的图片链接</span><br><span class="line">     * 2. 下载的文件名称</span><br><span class="line">     */</span><br><span class="line">    saveAs(props.data.photoDownLink)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="封装message组件"><a href="#封装message组件" class="headerlink" title="封装message组件"></a>封装<code>message</code>组件</h4><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408191509587.gif" alt="20220831_142332"> </p><p>之前构建过一个 <code>confirm</code> 的通用组件，该组件可以直接通过方法进行调用展示<br>而接下来的<code>message</code>组件，同样如此，依然通过方法的调用直接展示对应的组件。</p><p>根据之前的经验，<code>message</code>的构建过程应为:</p><ol><li><p>首先需要先构建出一个对应的<code>message/index.vue</code></p></li><li><p>然后构建出对应的<code>message/index.js</code>模块</p></li><li><p>在模块中，通过：</p><pre><code>1. `h`函数构建`vnode`2. `render`函数，进行渲染</code></pre><p>进行处理。</p></li></ol><p><strong><code>message</code>的功能：</strong></p><ul><li>1、要有四种状态：<code>success</code>、<code>warning</code>、<code>error</code>、<code>info</code></li><li>2、屏幕支持同时创建多个<code>message</code>，多个<code>message</code>自上而下排列</li><li>3、显示和隐藏时要有自上而下的过渡动画</li><li>4、当有新的<code>message</code>展示时，其他<code>message</code>要暂停隐藏、直到空闲<code>.5s</code>后再隐藏</li></ul><p><strong>主要说明</strong>：</p><blockquote><p>如果需要同屏显示多个message实例的话，需要对每一个message实例创建一个div、并将div挂载到页面上</p></blockquote><ol><li>创建<code>libs/message/index.vue</code>组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import mSvgIcon from &#x27;../svg-icon/index.vue&#x27;</span><br><span class="line">// 消息类型的可选项</span><br><span class="line">const typeEnum = [&#x27;success&#x27;, &#x27;warn&#x27;, &#x27;error&#x27;]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  // message 的消息类型</span><br><span class="line">  type: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">    validator(val) &#123;</span><br><span class="line">      const result = typeEnum.includes(val)</span><br><span class="line">      if (!result) &#123;</span><br><span class="line">        throw new Error(`你的 type 必须是 $&#123;typeEnum.join(&#x27;、&#x27;)&#125; 中的一个`)</span><br><span class="line">      &#125;</span><br><span class="line">      return result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 描述文本</span><br><span class="line">  content: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 展示时长</span><br><span class="line">  duration: &#123;</span><br><span class="line">    type: Number</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  // 关闭message提示时的回调</span><br><span class="line">  destroy: &#123;</span><br><span class="line">    type: Function</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>构建各种状态下的样式表</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// message提示的样式表数据</span></span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  <span class="comment">// 警告</span></span><br><span class="line">  <span class="attr">warn</span>: &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">    <span class="attr">fillClass</span>: <span class="string">&#x27;fill-warn-300&#x27;</span>,</span><br><span class="line">    <span class="attr">textClass</span>: <span class="string">&#x27;text-warn-300&#x27;</span>,</span><br><span class="line">    <span class="attr">containerClass</span>: <span class="string">&#x27;bg-warn-100 border-warn-200  hover:shadow-lg hover:shadow-warn-100&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 错误</span></span><br><span class="line">  <span class="attr">error</span>: &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    <span class="attr">fillClass</span>: <span class="string">&#x27;fill-error-300&#x27;</span>,</span><br><span class="line">    <span class="attr">textClass</span>: <span class="string">&#x27;text-error-300&#x27;</span>,</span><br><span class="line">    <span class="attr">containerClass</span>: <span class="string">&#x27;bg-error-100 border-error-200  hover:shadow-lg hover:shadow-error-100&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 成功</span></span><br><span class="line">  <span class="attr">success</span>: &#123;</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">fillClass</span>: <span class="string">&#x27;fill-success-300&#x27;</span>,</span><br><span class="line">    <span class="attr">textClass</span>: <span class="string">&#x27;text-success-300&#x27;</span>,</span><br><span class="line">    <span class="attr">containerClass</span>: <span class="string">&#x27;bg-success-100 border-success-200  hover:shadow-lg hover:shadow-success-100&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>配合样式表，构建对应的<code>template</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition name=&quot;down&quot; @after-leave=&quot;destroy&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=&quot;isVisable&quot;</span><br><span class="line">      class=&quot;min-w-[420px] fixed top-[20px] left-[50%] translate-x-[-50%] z-50 flex items-center px-3 py-1.5 rounded-sm border cursor-pointer&quot;</span><br><span class="line">      :class=&quot;styles[type].containerClass&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;m-svg-icon</span><br><span class="line">        :name=&quot;styles[type].icon&quot;</span><br><span class="line">        :fillClass=&quot;styles[type].fillClass&quot;</span><br><span class="line">        class=&quot;h-1.5 w-1.5 mr-1.5&quot;</span><br><span class="line">      &gt;&lt;/m-svg-icon&gt;</span><br><span class="line">      &lt;span class=&quot;text-sm&quot; :class=&quot;styles[type].textClass&quot;&gt;</span><br><span class="line">        &#123;&#123; content &#125;&#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.down-enter-active,</span><br><span class="line">.down-leave-active &#123;</span><br><span class="line">  transition: all 0.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.down-enter-from,</span><br><span class="line">.down-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-50%, -100px, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>处理展示逻辑</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制显示处理</span></span><br><span class="line"><span class="keyword">const</span> isVisable = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 保证动画展示，需要在 mounted 之后进行展示</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  isVisable.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 延迟时间关闭</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    isVisable.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">  &#125;, props.<span class="property">duration</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>新增<code>tailwind</code>的自定义样式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;success-100&#x27;</span>: <span class="string">&#x27;#F2F9EC&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;success-200&#x27;</span>: <span class="string">&#x27;#E4F2DB&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;success-300&#x27;</span>: <span class="string">&#x27;#7EC050&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;warn-100&#x27;</span>: <span class="string">&#x27;#FCF6ED&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;warn-200&#x27;</span>: <span class="string">&#x27;#F8ECDA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;warn-300&#x27;</span>: <span class="string">&#x27;#DCA550&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;error-100&#x27;</span>: <span class="string">&#x27;#ED7456&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;error-200&#x27;</span>: <span class="string">&#x27;#f3471c&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;error-300&#x27;</span>: <span class="string">&#x27;#ffffff&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="组件的展示"><a href="#组件的展示" class="headerlink" title="组件的展示"></a>组件的展示</h4><ol><li>在<code>libs/message/index.js</code>中的展示方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> messageComponent <span class="keyword">from</span> <span class="string">&#x27;./index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">message</span> = (<span class="params">type, content, duration = <span class="number">3000</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 动画结束时的回调</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onDestroy</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 3. message 销毁</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="literal">null</span>, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 返回 vnode</span></span><br><span class="line">  <span class="keyword">const</span> vnode = <span class="title function_">h</span>(messageComponent, &#123;</span><br><span class="line">    type,</span><br><span class="line">    content,</span><br><span class="line">    duration,</span><br><span class="line">    <span class="attr">destroy</span>: onDestroy</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 2. render</span></span><br><span class="line">  <span class="title function_">render</span>(vnode, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在<code>libs/index.js</code>中导出方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动化注册组件</span></span><br><span class="line"><span class="keyword">export</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;./message&#x27;</span></span><br></pre></td></tr></table></figure><ol><li>在<code>item</code>中使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; randomRGB &#125; from &#x27;@/utils/color&#x27;</span><br><span class="line">import &#123; saveAs &#125; from &#x27;file-saver&#x27;</span><br><span class="line">import &#123; message &#125; from &#x27;@/libs&#x27;;</span><br><span class="line">.....</span><br><span class="line">// 图片下载按钮点击事件</span><br><span class="line">const onDownload = () =&gt; &#123;</span><br><span class="line">  // 提示消息</span><br><span class="line">  message(&#x27;success&#x27;, &#x27;图片开始下载&#x27;)</span><br><span class="line">  // 延迟一段时间执行，可以得到更好的体验</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 接收两个参数：</span><br><span class="line">     * 1. 下载的图片链接</span><br><span class="line">     * 2. 下载的文件名称</span><br><span class="line">     */</span><br><span class="line">    saveAs(</span><br><span class="line">      props.data.photoDownLink,</span><br><span class="line">      `$&#123;props.data.title&#125; - 作者：$&#123;props.data.author&#125;`</span><br><span class="line">    )</span><br><span class="line">  &#125;, 100)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串篇</title>
      <link href="/2024/08/02/algorithm-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/08/02/algorithm-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串篇"><a href="#字符串篇" class="headerlink" title="字符串篇"></a>字符串篇</h1><h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，必须<strong><a href="https://baike.baidu.com/item/原地算法">原地</a>修改输入数组</strong>、使用 O(1) 的额外空间解决这一问题。</p><p>示例： 输入：[“h”,”e”,”l”,”l”,”o”]<br>            输出：[“o”,”l”,”l”,”e”,”h”]</p><blockquote><p>思路：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseString = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,right = s.<span class="property">length</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="comment">// 解构赋值交换</span></span><br><span class="line">        [s[left], s[right]] = [s[right], s[left]]</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541.反转字符串II"></a>541.反转字符串II</h2><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><p>示例： 输入： s = “abcdefg”, k = 2<br>            输出： “bacdfeg”</p><blockquote><p>思路：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseStr = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> resArr = s.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i += <span class="number">2</span>*k)&#123; <span class="comment">// 每隔 2k 个字符的前 k 个字符进行反转</span></span><br><span class="line">    <span class="comment">// 如果 i + k 超出字符串长度，则 right 设置为字符串的最后一个字符</span></span><br><span class="line">        <span class="keyword">let</span> left = i, right = <span class="title class_">Math</span>.<span class="title function_">min</span>(i+k-<span class="number">1</span>,s.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            [resArr[left], resA[right]] = [resArr[right], resA[left]]</span><br><span class="line">            left++</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h2><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p>示例：输入: “the sky is blue”<br>           输出: “blue is sky the”</p><blockquote><p>思路：将字符串转化为数组，移除首尾和中间重复空格，再翻转整个字符串，然后，遍历数组字符串，<br>           遇到空格或到达字符数组的末尾时翻转单词，最后return。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> resArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(s)</span><br><span class="line">    <span class="title function_">removeExtraSpaces</span>(resArr)<span class="comment">// 删除多余空格</span></span><br><span class="line">    <span class="title function_">reverse</span>(resArr, <span class="number">0</span>, resArr.<span class="property">length</span>-<span class="number">1</span>) <span class="comment">// 翻转整个字符数组</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span> <span class="comment">// 初始化单词的起始位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= resArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 遇到空格或到达字符数组的末尾时翻转单词</span></span><br><span class="line">        <span class="keyword">if</span>(resArr[i] === <span class="string">&quot; &quot;</span> || i === resArr.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="title function_">reverse</span>(resArr, start, i-<span class="number">1</span>)</span><br><span class="line">            start = i+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除多余空格</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeExtraSpaces</span>(<span class="params">resArr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> slowIndex = fastIndex = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 快指针遍历字符数组</span></span><br><span class="line">    <span class="keyword">while</span>(fastIndex &lt; resArr.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="comment">// 移除开始位置的空格和重复的空格</span></span><br><span class="line">        <span class="keyword">if</span>(resArr[fastIndex] === <span class="string">&#x27; &#x27;</span> &amp;&amp; (fastIndex === <span class="number">0</span> || resArr[fastIndex-<span class="number">1</span>] === <span class="string">&#x27; &#x27;</span>))&#123;</span><br><span class="line">            fastIndex++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resArr[slowIndex++] = resArr[fastIndex++]<span class="comment">// 将非空格字符移动到慢指针位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移除末尾的空格</span></span><br><span class="line">    <span class="keyword">if</span>(resArr[slowIndex - <span class="number">1</span>] === <span class="string">&quot; &quot;</span>)&#123;</span><br><span class="line">        resArr.<span class="property">length</span> = slowIndex - <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        resArr.<span class="property">length</span> = slowIndex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span> (resArr, start , end) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = start, right = end</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        [resArr[left], resArr[right]] = [resArr[right], resArr[left]]</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h2><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串<br>出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p><p>示例：输入：haystack = “hello”, needle = “ll”<br>           输出： 2</p><p>思路：<br>前缀表统一减一      </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strStr = <span class="keyword">function</span> (<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 构建部分匹配表（next 数组）</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getNext</span> = (<span class="params">needle</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> next = [];</span><br><span class="line">        <span class="keyword">let</span> j = -<span class="number">1</span>;</span><br><span class="line">        next.<span class="title function_">push</span>(j);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; needle.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">// 如果当前字符与前缀的下一个字符不匹配，跳到前一个匹配位置的 next 值</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; needle[i] !== needle[j + <span class="number">1</span>])  j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (needle[i] === needle[j + <span class="number">1</span>]) j++;<span class="comment">// 如果匹配，前缀末尾指针向前移动</span></span><br><span class="line">            next.<span class="title function_">push</span>(j);<span class="comment">// 记录当前字符的 next 值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找 needle 在 haystack 中的位置：</span></span><br><span class="line">    <span class="keyword">let</span> next = <span class="title function_">getNext</span>(needle);</span><br><span class="line">    <span class="keyword">let</span> j = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; haystack.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">// 如果当前字符与前缀的下一个字符不匹配，跳到前一个匹配位置的 next 值</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; haystack[i] !== needle[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line">        <span class="keyword">if</span> (haystack[i] === needle[j + <span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j === needle.<span class="property">length</span> - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果前缀末尾指针到达 needle 的末尾，匹配成功，返回匹配起始位置</span></span><br><span class="line">            <span class="keyword">return</span> (i - needle.<span class="property">length</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459.重复的子字符串"></a>459.重复的子字符串</h2><p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。<br>给定的字符串只含有小写英文字母，并且长度不超过10000。</p><p>示例：输入：”abcabcabcabc”<br>           输出： True<br>           解释： 可由子字符串 “abc” 重复四次构成。 (或者子字符串 “abcabc” 重复两次构成。)</p><p>-思路：</p><p>前缀表统一不减一<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> repeatedSubstringPattern = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getNext</span> = (<span class="params">s</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> next = [];</span><br><span class="line">        <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        next.<span class="title function_">push</span>(j);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; s.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] !== s[j])</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (s[i] === s[j])</span><br><span class="line">                j++;</span><br><span class="line">            next.<span class="title function_">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> next = <span class="title function_">getNext</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next[next.<span class="property">length</span> - <span class="number">1</span>] !== <span class="number">0</span> &amp;&amp; s.<span class="property">length</span> % (s.<span class="property">length</span> - next[next.<span class="property">length</span> - <span class="number">1</span>]) === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈与队列篇</title>
      <link href="/2024/08/02/algorithm-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2024/08/02/algorithm-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="栈与队列（先进后出、先入先出）"><a href="#栈与队列（先进后出、先入先出）" class="headerlink" title="栈与队列（先进后出、先入先出）"></a>栈与队列（先进后出、先入先出）</h1><h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h2><p>使用栈实现队列的下列操作：<br>        push(x) — 将一个元素放入队列的尾部。<br>        pop() — 从队列首部移除元素。<br>        peek() — 返回队列首部的元素。<br>        empty() — 返回队列是否为空。</p><blockquote><p>思路： 使用两个数组的栈方法（push, pop） 实现队列</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 构造函数 MyQueue</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyQueue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">stackIn</span> = [];  <span class="comment">//输入栈</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">stackOut</span> = []; <span class="comment">//输出栈</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push方法</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="title function_">push</span>(x);<span class="comment">// 将元素 x 压入输入栈</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop方法</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;  <span class="comment">// 如果输出栈为空</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;  <span class="comment">// 将输入栈的所有元素移动到输出栈</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="title function_">pop</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">pop</span>();  <span class="comment">// 弹出输出栈的栈顶元素</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// peek方法</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> front = <span class="variable language_">this</span>.<span class="title function_">pop</span>();  <span class="comment">// 获取队列的头部元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">push</span>(front);  <span class="comment">// 再次将该元素压入输出栈</span></span><br><span class="line">    <span class="keyword">return</span> front;  <span class="comment">// 返回队列的头部元素</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// empty方法</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 判断输入栈和输出栈是否都为空</span></span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="property">length</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="property">length</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h2><p>使用队列实现栈的下列操作：<br>        push(x) — 元素 x 入栈<br>        pop() — 移除栈顶元素。<br>        peek() — 返回栈顶的元素。<br>        empty() — 返回栈是否为空</p><blockquote><p>使用两个队列实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyStack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue2</span> = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push方法:元素 x 入栈</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">push</span>(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop方法:移除栈顶元素，并返回</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 减少两个队列交换的次数， 只有当queue1为空时，交换两个队列</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        [<span class="variable language_">this</span>.<span class="property">queue1</span>, <span class="variable language_">this</span>.<span class="property">queue2</span>] = [<span class="variable language_">this</span>.<span class="property">queue2</span>, <span class="variable language_">this</span>.<span class="property">queue1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// shift() 方法从数组中删除第一个元素，并返回该元素的值。</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue2</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">shift</span>());<span class="comment">//移除队列1元素加入队列2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">shift</span>();<span class="comment">//将队列1剩下的最后一个数移除（栈顶元素）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// top方法:返回栈顶的元素</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="variable language_">this</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">push</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// empty方法:返回栈是否为空</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">queue2</span>.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用一个队列实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyStack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push方法:元素 x 入栈</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop方法:移除栈顶元素</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(size-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 先移除队列里size-1个数，再加入队列</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();<span class="comment">//移除队列里第一个数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// top方法:返回栈顶的元素</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 将栈顶元素加入队列再return x</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="variable language_">this</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// empty方法:返回栈是否为空</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>示例1： 输入： “([)]”       示例 2： 输入： “{[]}”<br>              输出： false                     输出： true</p><p>思路：</p><blockquote><p>遍历字符串，遇到左括号（(、[ 或 {）,就将对应的右括号（)、] 或 }）压入栈中；<br>遇到右括号，检查是否与栈顶元素匹配。如果不匹配或栈为空，则返回 false。<br>遍历结束后，检查栈是否为空。若为空，则表示所有的括号都匹配，返回 true；否则返回 false。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = s[i];</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        stack.<span class="title function_">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">        stack.<span class="title function_">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">        stack.<span class="title function_">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (c !== stack.<span class="title function_">pop</span>()) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化版本</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [], </span><br><span class="line">        map = &#123;</span><br><span class="line">            <span class="string">&quot;(&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#123;&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[&quot;</span>:<span class="string">&quot;]&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> x <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x <span class="keyword">in</span> map) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(x);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(map[stack.<span class="title function_">pop</span>()] !== x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h2><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。<br>在 S 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p>示例： 输入：”abbaca”<br>            输出：”ca”</p><p>思路：</p><blockquote><p>初始化一个空栈 stack; 遍历字符串,如果当前字符与栈顶字符相同，则移除栈顶字符;<br>如果当前字符与栈顶字符不同，则将当前字符压入栈中。最后，将栈中的字符连接成一个字符串并返回。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i === result[result.<span class="property">length</span>-<span class="number">1</span>])&#123;</span><br><span class="line">            result.<span class="title function_">pop</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>原地解法（双指针模拟栈）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    s = [...s];</span><br><span class="line">    <span class="keyword">let</span> top = -<span class="number">1</span>; <span class="comment">// 指向栈顶元素的下标</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(top === -<span class="number">1</span> || s[top] !== s[i]) &#123; <span class="comment">// top === -1 即空栈</span></span><br><span class="line">            s[++top] = s[i]; <span class="comment">// 入栈</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            top--; <span class="comment">// 推出栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="property">length</span> = top + <span class="number">1</span>; <span class="comment">// 栈顶元素下标 + 1 为栈的长度</span></span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h2><p>根据逆波兰表示法，求表达式的值。有效的运算符包括 + ,  - ,  * ,  / 。<br>每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>示例： 输入： [“2”, “1”, “+”, “3”, “ <em> “]<br>            输出： 9   —&gt;   ((2 + 1) </em> 3) = 9</p><p>思路：</p><blockquote><p>初始化一个空栈 stack，遍历输入的 tokens：<br>    若当前 token 是一个数字，则将其转换为数字并压入栈中。<br>    若当前 token 是一个运算符，则从栈中弹出两个数字，进行相应的运算，并将结果压入栈中。<br>遍历结束后，栈中的唯一元素即为表达式的结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> evalRPN = <span class="keyword">function</span> (<span class="params">tokens</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> token <span class="keyword">of</span> tokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(token))) &#123; <span class="comment">// 非数字</span></span><br><span class="line">            <span class="keyword">const</span> n2 = stack.<span class="title function_">pop</span>(); <span class="comment">// 出栈两个数字</span></span><br><span class="line">            <span class="keyword">const</span> n1 = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">switch</span> (token) &#123; <span class="comment">// 判断运算符类型，算出新数入栈</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 + n2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 - n2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 * n2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    <span class="comment">// | 0 是一种位操作符，会将操作数转换为32位整数，去掉小数部分，从而实现向下取整的效果</span></span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 / n2 | <span class="number">0</span>); <span class="comment">// 例：±2.5 |0 = ±2</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 数字</span></span><br><span class="line">            stack.<span class="title function_">push</span>(<span class="title class_">Number</span>(token));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack[<span class="number">0</span>];  <span class="comment">// 返回栈顶元素</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="239-滑动窗口最大值（困难）-—-单调队列"><a href="#239-滑动窗口最大值（困难）-—-单调队列" class="headerlink" title="239. 滑动窗口最大值（困难）   —- 单调队列"></a>239. 滑动窗口最大值（困难）   —- 单调队列</h2><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。<br>你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。返回滑动窗口中的最大值。</p><p>示例： 输入： nums = [1, 3, -1, -3, 5, 3, 6, 7], 和 k = 3<br>            输出： [3, 3, 5, 5, 6, 7]</p><p>思路：</p><blockquote><p>初始检查：若输入数组 nums 为空或 k 为 0，直接返回空数组 []。<br>定义队列 queue 和结果数组 MaxRes (存储每个滑动窗口的最大值)<br>遍历数组nums，对于每个元素 nums[i]：<br>        若队首元素索引小于当前滑动窗口的起始索引 i - k + 1，将其移除。<br>        若当前元素 nums[i] 大于或等于队尾元素对应的值，则移除队尾元素。<br>    将当前元素的索引 i 入队。当 i 大于等于 k - 1 时，滑动窗口完全形成。<br>    将队首元素对应的值加入结果数组 MaxRes，返回结果MaxRes</p></blockquote><p>​    ——————<br>入  首             尾    出<br>​    ——————</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="property">length</span> == <span class="number">0</span> || k == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> queue = [],ans = [],len = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(queue.<span class="property">length</span> == <span class="number">0</span>) queue.<span class="title function_">push</span>(i)</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//保证队首元素的下标和将要push的元素的下标满足indexIn - indexOut&lt;= k-1</span></span><br><span class="line">            <span class="comment">//如果不满足，就直接弹出队首元素</span></span><br><span class="line">            <span class="keyword">while</span>(i - queue[<span class="number">0</span>] &gt; k - <span class="number">1</span>) queue.<span class="title function_">shift</span>()</span><br><span class="line">            <span class="comment">//保证队列的单调性，如果push的元素大于队尾的元素，那么就将队尾的元素弹出，直到push的元素小于等于队尾的元素</span></span><br><span class="line">            <span class="keyword">while</span>(nums[i] &gt;= nums[queue[queue.<span class="property">length</span> - <span class="number">1</span>]]) queue.<span class="title function_">pop</span>()</span><br><span class="line">            queue.<span class="title function_">push</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当i &gt;= k - 1时，每滑动一次，就将队首元素放入最后的结果数组中</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) ans.<span class="title function_">push</span>(nums[queue[<span class="number">0</span>]])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h2><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。<br>示例： 输入： nums = [1, 1, 1, 2, 2, 3], k = 2<br>            输出： [1, 2]</p><blockquote><p>解法一：map+数组（时间复杂度nlogn，不符合）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topKFrequent = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(), arr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(nums)]</span><br><span class="line">    nums.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(num)) map.<span class="title function_">set</span>(num, map.<span class="title function_">get</span>(num)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span> map.<span class="title function_">set</span>(num, <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> map.<span class="title function_">get</span>(b) - map.<span class="title function_">get</span>(a)).<span class="title function_">slice</span>(<span class="number">0</span>, k);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>解法二：map + 小顶堆 (Leetcode 提供了优先队列的库)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topKFrequent = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="comment">//使用 map 统计元素出现频率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">      map.<span class="title function_">set</span>(num, (map.<span class="title function_">get</span>(num) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建小顶堆</span></span><br><span class="line">    <span class="keyword">const</span> heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(&#123;</span><br><span class="line">      <span class="attr">compare</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">value</span> - b.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">      heap.<span class="title function_">enqueue</span>(&#123; key, value &#125;);</span><br><span class="line">      <span class="keyword">if</span> (heap.<span class="title function_">size</span>() &gt; k) heap.<span class="title function_">dequeue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理输出</span></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="title function_">size</span>()) res.<span class="title function_">push</span>(heap.<span class="title function_">dequeue</span>().<span class="property">key</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&gt;</p><blockquote><p>手写实现优先队列 ：js 没有堆 需要自己构造</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">compareFn</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    <span class="title function_">push</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="comment">// 推入元素</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(item);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上浮</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="title function_">size</span>() - <span class="number">1</span>; <span class="comment">// 记录推入元素下标</span></span><br><span class="line">        <span class="keyword">let</span> parent = <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>); <span class="comment">// 记录父节点下标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (parent &gt;= <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">compare</span>(parent, index) &gt; <span class="number">0</span>) &#123; <span class="comment">// 注意compare参数顺序</span></span><br><span class="line">            [<span class="variable language_">this</span>.<span class="property">queue</span>[index], <span class="variable language_">this</span>.<span class="property">queue</span>[parent]] = [<span class="variable language_">this</span>.<span class="property">queue</span>[parent], <span class="variable language_">this</span>.<span class="property">queue</span>[index]];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新下标</span></span><br><span class="line">            index = parent;</span><br><span class="line">            parent = <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取堆顶元素并移除</span></span><br><span class="line">    <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 边界情况，只有一个元素或没有元素应直接弹出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">pop</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 堆顶元素</span></span><br><span class="line">        <span class="keyword">const</span> out = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除堆顶元素 填入最后一个元素</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下沉</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// 记录下沉元素下标</span></span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">1</span>; <span class="comment">// left 是左子节点下标 left + 1 则是右子节点下标</span></span><br><span class="line">        <span class="keyword">let</span> searchChild = <span class="variable language_">this</span>.<span class="title function_">compare</span>(left, left + <span class="number">1</span>) &gt; <span class="number">0</span> ? left + <span class="number">1</span> : left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="title function_">compare</span>(index, searchChild) &gt; <span class="number">0</span>) &#123; <span class="comment">// 注意compare参数顺序</span></span><br><span class="line">            [<span class="variable language_">this</span>.<span class="property">queue</span>[index], <span class="variable language_">this</span>.<span class="property">queue</span>[searchChild]] = [<span class="variable language_">this</span>.<span class="property">queue</span>[searchChild], <span class="variable language_">this</span>.<span class="property">queue</span>[index]];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新下标</span></span><br><span class="line">            index = searchChild;</span><br><span class="line">            left = <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">            searchChild = <span class="variable language_">this</span>.<span class="title function_">compare</span>(left, left + <span class="number">1</span>) &gt; <span class="number">0</span> ? left + <span class="number">1</span> : left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用传入的 compareFn 比较两个位置的元素</span></span><br><span class="line">    <span class="title function_">compare</span>(<span class="params">index1, index2</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理下标越界问题</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>[index1] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>[index2] === <span class="literal">undefined</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">compareFn</span>(<span class="variable language_">this</span>.<span class="property">queue</span>[index1], <span class="variable language_">this</span>.<span class="property">queue</span>[index2]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> topKFrequent = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        map.<span class="title function_">set</span>(num, (map.<span class="title function_">get</span>(num) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建小顶堆</span></span><br><span class="line">    <span class="keyword">const</span> heap= <span class="keyword">new</span> <span class="title class_">Heap</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// entry 是一个长度为2的数组，0位置存储key，1位置存储value</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">        heap.<span class="title function_">push</span>(entry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (heap.<span class="title function_">size</span>() &gt; k) &#123;</span><br><span class="line">            heap.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return heap.queue.map(e =&gt; e[0]);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = heap.<span class="title function_">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        res[i] = heap.<span class="title function_">pop</span>()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组篇</title>
      <link href="/2024/08/02/algorithm-%E6%95%B0%E7%BB%84/"/>
      <url>/2024/08/02/algorithm-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组篇"><a href="#数组篇" class="headerlink" title="数组篇"></a>数组篇</h1><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h2><ul><li>递归法<blockquote><p>判断target和nums[mid]，返回binarySearch()函数<br>时间复杂度：O(log n)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">binarySearch</span>(nums,target,<span class="number">0</span>,nums.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">nums,target,left,right</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left+right)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(target === nums[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">binarySearch</span>(nums,target,mid+<span class="number">1</span>,right)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">binarySearch</span>(nums,target,left,mid-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非递归法<blockquote><p>while循环：定义left、right，在while循环体内if判断target和nums[mid]，返回新的left、right和mid<br>时间复杂度：O(log n)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left+right)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(target &lt; nums[mid])&#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[mid])&#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><ul><li>双指针法<blockquote><p>时间复杂度：O(n)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;nums.<span class="property">length</span>; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] != val)&#123;</span><br><span class="line">            nums[result] = nums[i]</span><br><span class="line">            result++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h2><ul><li>暴力排序 — 每个数平方之后，排个序<blockquote><p>时间复杂度是 O(n + nlogn)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        nums[i] *= nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>) &#123;<span class="keyword">return</span> a-b&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>双指针法  <blockquote><p>i指向起始位置，j指向终止位置。<br>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。<br>时间复杂度为O(n)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>()<span class="comment">//fill()会根据数组长度替换数组中所有的值为undefined</span></span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">0</span>, j=n-<span class="number">1</span>, k=n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">let</span> left = nums[i]*nums[i],</span><br><span class="line">        right=nums[j]*nums[j]</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line">            result[k--] = left</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[k--] = right</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2><ul><li>暴力解法（超时）<blockquote><p>时间复杂度：O(n^2)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 表示在  JS 中最大的浮点数。</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span><span class="comment">// 因为要得到最小数，所以初始化为最大的数</span></span><br><span class="line">    <span class="keyword">let</span> subLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nums.<span class="property">length</span>; i++) &#123; <span class="comment">// 设置子序列起点为i</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i; j&lt;nums.<span class="property">length</span>; j++)&#123; <span class="comment">// 设置子序列终止位置为j</span></span><br><span class="line">            sum += nums[j]</span><br><span class="line">            <span class="keyword">if</span>(target &lt;= sum)&#123;</span><br><span class="line">                subLength = j-i+<span class="number">1</span></span><br><span class="line">                result = result &lt; subLength ? result : subLength</span><br><span class="line">                <span class="comment">// result = Math.min(result, subLength)</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result === <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> ? <span class="number">0</span> : result<span class="comment">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>滑动窗口！！！<blockquote><p>时间复杂度：O(n)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start,sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="title class_">Infinity</span> <span class="comment">//Infinity比任何有限数都大。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> end=<span class="number">0</span>; end&lt;nums.<span class="property">length</span>; end++)&#123;</span><br><span class="line">        sum += nums[end]</span><br><span class="line">        <span class="comment">// 动态调节滑动窗口的起始位置</span></span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">            <span class="keyword">let</span> minLength = end - start + <span class="number">1</span></span><br><span class="line">            result = <span class="title class_">Math</span>.<span class="title function_">min</span>(result, minLength)</span><br><span class="line">            sum -= nums[start]</span><br><span class="line">            start++</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result === <span class="title class_">Infinity</span> ? <span class="number">0</span> : result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h2><blockquote><p>时间复杂度 O(n^2): 模拟遍历二维矩阵的时间</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> generateMatrix = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">0</span>   <span class="comment">// 起始位置</span></span><br><span class="line">    <span class="keyword">let</span> loop = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>)   <span class="comment">// 旋转圈数</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>)    <span class="comment">// 中间位置</span></span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">1</span>    <span class="comment">// 控制每一层填充元素个数</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span>     <span class="comment">// 更新填充数字</span></span><br><span class="line">    <span class="keyword">let</span> matrix = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (loop--) &#123;</span><br><span class="line">        <span class="keyword">let</span> row = x, col = y</span><br><span class="line">        <span class="comment">// 上行从左到右（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (col = y; col &lt; n - offset; col++) &#123;</span><br><span class="line">            matrix[row][col] = num</span><br><span class="line">            num++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右列从上到下（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (row = x; row &lt; n - offset; row++) &#123;</span><br><span class="line">            matrix[row][col] = num++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下行从右到左（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (col = n - offset; col &gt; y; col--) &#123;</span><br><span class="line">            matrix[row][col] = num++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左列做下到上（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (row = n - offset; row &gt; x; row--) &#123;</span><br><span class="line">            matrix[row][col] = num++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新起始位置</span></span><br><span class="line">        x++</span><br><span class="line">        y++</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新offset</span></span><br><span class="line">        offset += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        matrix[mid][mid] = num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 双指针 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表篇</title>
      <link href="/2024/08/02/algorithm-%E9%93%BE%E8%A1%A8%E7%AF%87/"/>
      <url>/2024/08/02/algorithm-%E9%93%BE%E8%A1%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="链表篇"><a href="#链表篇" class="headerlink" title="链表篇"></a>链表篇</h1><p>定义链表节点方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val, next</span>) &#123;</span><br><span class="line">    <span class="comment">//constructor构造函数传入新建结点的值和下一个结点的指针</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = val;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = next;</span><br><span class="line">    <span class="comment">/*this指针的作用：</span></span><br><span class="line"><span class="comment">        1.当形参与成员变量同名时，可以用this指针来区分</span></span><br><span class="line"><span class="comment">        2.this指针指向被调用的成员函数所属的对象，所以在类的非静态</span></span><br><span class="line"><span class="comment">        成员函数中用return *this可以返回对象本身，谁调用就指向谁</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2><ul><li><p>方法一：使用原来的链表来进行删除操作</p><blockquote><p>时间复杂度: O(n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span>(<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="comment">// 头节点</span></span><br><span class="line">    <span class="keyword">while</span>(head !== <span class="literal">null</span> &amp;&amp; head.<span class="property">val</span> === val) head = head.<span class="property">next</span> </span><br><span class="line">    <span class="comment">// 其他节点</span></span><br><span class="line">    <span class="keyword">let</span> cur = head<span class="comment">//方便找到要删除节点node的前一个prev，让prev指向node.next</span></span><br><span class="line">    <span class="keyword">while</span>(cur !== <span class="literal">null</span> &amp;&amp; cur.<span class="property">next</span> !== <span class="literal">null</span>)&#123;<span class="comment">//避免对空指针进行操作</span></span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">next</span>.<span class="property">val</span> === val)&#123;</span><br><span class="line">            cur.<span class="property">next</span> = cur.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//不满足val，继续指向下一个节点</span></span><br><span class="line">            cur = cur.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方法二：设置一个虚拟头结点在进行删除操作 —— 推荐</p><blockquote><p>时间复杂度: O(n)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span>(<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head)<span class="comment">//new一个虚拟头结点</span></span><br><span class="line">    <span class="keyword">let</span> cur = node</span><br><span class="line">    <span class="keyword">while</span>(cur.<span class="property">next</span> !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">next</span>.<span class="property">val</span> === val)&#123;</span><br><span class="line">            cur.<span class="property">next</span> = cur.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = cur.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h2><ul><li>设置一个虚拟头结点进行操作<blockquote><p>时间复杂度: 涉及 index 的相关操作为 O(index), 其余为 O(1)</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val, next</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化单链表</span></span><br><span class="line"><span class="comment">// 单链表由一个个LinkNode的结点组成，可以想成数组。包含 长度、头结点、尾结点</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyLinkedList</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表节点</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getNode</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 虚拟头节点</span></span><br><span class="line">    <span class="keyword">let</span> cur = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">head</span>)</span><br><span class="line">    <span class="keyword">while</span>(index-- &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        cur = cur.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 获取链表中第 index 个节点的值。如果索引无效，则返回-1。</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNode</span>(index).<span class="property">val</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在链表的第一个元素之前添加一个值为 val 的节点</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtHead</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val, <span class="variable language_">this</span>.<span class="property">head</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">    <span class="comment">// 当原链表为空时，新添加的节点是头节点，也是尾节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">tail</span> === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将值为 val 的节点追加到链表的最后一个元素</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtTail</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val, <span class="literal">null</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">tail</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = node</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = node</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当原链表为空时，新添加的节点是头节点，也是尾节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 在链表中的第 index 个节点之前添加值为 val  的节点</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtIndex</span> = <span class="keyword">function</span>(<span class="params">index, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt; <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(index &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addAtHead</span>(val)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index === <span class="variable language_">this</span>.<span class="property">size</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addAtTail</span>(val)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取目标节点的上一个的节点</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="title function_">getNode</span>(index-<span class="number">1</span>)</span><br><span class="line">    node.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val, node.<span class="property">next</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 如果索引 index 有效，则删除链表中的第 index 个节点</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">deleteAtIndex</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// index所指定的是链表头节点</span></span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">        <span class="comment">// 当index也为尾节点</span></span><br><span class="line">        <span class="keyword">if</span>(index === <span class="variable language_">this</span>.<span class="property">size</span>-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span>--</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取目标节点的上一个的节点</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="title function_">getNode</span>(index-<span class="number">1</span>)</span><br><span class="line">    node.<span class="property">next</span> = node.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    <span class="comment">// index所指定的是链表尾节点</span></span><br><span class="line">    <span class="keyword">if</span>(index === <span class="variable language_">this</span>.<span class="property">size</span>-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span>--</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><blockquote><p>时间复杂度: O(n)</p></blockquote><ul><li>双指针法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="literal">null</span> </span><br><span class="line">        temp = cur.<span class="property">next</span> <span class="comment">// 暂存当前指针cur.next</span></span><br><span class="line">        cur.<span class="property">next</span> = pre <span class="comment">// 反转链表：改变 cur-&gt;next 的指向</span></span><br><span class="line">        <span class="comment">// 更新pre和cur指针</span></span><br><span class="line">        pre = cur </span><br><span class="line">        cur = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>递归法①：从前往后反转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="keyword">function</span>(<span class="params">pre, head</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> pre</span><br><span class="line">    <span class="keyword">let</span> temp = head.<span class="property">next</span></span><br><span class="line">    head.<span class="property">next</span> = pre</span><br><span class="line">    pre = head</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(pre, temp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(<span class="literal">null</span>, head)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归法②：从后往前反转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">const</span> pre = <span class="title function_">reverse</span>(head.<span class="property">next</span>);</span><br><span class="line">    head.<span class="property">next</span> = pre.<span class="property">next</span>;</span><br><span class="line">    pre.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur &amp;&amp; cur.<span class="property">next</span>) &#123;</span><br><span class="line">        cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">reverse</span>(head);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><ul><li>迭代法A B C D E —&gt; B A D C E</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node0 = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head)</span><br><span class="line">    <span class="keyword">let</span> tempNode = node0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tempNode.<span class="property">next</span> &amp;&amp; tempNode.<span class="property">next</span>.<span class="property">next</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> node1 = tempNode.<span class="property">next</span> <span class="comment">//记录临时节点head  A</span></span><br><span class="line">        <span class="keyword">let</span> node2 = tempNode.<span class="property">next</span>.<span class="property">next</span>.<span class="property">next</span><span class="comment">//记录临时节点C</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变指针指向</span></span><br><span class="line">        tempNode.<span class="property">next</span> = tempNode.<span class="property">next</span>.<span class="property">next</span> <span class="comment">// tempNode指向B</span></span><br><span class="line">        tempNode.<span class="property">next</span>.<span class="property">next</span> = node1 <span class="comment">// tempNode的下一个节点指向A</span></span><br><span class="line">        tempNode.<span class="property">next</span>.<span class="property">next</span>.<span class="property">next</span> = node2 <span class="comment">// tempNode的下下个节点指向C</span></span><br><span class="line">        tempNode = tempNode.<span class="property">next</span>.<span class="property">next</span> <span class="comment">// tempNode移动两位，准备下一轮交换</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node0.<span class="property">next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> cur = head.<span class="property">next</span></span><br><span class="line">    head.<span class="property">next</span> = <span class="title function_">swapPairs</span>(head.<span class="property">next</span>.<span class="property">next</span>)</span><br><span class="line">    cur.<span class="property">next</span> = head</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h2><ul><li>快慢指针<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head)</span><br><span class="line">    <span class="comment">// 定义快慢指针</span></span><br><span class="line">    <span class="keyword">let</span> fast = dummyHead</span><br><span class="line">    <span class="keyword">let</span> slow = dummyHead</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// fast首先走n + 1步</span></span><br><span class="line">        fast = fast.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fast和slow同时移动，直到fast指向末尾</span></span><br><span class="line">    <span class="keyword">while</span>(fast !== <span class="literal">null</span>)&#123;</span><br><span class="line">        fast = fast.<span class="property">next</span></span><br><span class="line">        slow = slow.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span><span class="comment">//删除slow指向的下一个节点</span></span><br><span class="line">    <span class="keyword">return</span> dummyHead.<span class="property">next</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h2><blockquote><p>时间复杂度：O(n + m)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取链表长度</span></span><br><span class="line"><span class="keyword">var</span> getListLen = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>, cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        len++</span><br><span class="line">        cur = cur.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span>(<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> curA = headA, curB = headB,</span><br><span class="line">    lenA = <span class="title function_">getListLen</span>(headA),</span><br><span class="line">    lenB = <span class="title function_">getListLen</span>(headB)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让curA成为最长链表的头，lenA为其长度</span></span><br><span class="line">    <span class="keyword">if</span>(lenA &lt; lenB) &#123;</span><br><span class="line">        <span class="comment">// 交换变量，确保curA为最长</span></span><br><span class="line">        [curA, curB] = [curB, curA];</span><br><span class="line">        [lenA, lenB] = [lenB, lenA];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让curA和curB在同一起点上（末尾位置对齐）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lenA - lenB; i++)&#123;</span><br><span class="line">        curA = curA.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历curA 和 curB，遇到相同则直接返回</span></span><br><span class="line">    <span class="keyword">while</span>(curA &amp;&amp; curA !== curB)&#123;</span><br><span class="line">        curA = curA.<span class="property">next</span></span><br><span class="line">        curB = curB.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// curA到达尾节点时，curA的指针指向null</span></span><br><span class="line">    <span class="keyword">return</span> curA</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head &amp;&amp; head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> slow = head.<span class="property">next</span>, fast = head.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    <span class="comment">// 快慢指针相遇前</span></span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span> &amp;&amp; fast !== slow)&#123;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        slow = slow.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一次相遇后，再从 头结点 和 相遇节点 分别出发一个指针，</span></span><br><span class="line">    <span class="comment">// 且这两个指针每次只走一个节点， </span></span><br><span class="line">    <span class="comment">// 那么当这两个指针再次相遇的时候就是 环形入口的节点。</span></span><br><span class="line">    <span class="keyword">if</span>(!fast &amp;&amp; !fast.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    slow = head</span><br><span class="line">    <span class="keyword">while</span>(fast !== slow)&#123;</span><br><span class="line">        slow = slow.<span class="property">next</span></span><br><span class="line">        fast = fast.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow <span class="comment">// 返回环形入口的节点。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哈希表篇</title>
      <link href="/2024/08/02/algorithm-%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2024/08/02/algorithm-%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表篇（数组、set、map）"><a href="#哈希表篇（数组、set、map）" class="headerlink" title="哈希表篇（数组、set、map）"></a>哈希表篇（数组、set、map）</h1><p>判断元素是否在某集合中出现过 → hash表</p><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><blockquote><p>t 是 s 的异位词等价于「两个字符串排序后相等」。</p></blockquote><ul><li><p>排序</p><blockquote><p>将两个字符串转换成数组，然后排序，最后在转换成字符串，比较这两个字符串是否相等即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> !== t.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> array_s = <span class="title class_">Array</span>.<span class="title function_">from</span>(s).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    array_t = <span class="title class_">Array</span>.<span class="title function_">from</span>(t).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> array_s === array_t</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>哈希表</p><blockquote><p>由于字符串只包含 26 个小写字母，因此可以维护一个长度为 26 的频次数组 table，先遍历记录字符串 s 中字符出现的频次，然后遍历字符串 t，减去 table 中对应的频次，如果出现 table[i]&lt;0，则说明 t 包含一个不在 s 中的额外字符，返回 false 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> !== t.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> table = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        table[s.<span class="title function_">codePointAt</span>(i) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">codePointAt</span>(<span class="number">0</span>)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; t.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        table[t.<span class="title function_">codePointAt</span>(i) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">codePointAt</span>(<span class="number">0</span>)]--;</span><br><span class="line">        <span class="keyword">if</span> (table[t.<span class="title function_">codePointAt</span>(i) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">codePointAt</span>(<span class="number">0</span>)] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p>思路：</p><blockquote><p>首先确保nums1&gt;nums2,然后将 nums1 转换成一个 Set 集合，遍历nums2，<br>逐个检查 nums2 中的元素是否存在于 Set 集合中，若存在，则添加到结果 Set 集合中，<br>最后将结果 Set 集合转化为数组（Array.from()）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> intersection = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums1.<span class="property">length</span>&lt;nums2.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> _ = nums1</span><br><span class="line">        nums1 = nums2</span><br><span class="line">        nums2 = _</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">set</span>(nums1) <span class="comment">//将 nums1 转换成一个 Set 集合，以便于快速查找元素。</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title function_">set</span>()    <span class="comment">//使用 res 来存储结果，保证结果中的元素唯一。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = nums2.<span class="property">length</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="comment">//逐个检查 nums2 中的元素是否存在于 a 中。如果存在，则将其添加到 res 中。</span></span><br><span class="line">        a.<span class="title function_">has</span>(nums2[i]) &amp;&amp; res.<span class="title function_">add</span>(nums2[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(res)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h2><p>示例：非快乐数：20</p><ul><li>1   20——4+0     = 4</li><li>2   4 ——16      = 16</li><li>3   16——1+36    = 37</li><li>4   37——9+49    = 58</li><li>5   58——25+64   = 89</li><li>6   89——64+81   = 145</li><li>7   145—-1+16+25 = 42</li><li>8   42——16+4=20 = 20</li></ul><blockquote><p>Set是es6新增的数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值，我们一般称为集合</p><ul><li>set方法：</li></ul><p>将快乐数转化成字符串，while(sum !== 1)内遍历字符串，得到新Sum值，<br>若结果 Set 集合内含有Sum值，则非快乐数，反之，则将sum添加进set集合内<br>最后在while循环外返回true<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isHappy = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    n += <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(sum !== <span class="number">1</span>)&#123;</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;=n.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            sum += n[i]*n[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(set.<span class="title function_">has</span>(sum)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        n = sum + <span class="string">&#x27;&#x27;</span></span><br><span class="line">        set.<span class="title function_">add</span>(sum)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Map类型是键值对的有序列表，而键和值都可以是任意类型</p><ul><li>map方法：</li></ul><p>初始化一个 Map 用于记录已经出现过的数字 ，定义一个函数 getSum，计算数字平方和<br>进入无限循环(while(n !== 1))：若 n 已经出现在 Map 中，则表示陷入了无限循环，返回 false;<br>反之，将n 记录到 Map 中,并计算当前数字各个位数字的平方和getSum(n)，并赋值给 n，进行下一次循环。</p><p> 最后，若当前数字 n 为 1，返回 true。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isHappy = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> a = num % <span class="number">10</span></span><br><span class="line">            sum += a*a</span><br><span class="line">            num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(num/<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n !== <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="title function_">has</span>(n)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        m.<span class="title function_">set</span>(n,<span class="number">1</span>)</span><br><span class="line">        n = <span class="title function_">getSum</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><p>示例： nums = [2, 7, 11, 15], target = 9<br>            返回[0,1]</p><ul><li><p>暴力解法：两层for循环（<code>i=0 j=i+1 nums[i] + nums[j] === target</code>），不推荐</p><p>思路：</p></li></ul><blockquote><p>遍历当前数组元素，若hash表内匹配到了target-nums[i]，则返回[i, target-nums[i]],<br>反之，就把当前访问的元素和下标加入到map中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;  <span class="comment">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class="line">    <span class="keyword">if</span> (hash[target - nums[i]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [i, hash[target - nums[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    hash[nums[i]] = i;   <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h2><p>示例： A = [1, 2]  B = [-2, -1]  C = [-1, 2]  D = [ 0, 2]        输出：2<br>           (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0<br>           (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</p><p>思路：</p><blockquote><p>初始化哈希表（twoSumMap）和计数器（count）<br>两层for循环A和B，并记录各个A+B值出现的次数<br>两层for循环C和D，若能找到0-(C+D),将 twoSumMap 中对应的值（出现次数）加到 count 中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fourSumCount = <span class="keyword">function</span>(<span class="params">nums1, nums2, nums3, nums4</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> twoSumMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 统计nums1和nums2数组元素之和，和出现的次数，放到map中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> n1 <span class="keyword">of</span> nums1) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> n2 <span class="keyword">of</span> nums2) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = n1 + n2;</span><br><span class="line">            twoSumMap.<span class="title function_">set</span>(sum, (twoSumMap.<span class="title function_">get</span>(sum) || <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到如果 0-(c+d) 在map中出现过的话，就把map中key对应的value也就是出现次数统计出来</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> n3 <span class="keyword">of</span> nums3) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> n4 <span class="keyword">of</span> nums4) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = n3 + n4;</span><br><span class="line">            count += (twoSumMap.<span class="title function_">get</span>(<span class="number">0</span> - sum) || <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><p>给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。</p><p>思路：</p><blockquote><p>定义一个长度为26的数组strArr，初始化为0。base 是字符 ‘a’ 的 Unicode 编码。<br>遍历magazine字符串，记录每个字符出现次数，再遍历ransomNote字符串，如果对应索引的值为0，<br>表示 magazine 中该字符数量不足，返回 false。否则，对应索引的值减 1。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span>(<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> strArr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>), </span><br><span class="line">    base = <span class="string">&quot;a&quot;</span>.<span class="title function_">charCodeAt</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> s <span class="keyword">of</span> magazine) &#123;  <span class="comment">// 记录 magazine里各个字符出现次数</span></span><br><span class="line">        strArr[s.<span class="title function_">charCodeAt</span>() - base]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> s <span class="keyword">of</span> ransomNote) &#123; <span class="comment">// 对应的字符个数做--操作</span></span><br><span class="line">        <span class="keyword">const</span> index = s.<span class="title function_">charCodeAt</span>() - base;</span><br><span class="line">        <span class="keyword">if</span>(!strArr[index]) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 如果没记录过直接返回false</span></span><br><span class="line">        strArr[index]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h2><p>示例：nums = [-1, 0, 1, 2, -1, -4]，<br>           满足要求的三元组集合为：[[-1, 0, 1], [-1, -1, 2]] </p><p>思路：</p><blockquote><p>首先，对数组进行排序，遍历; 再建立前后指针 left=i+1 和right=nums.length-1，计算三数之和 sum;<br>若sum&gt;0,则right向前移动；若sum&lt;0，则left向后移动；sum=0时，将这3个数组成的数组保存进res中。<br>设置去重：如果当前元素与上一个元素相同，跳过当前循环以避免重复结果。<br>若left指向的元素与下一个相同，右移左指针；若right指向的元素与上一个相同，左移右指针。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b)  <span class="comment">// 对数组排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> left = i+<span class="number">1</span>, right = nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">        <span class="comment">// 数组排过序，如果第一个数大于0直接返回res</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">return</span> res</span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i] === nums[i-<span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">let</span> sum = nums[i] + nums[left] + nums[right]</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">0</span>) left++</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>) right--</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">push</span>([nums[i],nums[left],nums[right]])</span><br><span class="line">                <span class="comment">// 去重</span></span><br><span class="line">                <span class="keyword">while</span>(nums[left] == nums[left+<span class="number">1</span>]) left++</span><br><span class="line">                <span class="keyword">while</span>(nums[right] == nums[right-<span class="number">1</span>]) right--</span><br><span class="line">                left++</span><br><span class="line">                right--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>nSum通解：递归</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// nsum通用解法核心方法：递归</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">nSumTarget</span>(<span class="params">nums, n, start, target</span>) &#123;</span><br><span class="line">        <span class="comment">// 前提：nums要先排序好</span></span><br><span class="line">        <span class="keyword">let</span> res = [];</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</span><br><span class="line">            res = <span class="title function_">towSumTarget</span>(nums, start, target);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 递归求(n - 1)sum</span></span><br><span class="line">                <span class="keyword">let</span> subRes = <span class="title function_">nSumTarget</span>(</span><br><span class="line">                    nums,</span><br><span class="line">                    n - <span class="number">1</span>,</span><br><span class="line">                    i + <span class="number">1</span>,</span><br><span class="line">                    target - nums[i]</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; subRes.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                    res.<span class="title function_">push</span>([nums[i], ...subRes[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 跳过相同元素</span></span><br><span class="line">                <span class="keyword">while</span> (nums[i] === nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">towSumTarget</span>(<span class="params">nums, start, target</span>) &#123;</span><br><span class="line">        <span class="comment">// 前提：nums要先排序好</span></span><br><span class="line">        <span class="keyword">let</span> res = [];</span><br><span class="line">        <span class="keyword">let</span> len = nums.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> left = start;</span><br><span class="line">        <span class="keyword">let</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">let</span> sum = nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (nums[left] === nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (nums[right] === nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 相等</span></span><br><span class="line">                res.<span class="title function_">push</span>([nums[left], nums[right]]);</span><br><span class="line">                <span class="comment">// 跳过相同元素</span></span><br><span class="line">                <span class="keyword">while</span> (nums[left] === nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                <span class="keyword">while</span> (nums[right] === nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="comment">// n = 3，此时求3sum之和</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">nSumTarget</span>(nums, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h2><p>示例： nums = [1, 0, -1, 0, -2, 2]，和 target = 0<br>            满足要求的四元组集合为： [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]</p><p>思路：</p><blockquote><p>对比三数之和，再套一层for循环（外层循环i 从 0 遍历到 len-4，内层循环j 从 i+1 遍历到 len-3）<br>注意去重；当数组长度小于 4，直接返回空数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fourSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="property">length</span> &lt; <span class="number">4</span>) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i-<span class="number">1</span>]) <span class="keyword">continue</span> <span class="comment">// 去重i</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span> - <span class="number">2</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] === nums[j-<span class="number">1</span>]) <span class="keyword">continue</span> <span class="comment">// 去重j</span></span><br><span class="line">            <span class="keyword">let</span> left = j + <span class="number">1</span>, right = nums.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="keyword">let</span> sum = nums[i] + nums[j] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; target) right--</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target) left++</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    res.<span class="title function_">push</span>([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">                    <span class="comment">// 对nums[left]和nums[right]去重</span></span><br><span class="line">                    <span class="keyword">while</span>(nums[left] === nums[left+<span class="number">1</span>]) left++</span><br><span class="line">                    <span class="keyword">while</span>(nums[right] === nums[right-<span class="number">1</span>]) right--</span><br><span class="line">                    left++</span><br><span class="line">                    right--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树篇</title>
      <link href="/2024/08/02/algorithm-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2024/08/02/algorithm-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树篇"><a href="#二叉树篇" class="headerlink" title="二叉树篇"></a>二叉树篇</h1><h2 id="二叉树理论基础"><a href="#二叉树理论基础" class="headerlink" title="二叉树理论基础"></a>二叉树理论基础</h2><p>1、二叉树<strong>类型</strong>：</p><p>1.<strong>满二叉树</strong>：如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上。<br>深度为k，有2^k-1个节点</p><p>  <img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022058290.png" alt="photo"></p><p>2.<strong>完全二叉树</strong>：除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中        在该层最左边的若干位置。若最底层为第 h 层（h从1开始），则该层包含 1~ 2^(h-1) 个节点。</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022100949.png" alt="photo"> </p><p>3.<strong>二叉搜索树</strong>：是一个有序树。<br>        若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>        若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>        它的左、右子树也分别为二叉排序树</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022101723.png" alt="photo"> </p><p>4.<strong>平衡二叉搜索树</strong>：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022102999.png" alt="photo"> </p><p>2、二叉树的<strong>存储方式</strong></p><p>​    1.链式存储：指针<br>​    <img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022058897.png" alt="photo"><br>​    </p><p>2.顺序存储：数组<br>    <img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022059691.png" alt="photo"></p><p>3、二叉树的<strong>遍历方式</strong></p><p>​    1. 深度优先遍历：先往深走，遇到叶子节点再往回走。</p><ul><li>前序遍历（递归法，迭代法）：中左右</li><li>中序遍历（递归法，迭代法）：左中右</li><li><p>后序遍历（递归法，迭代法）：左右中<br>   <img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022059886.png" alt="photo"></p></li><li><p>2.广度优先遍历：一层一层的去遍历。</p><pre><code>       * 层次遍历（迭代法)</code></pre></li></ul><p>4、二叉树的定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TreeNode</span>(<span class="params">val, left, right</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = (val===<span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = (left===<span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = (right===<span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h2><p>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，<br>递归算法：1.确定递归函数的参数和返回值：<br>              2.确定终止条件<br>              3.确定单层递归的逻辑</p><ul><li><p>前序遍历：中左右（144.二叉树的前序遍历）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=[];</span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root===<span class="literal">null</span>)<span class="keyword">return</span> ;</span><br><span class="line">        </span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>); <span class="comment">// 先序遍历所以从父节点开始</span></span><br><span class="line">        </span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">left</span>); <span class="comment">// 递归左子树</span></span><br><span class="line">        </span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">right</span>); <span class="comment">// 递归右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">dfs</span>(root); <span class="comment">// 只使用一个参数 使用闭包进行存储结果</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历：左中右（94.二叉树的中序遍历）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=[];</span><br><span class="line">    <span class="keyword">const</span> dfs=<span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root===<span class="literal">null</span>)  <span class="keyword">return</span></span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">left</span>); <span class="comment">// 递归左子树</span></span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>); <span class="comment">// 父节点</span></span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">right</span>); <span class="comment">// 递归右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dfs</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历：左右中（145.二叉树的后序遍历）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=[];</span><br><span class="line">    <span class="keyword">const</span> dfs=<span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root===<span class="literal">null</span>)  <span class="keyword">return</span> </span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">left</span>); <span class="comment">// 递归左子树</span></span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">right</span>); <span class="comment">// 递归右子树</span></span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>); <span class="comment">// 父节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dfs</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二叉树的迭代遍历"><a href="#二叉树的迭代遍历" class="headerlink" title="二叉树的迭代遍历"></a>二叉树的迭代遍历</h2><ul><li><p>前序遍历：中左右（144.二叉树的前序遍历）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入栈 右 -&gt; 左</span></span><br><span class="line"><span class="comment">// 出栈 中 -&gt; 左 -&gt; 右</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root, res = []</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">const</span> stack = [root];</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>) &#123;</span><br><span class="line">        cur = stack.<span class="title function_">pop</span>();</span><br><span class="line">        res.<span class="title function_">push</span>(cur.<span class="property">val</span>);</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">right</span>) stack.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span>) stack.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历：左中右（94.二叉树的中序遍历）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入栈 左 -&gt; 右</span></span><br><span class="line"><span class="comment">// 出栈 左 -&gt; 中 -&gt; 右</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root, res = []</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> cur = root;</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span> || cur) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(cur);  </span><br><span class="line">            cur = cur.<span class="property">left</span>; <span class="comment">// 左</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = stack.<span class="title function_">pop</span>(); <span class="comment">// 弹出</span></span><br><span class="line">            res.<span class="title function_">push</span>(cur.<span class="property">val</span>); <span class="comment">// 中</span></span><br><span class="line">            cur = cur.<span class="property">right</span>; <span class="comment">// 右</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历：左右中（145.二叉树的后序遍历）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入栈 左 -&gt; 右</span></span><br><span class="line"><span class="comment">// 出栈 中 -&gt; 右 -&gt; 左 结果翻转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> stack = [root]; <span class="comment">// 初始化栈并将根节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (stack.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = stack.<span class="title function_">pop</span>(); <span class="comment">// 从栈中弹出一个节点</span></span><br><span class="line">        res.<span class="title function_">push</span>(cur.<span class="property">val</span>); <span class="comment">// 将节点值加入结果数组</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">left</span>) stack.<span class="title function_">push</span>(cur.<span class="property">left</span>); <span class="comment">// 左子节点存在，将其入栈</span></span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">right</span>) stack.<span class="title function_">push</span>(cur.<span class="property">right</span>); <span class="comment">// 右子节点存在，将其入栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">reverse</span>(); <span class="comment">// 最后对结果数组进行反转，得到后序遍历的结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102.二叉树的层序遍历"></a>102.二叉树的层序遍历</h2><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。<br>示例：二叉树：[3, 9, 20, null, null, 15, 7]<br>           结果：[[3], [9, 20], [15, 7]]</p><p>思路：</p><blockquote><p>当队列不为空时，进行遍历。记录当前层级的节点数size，存放当前层的节点值curLevel<br>遍历当前层的节点，对节点进行取出并push到curLevel操作；<br>若当前节点的左右子节点存在，将其push到队列中，以便在下一层遍历。<br>将当前层级的结果加入最终结果数组，并返回<br>特殊情况：如果 root 为 null，直接返回空的结果数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [], queue = [];</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>;<span class="comment">// 记录当前层级节点数</span></span><br><span class="line">        <span class="keyword">let</span> curLevel = [];<span class="comment">//存放每一层的节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            curLevel.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">            <span class="comment">// 存放当前层下一层的节点</span></span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res.<span class="title function_">push</span>(curLevel);<span class="comment">//把每一层的结果放到结果数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107.二叉树的层次遍历 II"></a>107.二叉树的层次遍历 II</h2><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p>示例： 二叉树：[3, 9,20, null,null,15,7]<br>            结果：[[15, 7], [9, 20],[3]]</p><ul><li>思路：相对于102.二叉树的层序遍历，就是最后把result数组反转一下就可以了。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [], queue = [];</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> res; <span class="comment">// 修改为空数组</span></span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> size = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> curLevel = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            curLevel.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>) queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>) queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">unshift</span>(curLevel); <span class="comment">// 将当前层的结果插入到结果数组的开头</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a>199.二叉树的右视图</h2><p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。<br>示例：输入：[1, 2,3, null,5,null,4]<br>           输出：[1, 3, 4] </p><blockquote><p>思路：层序遍历的时候，判断是否遍历到单层的最后面的元素，如果是，就放进res数组中，最后返回res。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rightSideView = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">//二叉树右视图 只需要把每一层最后一个节点存储到res数组</span></span><br><span class="line">    <span class="keyword">let</span> res = [], queue = [];</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> size = queue.<span class="property">length</span> <span class="comment">// 记录当前层级节点个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">            <span class="comment">// length长度为0的时候表明到了层级最后一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(!length) res.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h2><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。<br>示例：输入：[3, 9,20, null,null,15,7]<br>           输出：[3, 14.5, 11] </p><blockquote><p>思路：层序遍历的时候把一层求个总和再取一个均值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> averageOfLevels = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=[], queue = []</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">    queue.<span class="title function_">push</span>(root)</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="comment">// 每一层节点个数</span></span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>,</span><br><span class="line">            size = queue.<span class="property">length</span>,</span><br><span class="line">            sum = <span class="number">0</span> <span class="comment">// sum记录每一层的和</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">            sum += node.<span class="property">val</span></span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">left</span>) queue.<span class="title function_">push</span>(node.<span class="property">left</span>)</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">right</span>) queue.<span class="title function_">push</span>(node.<span class="property">right</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(sum/size) <span class="comment">// 求平均值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="429-N叉树的层序遍历"><a href="#429-N叉树的层序遍历" class="headerlink" title="429.N叉树的层序遍历"></a>429.N叉树的层序遍历</h2><p>给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。</p><p>示例：三叉树：[1, 3,2,4, 5,6,null,null,null,null]<br>           结果：[[1], [3,2,4], [5,6]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [], queue = [];</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> res</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>,</span><br><span class="line">            curLevel = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            curLevel.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里不再是 ndoe.left node.right 而是循坏node.children</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> node.<span class="property">children</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(item) queue.<span class="title function_">push</span>(item)</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(curLevel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a>515.在每个树行中找最大值</h2><p>在二叉树的每一行中找到最大的值。<br>示例： 二叉树：[1, 3,2, 5,3,null,9]<br>            结果：[1, 3, 9]</p><blockquote><p>思路：层序遍历，取每一层的最大值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> largestValues = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [],queue = [];</span><br><span class="line">  queue.<span class="title function_">push</span>(root);</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>)  <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lengthLevel = queue.<span class="property">length</span>,</span><br><span class="line">        max = -<span class="title class_">Infinity</span> <span class="comment">// 初始值设为负无穷大</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++)&#123; &#123;</span><br><span class="line">        <span class="keyword">const</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, node.<span class="property">val</span>);<span class="comment">// 在当前层中找到最大值</span></span><br><span class="line">        <span class="comment">// 找到下一层的节点</span></span><br><span class="line">        node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">        node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">push</span>(max);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116.填充每个节点的下一个右侧节点指针"></a>116.填充每个节点的下一个右侧节点指针</h2><p>给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="title class_">Node</span> &#123;</span><br><span class="line">    int val;</span><br><span class="line">    <span class="title class_">Node</span> *left;</span><br><span class="line">    <span class="title class_">Node</span> *right;</span><br><span class="line">    <span class="title class_">Node</span> *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，<br>则将 next 指针设置为 NULL。初始状态下，所有 next 指针都被设置为 NULL。<br>示例：二叉树：root = [1, 2,3, 4,5,6,7]<br>          结果：[1,#,2,3,#,4,5,6,7,#]</p><blockquote><p>思路：层序遍历，在单层遍历的时候记录一下本层的头部节点，然后在遍历的时候让前一个节点指向本节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connect = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> n = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="comment">// 若当前节点不是这一层的最后一个节点,则将它的next指针指向队列中的下一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; n-<span class="number">1</span>)  node.<span class="property">next</span> = queue[<span class="number">0</span>];</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="117-填充每个节点的下一个右侧节点指针II"><a href="#117-填充每个节点的下一个右侧节点指针II" class="headerlink" title="117.填充每个节点的下一个右侧节点指针II"></a>117.填充每个节点的下一个右侧节点指针II</h2><p>与116题目说是完整二叉树，此题说的是二叉树</p><p>示例：二叉树：root = [1, 2,3, 4,5,6,7]<br>           结果：[1,#,2,3,#,4,5,6,7,#]</p><blockquote><p>思路：与116一样</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connect = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="keyword">if</span>(i &lt; n-<span class="number">1</span>) node.<span class="property">next</span> = queue[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">left</span>) queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">right</span>) queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><p>给定一个二叉树，找出其最大深度。（二叉树的深度为根节点到最远叶子节点的最长路径上的节点数）<br>示例：二叉树[3, 9,20, null,null,15,7]，返回它的最大深度 3 。</p><blockquote><p>思路：返回二叉树层数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>, queue = [root];</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> max</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    max++;</span><br><span class="line">    <span class="keyword">let</span> length = queue.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">      node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">      node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> maxdepth = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 确定递归函数的参数和返回值</span></span><br><span class="line">    <span class="keyword">const</span> getdepth = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">//2. 确定终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//3. 确定单层逻辑</span></span><br><span class="line">        <span class="keyword">let</span> leftdepth = <span class="title function_">getdepth</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">let</span> rightdepth = <span class="title function_">getdepth</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">let</span> depth = <span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">max</span>(leftdepth, rightdepth);</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getdepth</span>(root);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2><p>给定一个二叉树，找出其最小深度。（最小深度是从根节点到最近叶子节点的最短路径上的节点数量。）<br>叶子节点是指没有子节点的节点。<br>示例：二叉树[3, 9,20, null,null,15,7]，返回它的最大深度 2 。</p><blockquote><p>思路：遍历层数，当左右孩子都为空的时候，才说明到遍历的最低点了。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minDepth = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> n = queue.<span class="property">length</span>;</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="comment">// 如果左右节点都是null(在遇见的第一个leaf节点上)，则该节点深度最小</span></span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> depth;</span><br><span class="line">            &#125;</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);;</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> minDepth1 = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 到叶子节点 返回 1</span></span><br><span class="line">    <span class="keyword">if</span>(!root.<span class="property">left</span> &amp;&amp; !root.<span class="property">right</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 只有右节点时 递归右节点</span></span><br><span class="line">    <span class="keyword">if</span>(!root.<span class="property">left</span>) <span class="keyword">return</span> <span class="number">1</span> + <span class="title function_">minDepth</span>(root.<span class="property">right</span>);</span><br><span class="line">    <span class="comment">// 只有左节点时 递归左节点</span></span><br><span class="line">    <span class="keyword">if</span>(!root.<span class="property">right</span>) <span class="keyword">return</span> <span class="number">1</span> + <span class="title function_">minDepth</span>(root.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="title function_">minDepth</span>(root.<span class="property">left</span>), <span class="title function_">minDepth</span>(root.<span class="property">right</span>)) + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h2><p>给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。<br>示例：输入：[4, 2,7, 1,3,6,9]<br>           输出：[4, 7,2, 9,6,3,1]   （把每一个节点的左右孩子交换）</p><blockquote><p>思路：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用递归版本的前序遍历</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 交换左右节点</span></span><br><span class="line">    <span class="keyword">const</span> rightNode = root.<span class="property">right</span>;</span><br><span class="line">    root.<span class="property">right</span> = <span class="title function_">invertTree</span>(root.<span class="property">left</span>);</span><br><span class="line">    root.<span class="property">left</span> = <span class="title function_">invertTree</span>(rightNode);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用层序遍历</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">//先定义节点交换函数</span></span><br><span class="line">    <span class="keyword">const</span> invertNode = <span class="keyword">function</span>(<span class="params">root, left, right</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = left;</span><br><span class="line">        left = right;</span><br><span class="line">        right = temp;</span><br><span class="line">        root.<span class="property">left</span> = left;</span><br><span class="line">        root.<span class="property">right</span> = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> queue = [];</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="comment">//节点处理逻辑</span></span><br><span class="line">            <span class="title function_">invertNode</span>(node, node.<span class="property">left</span>, node.<span class="property">right</span>);</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代版本(统一模板))的前序遍历：</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">//我们先定义节点交换函数</span></span><br><span class="line">    <span class="keyword">const</span> invertNode = <span class="keyword">function</span>(<span class="params">root, left, right</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = left;</span><br><span class="line">        left = right;</span><br><span class="line">        right = temp;</span><br><span class="line">        root.<span class="property">left</span> = left;</span><br><span class="line">        root.<span class="property">right</span> = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用迭代方法的前序遍历 </span></span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    stack.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = stack.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//前序遍历顺序中左右  入栈顺序是前序遍历的倒序右左中</span></span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            stack.<span class="title function_">push</span>(node);</span><br><span class="line">            stack.<span class="title function_">push</span>(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="comment">//节点处理逻辑</span></span><br><span class="line">            <span class="title function_">invertNode</span>(node, node.<span class="property">left</span>, node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h2><p>给定一个二叉树，检查它是否是镜像对称的。<br>示例：输入：[1, 2,2, 3,4,4,3]            true<br>           输入：[1, 2,2, null,3,null,3]     false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 确定递归的参数 root.left root.right和返回值true false </span></span><br><span class="line">    <span class="keyword">const</span> compareNode = <span class="keyword">function</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定终止条件 空的情况</span></span><br><span class="line">        <span class="keyword">if</span>(left === <span class="literal">null</span> &amp;&amp; right !== <span class="literal">null</span> || left !== <span class="literal">null</span> &amp;&amp; right === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(left === <span class="literal">null</span> &amp;&amp; right === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(left.<span class="property">val</span> !== right.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 确定单层递归逻辑</span></span><br><span class="line">        <span class="keyword">let</span> outSide = <span class="title function_">compareNode</span>(left.<span class="property">left</span>, right.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">let</span> inSide = <span class="title function_">compareNode</span>(left.<span class="property">right</span>, right.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">return</span> outSide &amp;&amp; inSide;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compareNode</span>(root.<span class="property">left</span>, root.<span class="property">right</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="559-n叉树的最大深度"><a href="#559-n叉树的最大深度" class="headerlink" title="559.n叉树的最大深度"></a>559.n叉树的最大深度</h2><p>给定一个 N 叉树，找到其最大深度。最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。<br>示例：输入：[1,null,3,2,4,null,5,6]      3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归写法</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> node <span class="keyword">of</span> root.<span class="property">children</span>) &#123;</span><br><span class="line">        depth = <span class="title class_">Math</span>.<span class="title function_">max</span>(depth, <span class="title function_">maxDepth</span>(node))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> queue = [root]</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> size = queue.<span class="property">length</span></span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">while</span>(size--) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> node.<span class="property">children</span>) &#123;</span><br><span class="line">                item &amp;&amp; queue.<span class="title function_">push</span>(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h2><p>给出一个完全二叉树，求出该树的节点个数。<br>示例：输入：root = [1,2,3,4,5,6]     6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归法计算二叉树节点数</span></span><br><span class="line"><span class="keyword">var</span> countNodes = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 确定递归函数参数</span></span><br><span class="line">    <span class="keyword">const</span> getNodeSum = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 确定终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 3. 确定单层递归逻辑</span></span><br><span class="line">        <span class="keyword">let</span> leftNum = <span class="title function_">getNodeSum</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">let</span> rightNum = <span class="title function_">getNodeSum</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">return</span> leftNum + rightNum + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getNodeSum</span>(root);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="keyword">var</span> countNodes = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> queue = [];</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">let</span> nodeNums = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">while</span>(length--) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            nodeNums++;</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodeNums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。<br><strong>高度平衡二叉树</strong>定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。<br>示例：输入：[3, 9,20, null,null,15,7]     true</p><blockquote><p>思路：通过递归计算每个节点的子树高度，并检查每个节点的左右子树高度差是否超过1。<br>           如果超过1，表示该树不平衡，立即返回-1。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归三部曲 + 后序遍历 左右中 当前左子树右子树高度相差大于1就返回-1</span></span><br><span class="line"><span class="keyword">var</span> isBalanced = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 确定递归函数参数以及返回值</span></span><br><span class="line">    <span class="keyword">const</span> getDepth = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定递归函数终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 3. 确定单层递归逻辑</span></span><br><span class="line">        <span class="keyword">let</span> leftDepth = <span class="title function_">getDepth</span>(node.<span class="property">left</span>); <span class="comment">//左子树高度</span></span><br><span class="line">        <span class="comment">// 当判定左子树不为平衡二叉树时,即可直接返回-1</span></span><br><span class="line">        <span class="keyword">if</span>(leftDepth === -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> rightDepth = <span class="title function_">getDepth</span>(node.<span class="property">right</span>); <span class="comment">//右子树高度</span></span><br><span class="line">        <span class="comment">// 当判定右子树不为平衡二叉树时,即可直接返回-1</span></span><br><span class="line">        <span class="keyword">if</span>(rightDepth === -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(leftDepth - rightDepth) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">max</span>(leftDepth, rightDepth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="title function_">getDepth</span>(root) === -<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="keyword">var</span> getHeight = <span class="keyword">function</span> (<span class="params">curNode</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> queue = [];</span><br><span class="line">    <span class="keyword">if</span> (curNode !== <span class="literal">null</span>) queue.<span class="title function_">push</span>(curNode); <span class="comment">// 压入当前元素</span></span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = queue[queue.<span class="property">length</span> - <span class="number">1</span>]; <span class="comment">// 取出栈顶</span></span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.<span class="title function_">pop</span>();</span><br><span class="line">            queue.<span class="title function_">push</span>(node);   <span class="comment">// 中</span></span><br><span class="line">            queue.<span class="title function_">push</span>(<span class="literal">null</span>);</span><br><span class="line">            depth++;</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);   <span class="comment">// 右</span></span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);     <span class="comment">// 左</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            queue.<span class="title function_">pop</span>();</span><br><span class="line">            node = queue[queue.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">            queue.<span class="title function_">pop</span>();</span><br><span class="line">            depth--;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res &gt; depth ? res : depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> isBalanced = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = queue[queue.<span class="property">length</span> - <span class="number">1</span>]; <span class="comment">// 取出栈顶</span></span><br><span class="line">        queue.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="title function_">getHeight</span>(node.<span class="property">left</span>) - <span class="title function_">getHeight</span>(node.<span class="property">right</span>)) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257.二叉树的所有路径"></a>257.二叉树的所有路径</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。(叶子节点是指没有子节点的节点)<br>示例：输入：[1, 2,3, null,5,null,null]<br>           输出：[“1-&gt;2-&gt;5”, “1-&gt;3”]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归遍历+递归三部曲</span></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="comment">//1. 确定递归函数 函数参数</span></span><br><span class="line">    <span class="keyword">const</span> getPath = <span class="keyword">function</span>(<span class="params">node,curPath</span>) &#123;</span><br><span class="line">        <span class="comment">//2. 确定终止条件，到叶子节点就终止</span></span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            curPath += node.<span class="property">val</span> <span class="comment">// 将叶子节点值添加到当前路径</span></span><br><span class="line">            res.<span class="title function_">push</span>(curPath) <span class="comment">// 将完整路径添加到结果数组</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 确定单层递归逻辑</span></span><br><span class="line">        curPath += node.<span class="property">val</span> + <span class="string">&#x27;-&gt;&#x27;</span>;</span><br><span class="line">        node.<span class="property">left</span> &amp;&amp; <span class="title function_">getPath</span>(node.<span class="property">left</span>, curPath);</span><br><span class="line">        node.<span class="property">right</span> &amp;&amp; <span class="title function_">getPath</span>(node.<span class="property">right</span>, curPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getPath</span>(root, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代法</span></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">const</span> stack = [root], paths = [<span class="string">&#x27;&#x27;</span>], res = [];</span><br><span class="line">  <span class="keyword">while</span> (stack.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = stack.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">let</span> path = paths.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>) &#123; <span class="comment">// 到叶子节点终止, 添加路径到结果中</span></span><br><span class="line">      res.<span class="title function_">push</span>(path + node.<span class="property">val</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    path += node.<span class="property">val</span> + <span class="string">&#x27;-&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">right</span>) &#123; <span class="comment">// 右节点存在</span></span><br><span class="line">      stack.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">      paths.<span class="title function_">push</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span>) &#123; <span class="comment">// 左节点存在</span></span><br><span class="line">      stack.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">      paths.<span class="title function_">push</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h2><p>计算给定二叉树的所有左叶子之和。<br>示例：输入：[3, 9,20, null,null,15,7]<br>           在这个二叉树中，有两个左叶子9、15，所以返回24</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用后序遍历 递归遍历</span></span><br><span class="line"><span class="keyword">var</span> sumOfLeftLeaves = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 确定递归函数参数</span></span><br><span class="line">    <span class="keyword">const</span> nodesSum = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> leftValue = <span class="title function_">nodesSum</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">let</span> rightValue = <span class="title function_">nodesSum</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="comment">// 3. 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">let</span> midValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span> &amp;&amp; node.<span class="property">left</span>.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">left</span>.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            midValue = node.<span class="property">left</span>.<span class="property">val</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> sum = midValue + leftValue + rightValue;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">nodesSum</span>(root);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法 - 采用层序遍历</span></span><br><span class="line"><span class="keyword">var</span> sumOfLeftLeaves = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> queue = [],sum = <span class="number">0</span>;</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span> !== <span class="literal">null</span> &amp;&amp; node.<span class="property">left</span>.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">left</span>.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            sum += node.<span class="property">left</span>.<span class="property">val</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">        node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h2><p>给定一个二叉树，在树的最后一行找到最左边的值。<br>示例：输入：[2, 2,3]     1<br>           [1, 2,3, 4,null,5,6, null,null,7,null,null,null]   7</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归遍历 前序遍历 找到最大深度的叶子节点即可</span></span><br><span class="line"><span class="keyword">var</span> findBottomLeftValue = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxPath = <span class="number">0</span>, resNode = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 1. 确定递归函数的函数参数</span></span><br><span class="line">    <span class="keyword">const</span> dfsTree = <span class="keyword">function</span>(<span class="params">node, curPath</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 确定递归函数终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curPath &gt; maxPath) &#123;</span><br><span class="line">                maxPath = curPath;</span><br><span class="line">                resNode = node.<span class="property">val</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="property">left</span> &amp;&amp; <span class="title function_">dfsTree</span>(node.<span class="property">left</span>, curPath + <span class="number">1</span>);</span><br><span class="line">        node.<span class="property">right</span> &amp;&amp; <span class="title function_">dfsTree</span>(node.<span class="property">right</span>, curPath + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dfsTree</span>(root, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> resNode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//层序遍历 记录最后一行的第一个节点</span></span><br><span class="line"><span class="keyword">var</span> findBottomLeftValue = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> queue = [], resNode;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="keyword">if</span>(i === <span class="number">0</span>)  resNode = node.<span class="property">val</span>;</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resNode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，<br>这条路径上所有节点值相加等于目标和。</p><p>示例：输入：[5, 4,8, 11,null,13,4, 7,2,null,null,null,1]<br>           返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5 -&gt; 4 -&gt; 11 -&gt; 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归法</span></span><br><span class="line"><span class="keyword">let</span> haspathsum = <span class="keyword">function</span> (<span class="params">root, targetsum</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">node, cnt</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 遇到叶子节点，并且计数为0</span></span><br><span class="line">    <span class="keyword">if</span> (cnt === <span class="number">0</span> &amp;&amp; !node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 遇到叶子节点而没有找到合适的边(计数不为0)，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  左（空节点不遍历）.遇到叶子节点返回true，则直接返回true</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span> &amp;&amp; <span class="title function_">traversal</span>(node.<span class="property">left</span>, cnt - node.<span class="property">left</span>.<span class="property">val</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//  右（空节点不遍历）</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">right</span> &amp;&amp; <span class="title function_">traversal</span>(node.<span class="property">right</span>, cnt - node.<span class="property">right</span>.<span class="property">val</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">traversal</span>(root, targetsum - root.<span class="property">val</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法：</span></span><br><span class="line"><span class="keyword">let</span> hasPathSum = <span class="keyword">function</span>(<span class="params">root, targetSum</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> nodeArr = [root];</span><br><span class="line">    <span class="keyword">let</span> valArr = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span>(nodeArr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> curNode = nodeArr.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">let</span> curVal = valArr.<span class="title function_">shift</span>();</span><br><span class="line">        curVal += curNode.<span class="property">val</span>;</span><br><span class="line">        <span class="comment">// 为叶子结点，且和等于目标数，返回true</span></span><br><span class="line">        <span class="keyword">if</span> (curNode.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; curNode.<span class="property">right</span> === <span class="literal">null</span> &amp;&amp; curVal === targetSum) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左节点，将当前的数值也对应记录下来</span></span><br><span class="line">        <span class="keyword">if</span> (curNode.<span class="property">left</span>) &#123;</span><br><span class="line">            nodeArr.<span class="title function_">push</span>(curNode.<span class="property">left</span>);</span><br><span class="line">            valArr.<span class="title function_">push</span>(curVal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右节点，将当前的数值也对应记录下来</span></span><br><span class="line">        <span class="keyword">if</span> (curNode.<span class="property">right</span>) &#123;</span><br><span class="line">            nodeArr.<span class="title function_">push</span>(curNode.<span class="property">right</span>);</span><br><span class="line">            valArr.<span class="title function_">push</span>(curVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="113-路径总和Ⅱ"><a href="#113-路径总和Ⅱ" class="headerlink" title="113. 路径总和Ⅱ"></a>113. 路径总和Ⅱ</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归法：要遍历整个树找到所有路径，所以递归函数不需要返回值, 与112不同</span></span><br><span class="line"><span class="keyword">let</span> pathsum = <span class="keyword">function</span> (<span class="params">root, targetsum</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">travelsal</span> = (<span class="params">node, cnt, path</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 遇到了叶子节点且找到了和为sum的路径</span></span><br><span class="line">    <span class="keyword">if</span> (cnt === <span class="number">0</span> &amp;&amp; !node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>([...path]); <span class="comment">// 不能写res.push(path), 要深拷贝</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>) <span class="keyword">return</span>; <span class="comment">// 遇到叶子节点而没有找到合适的边，直接返回</span></span><br><span class="line">    <span class="comment">// 左 （空节点不遍历）</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span>) &#123;</span><br><span class="line">      path.<span class="title function_">push</span>(node.<span class="property">left</span>.<span class="property">val</span>);</span><br><span class="line">      <span class="title function_">travelsal</span>(node.<span class="property">left</span>, cnt - node.<span class="property">left</span>.<span class="property">val</span>, path); <span class="comment">// 递归</span></span><br><span class="line">      path.<span class="title function_">pop</span>(); <span class="comment">// 回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 右 （空节点不遍历）</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">right</span>) &#123;</span><br><span class="line">      path.<span class="title function_">push</span>(node.<span class="property">right</span>.<span class="property">val</span>);</span><br><span class="line">      <span class="title function_">travelsal</span>(node.<span class="property">right</span>, cnt - node.<span class="property">right</span>.<span class="property">val</span>, path); <span class="comment">// 递归</span></span><br><span class="line">      path.<span class="title function_">pop</span>(); <span class="comment">// 回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">  <span class="title function_">travelsal</span>(root, targetsum - root.<span class="property">val</span>, [root.<span class="property">val</span>]); <span class="comment">// 把根节点放进路径</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="keyword">let</span> pathSum = <span class="keyword">function</span>(<span class="params">root, targetSum</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> nodeArr = [root];</span><br><span class="line">    <span class="keyword">let</span> resArr = []; <span class="comment">// 记录符合目标和的返回路径</span></span><br><span class="line">    <span class="keyword">let</span> tempArr = [[]]; <span class="comment">// 对应路径</span></span><br><span class="line">    <span class="keyword">let</span> countArr = [<span class="number">0</span>]; <span class="comment">//对应和</span></span><br><span class="line">    <span class="keyword">while</span>(nodeArr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> curNode = nodeArr.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">let</span> curVal = countArr.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">let</span> curNodeArr = tempArr.<span class="title function_">shift</span>();</span><br><span class="line">        curVal += curNode.<span class="property">val</span>;</span><br><span class="line">        curNodeArr.<span class="title function_">push</span>(curNode.<span class="property">val</span>);</span><br><span class="line">        <span class="comment">// 为叶子结点，且和等于目标数，将此次结果数组push进返回数组中</span></span><br><span class="line">        <span class="keyword">if</span> (curNode.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; curNode.<span class="property">right</span> === <span class="literal">null</span> &amp;&amp; curVal === targetSum) &#123;</span><br><span class="line">            resArr.<span class="title function_">push</span>(curNodeArr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左节点，将当前的和及对应路径也对应记录下来</span></span><br><span class="line">        <span class="keyword">if</span> (curNode.<span class="property">left</span>) &#123;</span><br><span class="line">            nodeArr.<span class="title function_">push</span>(curNode.<span class="property">left</span>);</span><br><span class="line">            countArr.<span class="title function_">push</span>(curVal);</span><br><span class="line">            tempArr.<span class="title function_">push</span>([...curNodeArr]);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 右节点，将当前的和及对应路径也对应记录下来</span></span><br><span class="line">        <span class="keyword">if</span> (curNode.<span class="property">right</span>) &#123;</span><br><span class="line">            nodeArr.<span class="title function_">push</span>(curNode.<span class="property">right</span>);</span><br><span class="line">            countArr.<span class="title function_">push</span>(curVal);</span><br><span class="line">            tempArr.<span class="title function_">push</span>([...curNodeArr]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106.从中序与后序遍历序列构造二叉树"></a>106.从中序与后序遍历序列构造二叉树</h2><p>根据一棵树的中序遍历与后序遍历构造二叉树。</p><p>示例：中序遍历 inorder = [9,3,15,20,7]，后序遍历 postorder = [9,15,7,20, 3]<br>           返回如下的二叉树：[3, 9,20, null,null,15,7]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buildTree = <span class="keyword">function</span>(<span class="params">inorder, postorder</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!inorder.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> rootVal = postorder.<span class="title function_">pop</span>(); <span class="comment">// 从后序遍历的数组中获取中间节点的值， 即数组最后一个值</span></span><br><span class="line">    <span class="keyword">let</span> rootIndex = inorder.<span class="title function_">indexOf</span>(rootVal); <span class="comment">// 获取中间节点在中序遍历中的下标</span></span><br><span class="line">    <span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal); <span class="comment">// 创建中间节点</span></span><br><span class="line">    root.<span class="property">left</span> = <span class="title function_">buildTree</span>(inorder.<span class="title function_">slice</span>(<span class="number">0</span>, rootIndex), postorder.<span class="title function_">slice</span>(<span class="number">0</span>, rootIndex)); <span class="comment">// 创建左节点</span></span><br><span class="line">    root.<span class="property">right</span> = <span class="title function_">buildTree</span>(inorder.<span class="title function_">slice</span>(rootIndex + <span class="number">1</span>), postorder.<span class="title function_">slice</span>(rootIndex)); <span class="comment">// 创建右节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buildTree = <span class="keyword">function</span>(<span class="params">preorder, inorder</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!preorder.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> rootVal = preorder.<span class="title function_">shift</span>(); <span class="comment">// 从前序遍历的数组中获取中间节点的值， 即数组第一个值</span></span><br><span class="line">    <span class="keyword">const</span> index = inorder.<span class="title function_">indexOf</span>(rootVal); <span class="comment">// 获取中间节点在中序遍历中的下标</span></span><br><span class="line">    <span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal); <span class="comment">// 创建中间节点</span></span><br><span class="line">    root.<span class="property">left</span> = <span class="title function_">buildTree</span>(preorder.<span class="title function_">slice</span>(<span class="number">0</span>, index), inorder.<span class="title function_">slice</span>(<span class="number">0</span>, index)); <span class="comment">// 创建左节点</span></span><br><span class="line">    root.<span class="property">right</span> = <span class="title function_">buildTree</span>(preorder.<span class="title function_">slice</span>(index), inorder.<span class="title function_">slice</span>(index + <span class="number">1</span>)); <span class="comment">// 创建右节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h2><p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：<br>    二叉树的根是数组中的最大元素。<br>    左子树是通过数组中最大值左边部分构造出的最大二叉树。<br>    右子树是通过数组中最大值右边部分构造出的最大二叉树。<br>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p><p>示例：输入：[3,2,1,6,0,5]<br>           返回如下的二叉树：[6, 3,5, null,2,0,null, null,null,null,1,null…]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> constructMaximumBinaryTree = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">BuildTree</span> = (<span class="params">arr, left, right</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> maxValue = -<span class="number">1</span>, maxIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">                maxValue = arr[i];</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(maxValue);</span><br><span class="line">        root.<span class="property">left</span> = <span class="title class_">BuildTree</span>(arr, left, maxIndex - <span class="number">1</span>);</span><br><span class="line">        root.<span class="property">right</span> = <span class="title class_">BuildTree</span>(arr, maxIndex + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="title class_">BuildTree</span>(nums, <span class="number">0</span>, nums.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h2><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为NULL 的节点将直接作为新二叉树的节点。</p><p>示例：输入：Tree1 [1, 3,2, 5,null,null,null]，Tree2 [2, 1,3, null,4,null,7]<br>           合并后的树：[3, 4,5, 5,4,null,7]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mergeTrees = <span class="keyword">function</span> (<span class="params">root1, root2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">preOrder</span> = (<span class="params">root1, root2</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root1) <span class="keyword">return</span> root2</span><br><span class="line">        <span class="keyword">if</span>(!root2) <span class="keyword">return</span> root1;</span><br><span class="line">        root1.<span class="property">val</span> += root2.<span class="property">val</span>;</span><br><span class="line">        root1.<span class="property">left</span> = <span class="title function_">preOrder</span>(root1.<span class="property">left</span>, root2.<span class="property">left</span>);</span><br><span class="line">        root1.<span class="property">right</span> = <span class="title function_">preOrder</span>(root1.<span class="property">right</span>, root2.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">preOrder</span>(root1, root2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法：</span></span><br><span class="line"><span class="keyword">var</span> mergeTrees = <span class="keyword">function</span>(<span class="params">root1, root2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root1 === <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">    <span class="keyword">if</span> (root2 === <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> queue = [];</span><br><span class="line">    queue.<span class="title function_">push</span>(root1);</span><br><span class="line">    queue.<span class="title function_">push</span>(root2);</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node1 = queue.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">let</span> node2 = queue.<span class="title function_">shift</span>();;</span><br><span class="line">        node1.<span class="property">val</span> += node2.<span class="property">val</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">left</span> !== <span class="literal">null</span> &amp;&amp; node2.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node1.<span class="property">left</span>);</span><br><span class="line">            queue.<span class="title function_">push</span>(node2.<span class="property">left</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">right</span> !== <span class="literal">null</span> &amp;&amp; node2.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node1.<span class="property">right</span>);</span><br><span class="line">            queue.<span class="title function_">push</span>(node2.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node2.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            node1.<span class="property">left</span> = node2.<span class="property">left</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">right</span> === <span class="literal">null</span> &amp;&amp; node2.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            node1.<span class="property">right</span> = node2.<span class="property">right</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h2><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。<br>返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p><p>示例： 输入： [4, 2,7, 1,3,null,null], 和值：2<br>            返回：[2, 1,3]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchBST = <span class="keyword">function</span> (<span class="params">root, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root &amp;&amp; root.<span class="property">val</span> === val) <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">if</span>(root.<span class="property">val</span> &gt; val) <span class="keyword">return</span> <span class="title function_">searchBST</span>(root.<span class="property">left</span>, val)</span><br><span class="line">    <span class="keyword">if</span>(root.<span class="property">val</span> &lt; val) <span class="keyword">return</span> <span class="title function_">searchBST</span>(root.<span class="property">right</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法：</span></span><br><span class="line"><span class="keyword">var</span> searchBST = <span class="keyword">function</span> (<span class="params">root, val</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(root !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.<span class="property">val</span> &gt; val) root = root.<span class="property">left</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.<span class="property">val</span> &lt; val) root = root.<span class="property">right</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">    reutrn <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h2><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。<br>  假设一个二叉搜索树具有如下特征：<br>    节点的左子树只包含小于当前节点的数。<br>    节点的右子树只包含大于当前节点的数。<br>    所有左子树和右子树自身必须也是二叉搜索树。</p><p>示例： 输入： [5, 1,4, null,null,3,6]   输出：false<br>            输入：[2, 1,3]                        输出：true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 辅助数组：中序递归</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">buildArr</span> = (<span class="params">root</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="title function_">buildArr</span>(root.<span class="property">left</span>);</span><br><span class="line">            arr.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">            <span class="title function_">buildArr</span>(root.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">buildArr</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt;= arr[i - <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归中：</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>; <span class="comment">// 用于保存上一个访问的节点，用于与当前节点比较，以确保节点值按升序排列。</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inOrder</span> = (<span class="params">root</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="title function_">inOrder</span>(root.<span class="property">left</span>); <span class="comment">// 递归遍历左子树</span></span><br><span class="line">        <span class="comment">// 检查当前节点值是否小于等于前一个节点值</span></span><br><span class="line">        <span class="keyword">if</span>(pre !== <span class="literal">null</span> &amp;&amp; pre.<span class="property">val</span> &gt;= root.<span class="property">val</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        pre = root; <span class="comment">// 更新 pre 为当前节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> right = <span class="title function_">inOrder</span>(root.<span class="property">right</span>); <span class="comment">// 递归遍历右子树</span></span><br><span class="line">        <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">inOrder</span>(root);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法：</span></span><br><span class="line"><span class="keyword">var</span> isValidBST = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> queue = [];</span><br><span class="line"><span class="keyword">let</span> cur = root, pre = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cur !== <span class="literal">null</span> || queue.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur !== <span class="literal">null</span>) &#123;</span><br><span class="line">queue.<span class="title function_">push</span>(cur);</span><br><span class="line">cur = cur.<span class="property">left</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cur = queue.<span class="title function_">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (pre !== <span class="literal">null</span> &amp;&amp; cur.<span class="property">val</span> &lt;= pre.<span class="property">val</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = cur.<span class="property">right</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h2><p>给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p><p>示例： 输入： [1, null,3, null,null,2,null]   输出：1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归 先转换为有序数组</span></span><br><span class="line"><span class="keyword">var</span> getMinimumDifference = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">buildArr</span> = (<span class="params">root</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="title function_">buildArr</span>(root.<span class="property">left</span>);</span><br><span class="line">            arr.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">            <span class="title function_">buildArr</span>(root.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">buildArr</span>(root);</span><br><span class="line">    <span class="keyword">let</span> diff = arr[arr.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (diff &gt; arr[i] - arr[i - <span class="number">1</span>])</span><br><span class="line">            diff = arr[i] - arr[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> diff;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归 在递归的过程中更新最小值</span></span><br><span class="line"><span class="keyword">var</span> getMinimumDifference = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="title class_">Infinity</span></span><br><span class="line">    <span class="keyword">let</span> preNode = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inorder</span> = (<span class="params">node</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span></span><br><span class="line">        <span class="title function_">inorder</span>(node.<span class="property">left</span>)</span><br><span class="line">        <span class="comment">// 更新res</span></span><br><span class="line">        <span class="keyword">if</span>(preNode) res = <span class="title class_">Math</span>.<span class="title function_">min</span>(res, node.<span class="property">val</span> - preNode.<span class="property">val</span>)</span><br><span class="line">        <span class="comment">// 记录前一个节点         </span></span><br><span class="line">        preNode = node</span><br><span class="line">        <span class="title function_">inorder</span>(node.<span class="property">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inorder</span>(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代 中序遍历</span></span><br><span class="line"><span class="keyword">var</span> getMinimumDifference = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> cur = root</span><br><span class="line">    <span class="keyword">let</span> res = <span class="title class_">Infinity</span></span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(cur || stack.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(cur)</span><br><span class="line">            cur = cur.<span class="property">left</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = stack.<span class="title function_">pop</span>()</span><br><span class="line">            <span class="keyword">if</span>(pre) res = <span class="title class_">Math</span>.<span class="title function_">min</span>(res, cur.<span class="property">val</span> - pre.<span class="property">val</span>)</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.<span class="property">right</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h2><p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p><p>示例： 输入：BST [1, null,2,2],   输出：[2]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归中序遍历 - 使用额外空间map的方法</span></span><br><span class="line"><span class="keyword">var</span> findMode = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="comment">// 1. 确定递归函数以及函数参数</span></span><br><span class="line">    <span class="keyword">const</span> traverTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> </span><br><span class="line">        <span class="title function_">traverTree</span>(root.<span class="property">left</span>);</span><br><span class="line">        <span class="comment">// 3. 单层递归逻辑</span></span><br><span class="line">        map.<span class="title function_">set</span>(root.<span class="property">val</span>, map.<span class="title function_">has</span>(root.<span class="property">val</span>) ? map.<span class="title function_">get</span>(root.<span class="property">val</span>)+<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        <span class="title function_">traverTree</span>(root.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">traverTree</span>(root);</span><br><span class="line">    <span class="comment">//上面把数据都存储到map</span></span><br><span class="line">    <span class="comment">//下面开始寻找map里面的</span></span><br><span class="line">    <span class="comment">// 定义一个最大出现次数的初始值为root.val的出现次数</span></span><br><span class="line">    <span class="keyword">let</span> maxCount = map.<span class="title function_">get</span>(root.<span class="property">val</span>);</span><br><span class="line">    <span class="keyword">let</span> res = [];<span class="comment">// 定义一个存放结果的数组res</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">        <span class="comment">// 如果当前值等于最大出现次数就直接在res增加该值</span></span><br><span class="line">        <span class="keyword">if</span>(value === maxCount) res.<span class="title function_">push</span>(key);</span><br><span class="line">        <span class="comment">// 如果value的值大于原本的maxCount就清空res的所有值，因为找到了更大的</span></span><br><span class="line">        <span class="keyword">if</span>(value &gt; maxCount) &#123;</span><br><span class="line">            res = [];</span><br><span class="line">            maxCount = value;</span><br><span class="line">            res.<span class="title function_">push</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用额外空间，利用二叉树性质，中序遍历(有序)：</span></span><br><span class="line"><span class="keyword">var</span> findMode = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 不使用额外空间，使用中序遍历,设置出现最大次数初始值为1</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>,maxCount = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> pre = root,res = [];</span><br><span class="line">    <span class="comment">// 1.确定递归函数及函数参数</span></span><br><span class="line">    <span class="keyword">const</span> travelTree = <span class="keyword">function</span>(<span class="params">cur</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(cur === <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="title function_">travelTree</span>(cur.<span class="property">left</span>);</span><br><span class="line">        <span class="comment">// 3. 单层递归逻辑</span></span><br><span class="line">        <span class="keyword">if</span>(pre.<span class="property">val</span> === cur.<span class="property">val</span>) count++;</span><br><span class="line">        <span class="keyword">else</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        pre = cur;</span><br><span class="line">        <span class="keyword">if</span>(count === maxCount) res.<span class="title function_">push</span>(cur.<span class="property">val</span>);</span><br><span class="line">        <span class="keyword">if</span>(count &gt; maxCount) &#123;</span><br><span class="line">            res = [];</span><br><span class="line">            maxCount = count;</span><br><span class="line">            res.<span class="title function_">push</span>(cur.<span class="property">val</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">travelTree</span>(cur.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">travelTree</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>示例： 输入：root = [3, 5,1, 6,2,0,8, null,null,7,4], p = 5, q = 1<br>            输出：3  (节点 5 和节点 1 的最近公共祖先是节点 3)</p><blockquote><p>如果当前节点为空（表示到达了叶子节点的子节点）或者当前节点是 p 或 q 之一，则直接返回当前节点。<br>递归调用 travelTree 遍历左子树和右子树。<br>如果左子树和右子树都找到节点，则说明当前节点 root 是最近公共祖先。<br>如果左子树没有找到节点，则返回右子树的结果。<br>如果右子树没有找到节点，则返回左子树的结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归:需要从下到上，所以使用后序遍历</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="keyword">function</span>(<span class="params">root, p, q</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 确定递归的函数</span></span><br><span class="line">    <span class="keyword">const</span> travelTree = <span class="keyword">function</span>(<span class="params">root,p,q</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root === <span class="literal">null</span> || root === p || root === q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 3. 确定递归单层逻辑</span></span><br><span class="line">        <span class="keyword">let</span> left = <span class="title function_">travelTree</span>(root.<span class="property">left</span>, p, q);</span><br><span class="line">        <span class="keyword">let</span> right = <span class="title function_">travelTree</span>(root.<span class="property">right</span>, p, q);</span><br><span class="line">        <span class="keyword">if</span>(left !== <span class="literal">null</span> &amp;&amp; right !== <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(left === <span class="literal">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">travelTree</span>(root, p, q);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a>235. 二叉搜索树的最近公共祖先</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>示例： 输入：root = [6, 2,8, 0,4,7,9, null,null,3,5], p = 2, q = 8<br>            输出：6  (节点 2 和节点 8 的最近公共祖先是 6)</p><blockquote><p>在BST中，左子树节点的值都小于根节点的值，右子树节点的值都大于根节点的值。<br>如果当前节点的值大于 p 和 q 的值，说明 p 和 q 都在左子树，所以递归左子树。<br>如果当前节点的值小于 p 和 q 的值，说明 p 和 q 都在右子树，所以递归右子树。<br>如果当前节点的值介于 p 和 q 之间（包括等于），说明当前节点就是LCA。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归: 1. 使用给定的递归函数lowestCommonAncestor</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="keyword">function</span>(<span class="params">root, p, q</span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 确定递归终止条件</span></span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span>(root.<span class="property">val</span> &gt; p.<span class="property">val</span> &amp;&amp; root.<span class="property">val</span> &gt; q.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 向左子树查询</span></span><br><span class="line">        <span class="keyword">return</span> root.<span class="property">left</span> = <span class="title function_">lowestCommonAncestor</span>(root.<span class="property">left</span>,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.<span class="property">val</span> &lt; p.<span class="property">val</span> &amp;&amp; root.<span class="property">val</span> &lt; q.<span class="property">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 向右子树查询</span></span><br><span class="line">        <span class="keyword">return</span> root.<span class="property">right</span> = <span class="title function_">lowestCommonAncestor</span>(root.<span class="property">right</span>,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="keyword">function</span>(<span class="params">root, p, q</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root.<span class="property">val</span> &gt; p.<span class="property">val</span> &amp;&amp; root.<span class="property">val</span> &gt; q.<span class="property">val</span>) &#123;</span><br><span class="line">            root = root.<span class="property">left</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.<span class="property">val</span> &lt; p.<span class="property">val</span> &amp;&amp; root.<span class="property">val</span> &lt; q.<span class="property">val</span>) &#123;</span><br><span class="line">            root = root.<span class="property">right</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h2><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。返回插入后二叉搜索树的根节点。<br>输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。</p><p>示例： 输入：root = [4, 2,7, 1,3,null,null], 插入的值：5<br>            输出：[4, 2, 7, 1,3,5,null] 或者 [5, 2,7, 1,3,null,null, null,null,null,4]</p><blockquote><p>如果当前节点为空，创建一个新的节点并返回它，这意味着找到了插入位置。<br>如果当前节点的值大于要插入的值，则递归地将值插入到左子树。<br>如果当前节点的值小于要插入的值，则递归地将值插入到右子树。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归：有返回值</span></span><br><span class="line"><span class="keyword">var</span> insertIntoBST = <span class="keyword">function</span> (<span class="params">root, val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setInOrder</span> = (<span class="params">root, val</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.<span class="property">val</span> &gt; val)</span><br><span class="line">            root.<span class="property">left</span> = <span class="title function_">setInOrder</span>(root.<span class="property">left</span>, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root.<span class="property">val</span> &lt; val)</span><br><span class="line">            root.<span class="property">right</span> = <span class="title function_">setInOrder</span>(root.<span class="property">right</span>, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">setInOrder</span>(root, val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归：无返回值</span></span><br><span class="line"><span class="keyword">var</span> insertIntoBST = <span class="keyword">function</span> (<span class="params">root, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> parent = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">preOrder</span> = (<span class="params">cur, val</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            <span class="keyword">if</span> (parent.<span class="property">val</span> &gt; val)</span><br><span class="line">                parent.<span class="property">left</span> = node;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                parent.<span class="property">right</span> = node;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parent = cur;</span><br><span class="line">        <span class="keyword">if</span> (cur.<span class="property">val</span> &gt; val)</span><br><span class="line">            <span class="title function_">preOrder</span>(cur.<span class="property">left</span>, val);</span><br><span class="line">        <span class="keyword">if</span> (cur.<span class="property">val</span> &lt; val)</span><br><span class="line">            <span class="title function_">preOrder</span>(cur.<span class="property">right</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>)</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    <span class="title function_">preOrder</span>(root, val);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代：</span></span><br><span class="line"><span class="keyword">var</span> insertIntoBST = <span class="keyword">function</span> (<span class="params">root, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> parent = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">let</span> cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            parent = cur;</span><br><span class="line">            <span class="keyword">if</span>(cur.<span class="property">val</span> &gt; val) cur = cur.<span class="property">left</span>;</span><br><span class="line">            <span class="keyword">else</span> cur = cur.<span class="property">right</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span>(parent.<span class="property">val</span> &gt; val) parent.<span class="property">left</span> = node;</span><br><span class="line">        <span class="keyword">else</span> parent.<span class="property">right</span> = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450.删除二叉搜索树中的节点"></a>450.删除二叉搜索树中的节点</h2><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>示例： 输入：root = [5, 3,6, 2,4,null,7], key = 3<br>            输出：[5, 4,6, 2,null,null,7] 或者 [5, 2,6, null,4,null,7]</p><p>代码实现思路：</p><blockquote><ol><li><p>递归查找节点：<br>函数 deleteNode(root, key) 的目标是从二叉搜索树中删除值为 key 的节点。<br>首先，检查树的根节点 root 是否为 null，如果是，则返回 null，表明树为空。<br>然后，根据二叉搜索树的性质，如果 key 大于当前节点的值 root.val，那么 key 只能在当前节点的右子树中，于是递归调用 deleteNode(root.right, key)。<br>如果 key 小于 root.val，则继续在左子树中查找，调用 deleteNode(root.left, key)。</p></li><li><p>当找到匹配的节点（即 key 等于 root.val）时，进入处理节点删除的逻辑：<br>场景1：若该节点是一个叶节点（没有子节点），直接返回 null。<br>场景2：若该节点只有一个子节点（要么左子节点存在，要么右子节点存在），则返回该子节点，从而将其替代当前节点。<br>场景3：若该节点有两个子节点，需找到其右子树中最小的节点（即后继节点），将当前节点的值替换为后继节点的值，然后递归删除右子树中的后继节点。</p></li><li><p>获取最小值节点：<br>getMinNode(root) 函数通过不断向左子树遍历，直到找到最左边的节点，即为当前子树最小的节点。</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deleteNode = <span class="keyword">function</span>(<span class="params">root, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (key &gt; root.<span class="property">val</span>) &#123;</span><br><span class="line">        root.<span class="property">right</span> = <span class="title function_">deleteNode</span>(root.<span class="property">right</span>, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; root.<span class="property">val</span>) &#123;</span><br><span class="line">        root.<span class="property">left</span> = <span class="title function_">deleteNode</span>(root.<span class="property">left</span>, key);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 场景1: 该节点是叶节点</span></span><br><span class="line">        <span class="keyword">if</span> (!root.<span class="property">left</span> &amp;&amp; !root.<span class="property">right</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 场景2: 有一个孩子节点不存在</span></span><br><span class="line">        <span class="keyword">if</span> (root.<span class="property">left</span> &amp;&amp; !root.<span class="property">right</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.<span class="property">left</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.<span class="property">right</span> &amp;&amp; !root.<span class="property">left</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.<span class="property">right</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 场景3: 左右节点都存在</span></span><br><span class="line">        <span class="keyword">const</span> rightNode = root.<span class="property">right</span>;</span><br><span class="line">        <span class="comment">// 获取最小值节点</span></span><br><span class="line">        <span class="keyword">const</span> minNode = <span class="title function_">getMinNode</span>(rightNode);</span><br><span class="line">        <span class="comment">// 将待删除节点的值替换为最小值节点值</span></span><br><span class="line">        root.<span class="property">val</span> = minNode.<span class="property">val</span>;</span><br><span class="line">        <span class="comment">// 删除最小值节点</span></span><br><span class="line">        root.<span class="property">right</span> = <span class="title function_">deleteNode</span>(root.<span class="property">right</span>, minNode.<span class="property">val</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMinNode</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (root.<span class="property">left</span>) &#123;</span><br><span class="line">        root = root.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法：</span></span><br><span class="line"><span class="keyword">var</span> deleteNode = <span class="keyword">function</span> (<span class="params">root, key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">deleteOneNode</span> = target =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!target) <span class="keyword">return</span> target</span><br><span class="line">        <span class="keyword">if</span> (!target.<span class="property">right</span>) <span class="keyword">return</span> target.<span class="property">left</span></span><br><span class="line">        <span class="keyword">let</span> cur = target.<span class="property">right</span></span><br><span class="line">        <span class="keyword">while</span> (cur.<span class="property">left</span>) &#123;</span><br><span class="line">            cur = cur.<span class="property">left</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur.<span class="property">left</span> = target.<span class="property">left</span></span><br><span class="line">        <span class="keyword">return</span> target.<span class="property">right</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">let</span> cur = root, pre = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.<span class="property">val</span> === key) <span class="keyword">break</span></span><br><span class="line">        pre = cur</span><br><span class="line">        cur.<span class="property">val</span> &gt; key ? cur = cur.<span class="property">left</span> : cur = cur.<span class="property">right</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!pre) <span class="keyword">return</span> <span class="title function_">deleteOneNode</span>(cur)</span><br><span class="line">    <span class="keyword">if</span>(pre.<span class="property">left</span> &amp;&amp; pre.<span class="property">left</span>.<span class="property">val</span> === key) pre.<span class="property">left</span> = <span class="title function_">deleteOneNode</span>(cur)</span><br><span class="line">    <span class="keyword">if</span>(pre.<span class="property">right</span> &amp;&amp; pre.<span class="property">right</span>.<span class="property">val</span> === key) pre.<span class="property">right</span> = <span class="title function_">deleteOneNode</span>(cur)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a>669. 修剪二叉搜索树</h2><p>给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p><p>示例: 输入：root = [1, 0,2], L = 1, R = 2  输出：[1, null,2]  </p><p>递归代码实现思路：</p><blockquote><p>首先判断root.val：<br>    如果节点值小于 low：则该节点及其所有左子树的元素都不符合条件，需要修剪掉这个节点，直接递归调用修剪右子树，并返回结果（即右子树的根）。<br>     如果节点值大于 high：则该节点及其所有右子树的元素都不符合条件，需要修剪掉这个节点，递归调用修剪左子树，并返回左子树的根。</p><p>如果 root 的值在 [low, high] 范围内：<br>    递归地修剪左子树：root.left = trimBST(root.left, low, high)。<br>    递归地修剪右子树：root.right = trimBST(root.right, low, high)。<br>    最后返回当前节点 root。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> trimBST = <span class="keyword">function</span> (<span class="params">root,low,high</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.<span class="property">val</span> &lt; low) &#123;</span><br><span class="line">        <span class="keyword">let</span> right = <span class="title function_">trimBST</span>(root.<span class="property">right</span>, low, high);</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.<span class="property">val</span> &gt; high) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="title function_">trimBST</span>(root.<span class="property">left</span>, low, high);</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    root.<span class="property">left</span> = <span class="title function_">trimBST</span>(root.<span class="property">left</span>, low, high);</span><br><span class="line">    root.<span class="property">right</span> = <span class="title function_">trimBST</span>(root.<span class="property">right</span>, low, high);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 迭代</span></span><br><span class="line"><span class="keyword">var</span> trimBST = <span class="keyword">function</span>(<span class="params">root, low, high</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">while</span>(root !== <span class="literal">null</span> &amp;&amp; (root.<span class="property">val</span> &lt; low || root.<span class="property">val</span> &gt; high)) &#123;</span><br><span class="line">       <span class="keyword">if</span>(root.<span class="property">val</span> &lt; low) root = root.<span class="property">right</span>;</span><br><span class="line">       <span class="keyword">else</span> root = root.<span class="property">left</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> cur = root;</span><br><span class="line">   <span class="keyword">while</span>(cur !== <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="keyword">while</span>(cur.<span class="property">left</span> &amp;&amp; cur.<span class="property">left</span>.<span class="property">val</span> &lt; low) &#123;</span><br><span class="line">           cur.<span class="property">left</span> = cur.<span class="property">left</span>.<span class="property">right</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       cur = cur.<span class="property">left</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   cur =  root;</span><br><span class="line">   <span class="comment">//判断右子树大于high的情况</span></span><br><span class="line">   <span class="keyword">while</span>(cur !== <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="keyword">while</span>(cur.<span class="property">right</span> &amp;&amp; cur.<span class="property">right</span>.<span class="property">val</span> &gt; high) &#123;</span><br><span class="line">           cur.<span class="property">right</span> = cur.<span class="property">right</span>.<span class="property">left</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       cur = cur.<span class="property">right</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><ul><li><strong>高度平衡二叉树</strong>是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</li></ul><p>示例：<img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022117837.png" alt="photo"></p><p><strong>递归</strong>代码实现思路：</p><blockquote><ol><li>定义辅助函数 buildTree，负责递归构建树的节点。首先检查当前的左右索引，即 left 和 right。如果 left 大于 right，这意味着当前子数组为空，因此返回 null。</li><li>选择根节点：计算当前子数组的中间索引 mid，用它的值来创建当前子树的根节点。这样可以确保树的平衡，因为每次都选择中间节点作为根节点，从而使左子树和右子树的节点数尽量相等。</li><li>递归调用 buildTree 函数，分别构建左子树和右子树：<br> 左子树的范围是从 left 到 mid - 1。<br> 右子树的范围是从 mid + 1 到 right。</li><li>返回当前的根节点 root。</li><li>调用 buildTree 函数来开始构建树，传入整个数组的索引范围（0 到 nums.length - 1）。</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">buildTree</span> = (<span class="params">nums, left, right</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(left + (right - left) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">let</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid])</span><br><span class="line">        root.<span class="property">left</span> = <span class="title function_">buildTree</span>(nums, left, mid - <span class="number">1</span>) <span class="comment">//</span></span><br><span class="line">        root.<span class="property">right</span> = <span class="title function_">buildTree</span>(nums, mid + <span class="number">1</span>, right) <span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">buildTree</span>(nums, <span class="number">0</span>, nums.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="property">length</span>===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);       <span class="comment">// 初始根节点</span></span><br><span class="line">    <span class="keyword">let</span> nodeQue = [root];             <span class="comment">// 放遍历的节点,并初始化</span></span><br><span class="line">    <span class="keyword">let</span> leftQue = [<span class="number">0</span>];                <span class="comment">// 放左区间的下标,初始化</span></span><br><span class="line">    <span class="keyword">let</span> rightQue = [nums.<span class="property">length</span>-<span class="number">1</span>];   <span class="comment">// 放右区间的下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(nodeQue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> curNode = nodeQue.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">let</span> left = leftQue.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">let</span> right = rightQue.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">let</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right-left)/<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        curNode.<span class="property">val</span> = nums[mid];      <span class="comment">// 将下标为mid的元素给中间节点</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//    处理左区间</span></span><br><span class="line">        <span class="keyword">if</span>(left &lt;= mid-<span class="number">1</span>) &#123;</span><br><span class="line">            curNode.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">            nodeQue.<span class="title function_">push</span>(curNode.<span class="property">left</span>);</span><br><span class="line">            leftQue.<span class="title function_">push</span>(left);</span><br><span class="line">            rightQue.<span class="title function_">push</span>(mid-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//     处理右区间</span></span><br><span class="line">        <span class="keyword">if</span>(right &gt;= mid+<span class="number">1</span>) &#123;</span><br><span class="line">            curNode.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">            nodeQue.<span class="title function_">push</span>(curNode.<span class="property">right</span>);</span><br><span class="line">            leftQue.<span class="title function_">push</span>(mid+<span class="number">1</span>);</span><br><span class="line">            rightQue.<span class="title function_">push</span>(right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h2><p>给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。</p><p>示例：输入：[4, 1,6, 0,2,5,7, null,null,null,3,null,null,null,8]<br>           输出：[30, 36,21, 36,35,26,15, null,null,null,33,null,null,null,8]</p><p>递归代码实现思路：</p><blockquote><p>反向中序遍历：<br>    在 BST 中，中序遍历（左-中-右）会得到一个递增序列。反向中序遍历（右-中-左）会得到一个递减序列。<br>    通过反向中序遍历，先处理较大的节点，然后逐渐处理较小的节点。<br>    对于每个节点，首先处理右子树，累加值加到当前节点，然后更新累加值为当前节点的值，最后处理左子树。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> convertBST = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>; <span class="comment">// 存储当前节点处理后累加的值</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">ReverseInOrder</span> = (<span class="params">cur</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">            <span class="title class_">ReverseInOrder</span>(cur.<span class="property">right</span>);</span><br><span class="line">            cur.<span class="property">val</span> += pre;</span><br><span class="line">            pre = cur.<span class="property">val</span>;</span><br><span class="line">            <span class="title class_">ReverseInOrder</span>(cur.<span class="property">left</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">ReverseInOrder</span>(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="keyword">var</span> convertBST = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> cur = root;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">while</span> (cur !== <span class="literal">null</span> || stack.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur !== <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(cur);</span><br><span class="line">            cur = cur.<span class="property">right</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack.<span class="title function_">pop</span>();</span><br><span class="line">        cur.<span class="property">val</span> += pre;</span><br><span class="line">        pre = cur.<span class="property">val</span>;</span><br><span class="line">        cur = cur.<span class="property">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hot100</title>
      <link href="/2024/08/02/algorithm-hot100/"/>
      <url>/2024/08/02/algorithm-hot100/</url>
      
        <content type="html"><![CDATA[<h1 id="hot100"><a href="#hot100" class="headerlink" title="hot100"></a>hot100</h1><h2 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h2><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></h3><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p><p>示例：输入：<code>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3</code><br>           输出：<code>Intersected at &#39;8&#39;</code></p><p>代码实现思路：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 哈希表：先遍历一遍链表 A，用哈希表把每个节点都记录下来(注意要存节点引用而不是节点值)。</span></span><br><span class="line"><span class="comment">//        再去遍历链表 B，找到在哈希表中出现过的节点即为两个链表的交点。</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span> (<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!headA || !headB) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> hashmap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (headA) &#123;</span><br><span class="line">        hashmap.<span class="title function_">set</span>(headA, <span class="number">1</span>);</span><br><span class="line">        headA = headA.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (headB) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hashmap.<span class="title function_">has</span>(headB)) <span class="keyword">return</span> headB;</span><br><span class="line">        headB = headB.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双指针法</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span> (<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!headA || !headB) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (headA !== headB) &#123;</span><br><span class="line">        headA = headA === <span class="literal">null</span> ? headB : headA.<span class="property">next</span>;</span><br><span class="line">        headB = headB === <span class="literal">null</span> ? headA : headB.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力：对于链表 A 的每个节点，都去链表 B 中遍历一遍找看看有没有相同的节点。</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span> (<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!headA || !headB) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (headA) &#123;</span><br><span class="line">        <span class="keyword">while</span> (headB) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pA === headB) <span class="keyword">return</span> headA;</span><br><span class="line">            headB = headB.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        headA = headA.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h3><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><p>示例:  输入：<code>head = [1,2,3,4,5]</code>   输出：<code>[5,4,3,2,1]</code><br>          输入：<code>head = [1,2]</code>            输出：<code>[2,1]</code></p><ul><li><strong>双指针法</strong>：</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408031905179.png" alt="photo"></p><blockquote><p>while 循环遍历链表当前节点 在反转指针前，先将当前节点的指针cur.next存储到 temp 中。</p><p>将当前节点 cur 的 next 指针指向 pre，</p><p>将 pre 更新为当前节点 cur（为下一个节点准备），然后将 cur 更新为 temp（继续遍历下一个节点)。</p><p>最后返回 pre。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span>, cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="literal">null</span> </span><br><span class="line">        temp = cur.<span class="property">next</span> <span class="comment">// 暂存当前指针cur.next</span></span><br><span class="line">        cur.<span class="property">next</span> = pre <span class="comment">// 反转链表：改变 cur-&gt;next 的指向</span></span><br><span class="line">        <span class="comment">// 更新pre和cur指针</span></span><br><span class="line">        pre = cur </span><br><span class="line">        cur = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>递归法</strong>：从前往后反转</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseList</span>(<span class="params">head</span>) &#123;  </span><br><span class="line">    <span class="comment">// 基础情况：如果链表为空或只有一个节点，则直接返回头节点  </span></span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归反转剩余链表  </span></span><br><span class="line">    <span class="keyword">const</span> newHead = <span class="title function_">reverseList</span>(head.<span class="property">next</span>);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将当前节点的下一个节点指向当前节点  </span></span><br><span class="line">    head.<span class="property">next</span>.<span class="property">next</span> = head;  </span><br><span class="line">    <span class="comment">// 断开链表，当前节点的下一个指向 null  </span></span><br><span class="line">    head.<span class="property">next</span> = <span class="literal">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newHead;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode.cn/problems/palindrome-linked-list/">234. 回文链表</a></h3><p>给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。</p><p>示例：输入：<code>head = [1,2,2,1]</code>  输出：<code>true</code><br>           输入：<code>head = [1,2]</code>         输出：<code>false</code></p><p>代码实现思路：<strong>双指针法</strong>：O(n)+O(1)<br> <img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408031905185.png" alt="photo"></p><ol><li><p>找到链表的中间节点，从而把链表分成前半段和后半段。</p></li><li><p>反转后半段链表</p></li><li><p>把前半段链表的值和后半段链表的值进行比较，保持一致说明是回文链表。否则，就不是。</p></li></ol><blockquote><p>先通过快慢指针遍历，当 fast &amp;&amp; fast.next 为 false 时，说明遍历完成：</p><p>此时若是奇数 ，slow 在链表中间；若是偶数，slow 在中间 n/2 + 1 那里，即如果是 6 个，那么在第四个；</p><p>在上面的过程中，slow 指针同时配合 q 和 newHead 指针进行反转链表的记录；<br>遍历完成后，通过判断 fast 是否为空，来判断是不是奇数，如果 fast 还在链表内，说明是奇数</p><p>如果偶数，不用做动作，因为以 slow 和 newHead 分别为头部的两个准备要比较的链表个数相同<br>如果奇数， slow 即后半部分链表会比 newHead 即前半部分链表多一个，所以往后移动一位 slow = slow.next</p><p>然后同时遍历两个链表看看是否相同即可，不同直接返回，说明不是回文链表</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list. </span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123; </span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val) </span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next) </span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> q, newHead; <span class="comment">// 记录翻转后的前半段链表</span></span><br><span class="line">    <span class="keyword">let</span> slow = head, fast = head; <span class="comment">// 快慢指针对原链表进行遍历</span></span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span>) &#123;</span><br><span class="line">        q = slow; <span class="comment">// 准备开始下一次翻转，先记录准备要翻转的结点</span></span><br><span class="line">        slow = slow.<span class="property">next</span>; <span class="comment">// 往后指</span></span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        q.<span class="property">next</span> = newHead; <span class="comment">// 要翻转的新结点记录过来</span></span><br><span class="line">        newHead = q; <span class="comment">// 赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果上个循环 fast.next.next 还在链表内，说明是奇数</span></span><br><span class="line">    <span class="comment">// 奇数的话，前半部分 比 后半部分少一个，所以后半部分的 slow 指针要先往后指一位，才能开始下面的遍历</span></span><br><span class="line">    <span class="keyword">if</span>(fast) slow = slow.<span class="property">next</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(slow &amp;&amp; newHead) &#123;</span><br><span class="line">        <span class="comment">// 不同直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(slow.<span class="property">val</span> !== newHead.<span class="property">val</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        newHead = newHead.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历字符串解决：O(n)+O(n)</span></span><br><span class="line"><span class="comment">// 遍历记录链表中所有结点值，记录成一个字符串即可，然后通过字符串翻转后是否等于原字符串即可</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="keyword">function</span>(<span class="params">head</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span>(head) &#123; </span><br><span class="line">        s += head.<span class="property">val</span>; </span><br><span class="line">        head = head.<span class="property">next</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) === s) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></h3><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p><p>示例：输入：<code>root = [4, 2,7, 1,3,6,9]</code>，输出：<code>[4, 7,2, 9,6,3,1]</code><br>           输入：<code>root = [2, 1,3]</code> ,                  输出：<code>[2, 3,1]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 使用递归版本的前序遍历</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">// 终止条件</span></span><br><span class="line">    <span class="comment">// 交换左右节点</span></span><br><span class="line">    <span class="keyword">const</span> rightNode = root.<span class="property">right</span>; <span class="comment">//先保留当前节点的右子树。</span></span><br><span class="line">    root.<span class="property">right</span> = <span class="title function_">invertTree</span>(root.<span class="property">left</span>);</span><br><span class="line">    root.<span class="property">left</span> = <span class="title function_">invertTree</span>(rightNode);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用层序遍历</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">//先定义节点交换函数</span></span><br><span class="line">    <span class="keyword">const</span> invertNode = <span class="keyword">function</span>(<span class="params">root, left, right</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = left;</span><br><span class="line">        left = right;</span><br><span class="line">        right = temp;</span><br><span class="line">        root.<span class="property">left</span> = left;</span><br><span class="line">        root.<span class="property">right</span> = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> queue = [];</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> length = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="comment">//节点处理逻辑</span></span><br><span class="line">            <span class="title function_">invertNode</span>(node, node.<span class="property">left</span>, node.<span class="property">right</span>);</span><br><span class="line">            node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></h3><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p><p>示例：输入：<code>nums = [3,2,3]</code>，               输出：<code>3</code><br>           输入：<code>nums = [2,2,1,1,1,2,2]</code>,    输出：<code>2</code></p><p><strong>进阶：</strong>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p><p><strong>代码实现思路</strong>：摩尔投票法：O(n)+O(1)</p><blockquote><p>维护一个候选众数 candidate 和它出现的次教 count，初始时 candidate 可以为任意值，count 为 0；</p><p>遍历数组 nums 中的所有元素，对于每个元素x，在判断 x之前，如果 count 的值为 0，先将 x 的值赋予<br>candidate，随后判断x：<br>    i. 如果x与 candidate 相等，那么计数器 count 的值增加 1；<br>    ii. 如果x与 candidate 不等，那么计数器 count 的值减少 1，当减少为 0 时，将下一个数赋予 candidate；</p><p>在遍历完成后，candidate 即为整个数组的众数；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 摩尔投票法</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> majority = nums[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(count === <span class="number">0</span>) majority = nums[i]</span><br><span class="line">    <span class="keyword">if</span>(nums[i] === majority) count++</span><br><span class="line">    <span class="keyword">else</span> count--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> majority</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用哈希Map：O(n)+O(n)  用哈希表存储数组元素和对应的个数，如果数字出现的个数大于n/2则返回这个数</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> hashMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        hashMap.<span class="title function_">set</span>(i, (hashMap.<span class="title function_">get</span>(i) || <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(hashMap.<span class="title function_">get</span>(i) &gt; nums.<span class="property">length</span>/<span class="number">2</span>) <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序数组：O(nlogn)+O(logn) 如果有一个数宇出现的频率大于 n/2，则在数组 nums.length/2的位置就是这个数</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">return</span> nums[<span class="title class_">Math</span>.<span class="title function_">floor</span>(nums.<span class="property">length</span>/<span class="number">2</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p>示例：输入：<code>head = [3,2,0,-4], pos = 1</code>，      输出：<code>true</code><br>           输入：<code>head = [1,2], pos = 0</code>,                输出：<code>false</code></p><p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p><p><strong>代码实现思路</strong>：</p><blockquote><p>双指针<br>使用两个不同速度的快、慢指针遍历链表，慢指针每次移动一步，快指针每次移动两步，如果链表中存在环，最终快慢指针会指向同一个节点，遍历结束，返回true；如链表中没有环，最终快指针会先到达链尾，此时，返回false。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> slow = head, fast = head</span><br><span class="line">  <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span>)&#123;</span><br><span class="line">    slow = slow.<span class="property">next</span></span><br><span class="line">    fast = fast.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    <span class="keyword">if</span>(slow === fast) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></h3><p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>示例：输入：<code>nums = [2,2,1]</code>，           输出：<code>1</code><br>           输入：<code>nums = [4,1,2,1,2]</code>,       输出：<code>4</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>异或运算的特点是：相同的数异或结果为0，而任意数与0异或结果为其本身。</p><p>当对整个数组进行异或操作时，成对的数字会相互抵消，最终只剩下那个只出现一次的数字。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 异或运算：相同的数异或结果为0，任何数与0异或结果为其本身</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        result ^= n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461. 汉明距离"></a><a href="https://leetcode.cn/problems/hamming-distance/">461. 汉明距离</a></h3><p>两个整数之间的 <a href="https://baike.baidu.com/item/汉明距离">汉明距离</a> 指的是这两个数字对应二进制位不同的位置的数目。给你两个整数 <code>x</code> 和 <code>y</code>，计算并返回它们之间的汉明距离。</p><p>示例：输入：<code>x = 1, y = 4</code>，       输出：<code>2</code>          <code>001   100</code><br>           输入：<code>x = 3, y = 1</code>,          输出：<code>1</code>           <code>011    001</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>异或运算的特点是：如果两个对应位相同，结果为0；如果不同，结果为1。</p><p>因此，将 <code>x</code> 和 <code>y</code> 进行异或运算（^），<code>xor</code> 的每一位为1的地方恰好是 <code>x</code> 和 <code>y</code> 在该位上不同的地方。循环<code>xor</code> 不为0的情况，使用位与运算符（&amp;）检查 <code>xor</code> 的最低位是否为1。如果是，则汉明距离加1。并将 <code>xor</code> 右移一位，准备检查下一个二进制位。返回最终的汉明距离。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hammingDistance = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> xor = x ^ y;  <span class="comment">// 计算 x 和 y 的异或值 </span></span><br><span class="line">  <span class="keyword">let</span> distance = <span class="number">0</span>;  <span class="comment">// 统计异或结果中 1 的数量  </span></span><br><span class="line">  <span class="keyword">while</span> (xor &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">    distance += xor &amp; <span class="number">1</span>;  <span class="comment">// 检查最低位是否为 1  </span></span><br><span class="line">    xor &gt;&gt;= <span class="number">1</span>;            <span class="comment">// 右移一位  </span></span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> distance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hammingDistance</span>(<span class="params">x, y</span>) &#123;  </span><br><span class="line">  <span class="keyword">let</span> distance = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">while</span> (x &gt; <span class="number">0</span> || y &gt; <span class="number">0</span>) &#123;  <span class="comment">// 逐位比较，直到两个数都为0  </span></span><br><span class="line">     <span class="comment">// 比较最低位的二进制位  </span></span><br><span class="line">     <span class="keyword">const</span> bitX = x &amp; <span class="number">1</span>; <span class="comment">// 取出 x 的最低位  </span></span><br><span class="line">     <span class="keyword">const</span> bitY = y &amp; <span class="number">1</span>; <span class="comment">// 取出 y 的最低位  </span></span><br><span class="line">        </span><br><span class="line">     <span class="comment">// 如果二者不同，汉明距离加一  </span></span><br><span class="line">     <span class="keyword">if</span> (bitX !== bitY) distance++;  </span><br><span class="line">        </span><br><span class="line">     <span class="comment">// 右移一位，继续比较下一个二进制位  </span></span><br><span class="line">     x &gt;&gt;= <span class="number">1</span>;  </span><br><span class="line">     y &gt;&gt;= <span class="number">1</span>;  </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> distance;  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a><a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/">448. 找到所有数组中消失的数字</a></h3><p>给你一个含 <code>n</code> 个整数的数组 <code>nums</code> ，其中 <code>nums[i]</code> 在区间 <code>[1, n]</code> 内。请你找出所有在 <code>[1, n]</code> 范围内但没有出现在 <code>nums</code> 中的数字，并以数组的形式返回结果。</p><p>示例：输入：<code>nums = [4,3,2,7,8,2,3,1]</code>，       输出：<code>[5,6]</code><br>           输入：<code>nums = [1,1]</code>,                               输出：<code>[2]</code></p><p><strong>进阶：</strong>在不使用额外空间且时间复杂度为 <code>O(n)</code> 的情况下解决这个问题。可以假定返回的数组不算在额外空间内。</p><p><strong>代码实现思路</strong>：</p><p>利用数组本身来标记出现的数字。具体思路是将每个数字放到它应该在的位置上（即 <code>nums[i]</code> 应该放在 <code>nums[nums[i] - 1]</code> 的位置）。这样可以通过遍历数组来找出缺失的数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希表法：1. 将数组中的数据放入map中</span></span><br><span class="line"><span class="comment">//          2. 遍历[1...n]，在map中没有对应值的，即为缺失的元素</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hashMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  nums.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    hashMap.<span class="title function_">set</span>(item, <span class="literal">true</span>) <span class="comment">//将每个数字作为键存入 hashMap，值设为 true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!hashMap.<span class="title function_">get</span>(i)) res.<span class="title function_">push</span>(i) <span class="comment">//数字不存在于 hashMap，就将其添加到结果数组 res 中。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：原地修改数组</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;  </span><br><span class="line">  <span class="keyword">let</span> n = nums.<span class="property">length</span>, res = []</span><br><span class="line">  <span class="comment">// 原地修改，将每个数字放到它应该在的位置上  </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  </span><br><span class="line">    <span class="keyword">while</span> (nums[i] !== nums[nums[i] - <span class="number">1</span>]) &#123;  </span><br><span class="line">        <span class="comment">// 交换 nums[i] 和 nums[nums[i] - 1]  </span></span><br><span class="line">        <span class="keyword">let</span> temp = nums[i];  </span><br><span class="line">        nums[i] = nums[temp - <span class="number">1</span>];  </span><br><span class="line">        nums[temp - <span class="number">1</span>] = temp;  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">// 找出缺失的数字  </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (nums[i] !== i + <span class="number">1</span>) res.<span class="title function_">push</span>(i + <span class="number">1</span>) </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> res;  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h3 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338. 比特位计数"></a><a href="https://leetcode.cn/problems/counting-bits/">338. 比特位计数</a></h3><p>给你一个整数 <code>n</code> ，对于 <code>0 &lt;= i &lt;= n</code> 中的每个 <code>i</code> ，计算其二进制表示中 <strong><code>1</code> 的个数</strong> ，返回一个长度为 <code>n + 1</code> 的数组 <code>ans</code> 作为答案。</p><p>示例：输入：<code>n = 2</code>，       输出：<code>[0,1,1]             000   001   010</code><br>           输入：<code>n = 5</code>,          输出：<code>[0,1,1,2,1,2]    000   001   010   011   100   101</code></p><p><strong>进阶：</strong>在线性时间复杂度 <code>O(n)</code> 内用一趟扫描解决此问题，且不使用任何内置函数解决此问题</p><p><strong>代码实现思路</strong>：</p><blockquote><p>二进制，一个数的二倍只是左移一位，<code>1</code>的数量不变<br>一个奇数的<code>n</code>二进制中包含的<code>1</code>的数量，就比<code>n-1</code>多一个，　<br>一个偶数<code>n</code>二进制中包含的<code>1</code>的数量，和<code>n / 2</code>一样多．</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countBits = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ans = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>)  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>) ans[i] = ans[i-<span class="number">1</span>] + <span class="number">1</span> <span class="comment">//奇数</span></span><br><span class="line">    <span class="keyword">else</span> ans[i] = ans[i/<span class="number">2</span>] <span class="comment">//偶数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans <span class="comment">// n=5：0 1 1 2 1 2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h3><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p>示例：输入：<code>prices = [7,1,5,3,6,4]</code>，     输出：<code>5</code><br>           输入：<code>prices = [7,6,4,3,1]</code>,           输出：<code>0</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>遍历<code>prices</code>数组，如果当前价格小于 <code>minPrice</code>，则更新 <code>minPrice</code>；如果当前价格大于 <code>minPrice</code>，则计算当前的利润，并与 <code>maxProfit</code> 进行比较，更新 <code>maxProfit</code>；遍历完成后返回 <code>maxProfit</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span>(<span class="params">prices</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> maxProfit = <span class="number">0</span>, minPrice = <span class="title class_">Infinity</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(minPrice &gt; prices[i]) minPrice = prices[i] <span class="comment">// 更新最小价格  </span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>((prices[i] - minPrice) &gt; maxProfit) &#123;</span><br><span class="line">        maxProfit = prices[i] - minPrice  <span class="comment">// 更新最大利润  </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxProfit</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。<br><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p>示例：输入：<code>nums = [0,1,0,3,12]</code>，     输出：<code>[1,3,12,0,0]</code><br>           输入：<code>nums = [0]</code>,                       输出：<code>[0]</code></p><p><strong>进阶：</strong>你能尽量减少完成的操作次数吗？</p><p><strong>代码实现思路</strong>：双指针法</p><blockquote><ol><li><code>slow</code> 指针用于跟踪下一个非零元素放置的位置。</li><li><code>fast</code> 指针遍历数组。当 <code>fast</code> 指向非零元素时，将其移动到 <code>slow</code> 指针所指的位置，并将 <code>slow</code> 往后移动一位。（如果指向 0， 快指针继续移动， <strong>慢指针此刻指到的位置就是0的位置</strong>）</li><li>在遍历结束后，通过数组原生的 <strong>fill</strong> 方法， 填充0， 从慢指针指向的位置 到最后一位</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> slow = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> fast = <span class="number">0</span>; fast &lt; nums.<span class="property">length</span>; fast++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[fast] !== <span class="number">0</span>)&#123;</span><br><span class="line">      nums[slow] = nums[fast]</span><br><span class="line">      slow++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nums.<span class="title function_">fill</span>(<span class="number">0</span>, slow)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543. 二叉树的直径"></a><a href="https://leetcode.cn/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></h3><p>给你一棵二叉树的根节点，返回该树的 <strong>直径</strong> 。<br>二叉树的 <strong>直径</strong> 是指树中任意两个节点之间最长路径的 <strong>长度</strong> 。这条路径可能经过也可能不经过根节点 <code>root</code> 。<br>两节点之间路径的 <strong>长度</strong> 由它们之间边数表示。</p><p>示例：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408070933587.jpg" alt="photo"> </p><p>​       输入：<code>root = [1, 2,3, 4,5]</code>，     输出：<code>3</code><br>​           输入：<code>root = [1,2]</code>,                      输出：<code>1</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>首先，定义一个变量<code>diameter</code>来保存最大直径的长度，初始值为0。然后，定义一个递归函数<code>height</code>来进行遍历二叉树。</p><p>在<code>height</code>函数中，首先判断当前节点是否为空，若为空，则返回0。然后分别递归调用<code>height</code>函数来计算左右子树的直径长度，并将其分别保存在变量<code>leftHeight</code>和<code>rightHeight</code>中。</p><p>接下来，将当前节点的直径长度与全局变量<code>diameter</code>进行比较，更新最大直径的长度。最后，返回左右子树中较大的直径长度加<code>1</code>作为当前节点的直径长度。</p><p>在主函数中，调用<code>height</code>函数来计算二叉树的直径长度，并返回<code>diameter</code>作为最终结果。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> diameterOfBinaryTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> diameter = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> height = <span class="keyword">function</span>(<span class="params">node</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> leftHeight = <span class="title function_">height</span>(node.<span class="property">left</span>) <span class="comment">// 递归左子树高度</span></span><br><span class="line">    <span class="keyword">let</span> rightHeight = <span class="title function_">height</span>(node.<span class="property">right</span>) <span class="comment">// 递归右子树高度</span></span><br><span class="line">    diameter = <span class="title class_">Math</span>.<span class="title function_">max</span>(diameter, leftHeight+rightHeight) <span class="comment">//左子树深度(节点个数) + 右子树深度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span> <span class="comment">// 左右子树深度的最大值 + 1，便是以根节点为数的最大深度</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">height</span>(root)</span><br><span class="line">  <span class="keyword">return</span> diameter</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h3><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>示例：输入：<code>l1 = [1,2,4], l2 = [1,3,4]</code>，     输出：<code>[1,1,2,3,4,4]</code><br>           输入：<code>l1 = [], l2 = [0]</code>,                        输出：<code>[0]</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>创建一个虚拟头节点 <code>prehead</code>，其值为 <code>-1</code>。变量 <code>prev</code> 指向当前合并链表的末尾（初始时是虚拟头节点）。进入 <code>while</code> 循环，只要两个链表都不为 <code>null</code>，就继续合并。</p><p>判断 <code>l1</code> 的当前节点值是否小于等于 <code>l2</code> 的当前节点值。如果是，则将 <code>l1</code> 的当前节点连接到合并链表的末尾。移动 <code>l1</code> 到下一个节点；<br>如果 <code>l1</code> 的值大于 <code>l2</code> 的值，则将 <code>l2</code> 的当前节点连接到合并链表的末尾，并移动 <code>l2</code> 到下一个节点。</p><p>将 <code>prev</code> 移动到当前合并链表的末尾，即刚连接的节点。循环结束。</p><p>因为合并的结果只会有一个链表未被完全合并。直接将 <code>prev.next</code> 指向那个未合并的链表，这样所有节点都会被合并。最后，返回 <code>prehead.next</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 递归：O(n+m) + O(n+m)</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">list1, list2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(l1 === <span class="literal">null</span>) <span class="keyword">return</span> l2</span><br><span class="line">  <span class="keyword">if</span>(l2 === <span class="literal">null</span>) <span class="keyword">return</span> l1</span><br><span class="line">  <span class="keyword">if</span>(l1.<span class="property">val</span> &gt; l2.<span class="property">val</span>)&#123;</span><br><span class="line">    l2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1, l2.<span class="property">next</span>)</span><br><span class="line">    <span class="keyword">return</span> l2</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    l1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(l1.<span class="property">next</span>, l2)</span><br><span class="line">    <span class="keyword">return</span> l1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代：O(n+m)+ O(1)</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">l1, l2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prehead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>) <span class="comment">// 创建虚拟头节点</span></span><br><span class="line">    <span class="keyword">let</span> prev = prehead;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.<span class="property">val</span> &lt;= l2.<span class="property">val</span>) &#123;</span><br><span class="line">            prev.<span class="property">next</span> = l1;</span><br><span class="line">            l1 = l1.<span class="property">next</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.<span class="property">next</span> = l2;</span><br><span class="line">            l2 = l2.<span class="property">next</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        prev = prev.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 124   134    当比较到4、4后，其中一个链表的val为空，无法比较</span></span><br><span class="line">    <span class="comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，直接将链表末尾指向未合并完的链表</span></span><br><span class="line">    prev.<span class="property">next</span> = l1 === <span class="literal">null</span> ? l2 : l1;</span><br><span class="line">    <span class="keyword">return</span> prehead.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p>示例：输入：<code>s = &quot;()&quot;</code>，          输出：<code>true</code><br>           输入：<code>s = &quot;()[]&#123;&#125;&quot;</code>,      输出：<code>true</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>遍历字符串，遇到左括号（(、[ 或 {）, 就将对应的右括号（)、] 或 }）压入栈中；</p><p>遇到右括号，检查是否与栈顶元素匹配。如果不匹配或栈为空，则返回 false。</p><p>遍历结束后，检查栈是否为空。若为空，则表示所有的括号都匹配，返回 true；否则返回 false。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = s[i];</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        stack.<span class="title function_">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">        stack.<span class="title function_">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">        stack.<span class="title function_">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (c !== stack.<span class="title function_">pop</span>()) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化版本</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [], </span><br><span class="line">        map = &#123;</span><br><span class="line">            <span class="string">&quot;(&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#123;&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[&quot;</span>:<span class="string">&quot;]&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> x <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x <span class="keyword">in</span> map) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(x);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(map[stack.<span class="title function_">pop</span>()] !== x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617. 合并二叉树</a></h3><p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。返回合并后的二叉树。</p><p><strong>注意:</strong> 合并过程必须从两个树的根节点开始。</p><p>示例：输入：<code>Tree1 [1, 3,2, 5,null,null,null]，Tree2 [2, 1,3, null,4,null,7]</code><br>           合并后的树：<code>[3, 4,5, 5,4,null,7]</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>如果 <code>root1</code> 为 <code>null</code> 而 <code>root2</code> 不为 <code>null</code>，则返回 <code>root2</code>，表示以 <code>root2</code> 为根的子树合并到空树上，结果就是 <code>root2</code>；如果 <code>root2</code> 为 <code>null</code> 而 <code>root1</code> 不为 <code>null</code>，或者 <code>root1</code> 和 <code>root2</code> 都为 <code>null</code>，则返回 <code>root1</code>，表示结果是以 <code>root1</code> 为根的子树。</p><p>当两个节点 <code>root1</code> 和 <code>root2</code> 都存在，将 <code>root2</code> 的值加到 <code>root1</code> 上。递归合并左右子树并将结果赋值给 <code>root1</code> 的左右子树。</p><p>最后返回合并后的 <code>root1</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTrees = <span class="keyword">function</span> (<span class="params">root1, root2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!root1 &amp;&amp; root2) <span class="keyword">return</span> root2</span><br><span class="line">  <span class="keyword">if</span>((!root2 &amp;&amp; root1) || (!root1 &amp;&amp; !root2)) <span class="keyword">return</span> root1;</span><br><span class="line">  root1.<span class="property">val</span> += root2.<span class="property">val</span>;</span><br><span class="line">  root1.<span class="property">left</span> = <span class="title function_">mergeTrees</span>(root1.<span class="property">left</span>, root2.<span class="property">left</span>);</span><br><span class="line">  root1.<span class="property">right</span> = <span class="title function_">mergeTrees</span>(root1.<span class="property">right</span>, root2.<span class="property">right</span>);</span><br><span class="line">  <span class="keyword">return</span> root1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法：</span></span><br><span class="line"><span class="keyword">var</span> mergeTrees = <span class="keyword">function</span>(<span class="params">root1, root2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root1 === <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">    <span class="keyword">if</span> (root2 === <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> queue = [];</span><br><span class="line">    queue.<span class="title function_">push</span>(root1);</span><br><span class="line">    queue.<span class="title function_">push</span>(root2);</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node1 = queue.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">let</span> node2 = queue.<span class="title function_">shift</span>();;</span><br><span class="line">        node1.<span class="property">val</span> += node2.<span class="property">val</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">left</span> !== <span class="literal">null</span> &amp;&amp; node2.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node1.<span class="property">left</span>);</span><br><span class="line">            queue.<span class="title function_">push</span>(node2.<span class="property">left</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">right</span> !== <span class="literal">null</span> &amp;&amp; node2.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node1.<span class="property">right</span>);</span><br><span class="line">            queue.<span class="title function_">push</span>(node2.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node2.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            node1.<span class="property">left</span> = node2.<span class="property">left</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node1.<span class="property">right</span> === <span class="literal">null</span> &amp;&amp; node2.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            node1.<span class="property">right</span> = node2.<span class="property">right</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h3><p>给定一个二叉树 <code>root</code> ，返回其最大深度。二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p><p>示例：输入：<code>root = [3, 9,20, null,null,15,7]</code>，       输出：<code>3</code><br>           输入：<code>root = [1, null,2]</code>,                                  输出：<code>2</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>定义递归函数 <code>getdepth</code>用于计算从当前节点 <code>node</code> 开始的最大深度。首先判断当前节点是否为空，如果为空，则返回深度 <code>0</code>。否则，递归计算左子树和右子树的深度。</p><p>当前节点的深度等于左右子树深度的最大值加 <code>1</code>（包含根节点），返回最大深度。</p><p>最后返回 <code>getdepth</code>函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">var</span> maxdepth = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 确定递归函数的参数和返回值</span></span><br><span class="line">    <span class="keyword">const</span> getdepth = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">//2. 确定终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//3. 确定单层逻辑</span></span><br><span class="line">        <span class="keyword">let</span> leftdepth = <span class="title function_">getdepth</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">let</span> rightdepth = <span class="title function_">getdepth</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">let</span> depth = <span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">max</span>(leftdepth, rightdepth);</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getdepth</span>(root);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>, queue = [root];</span><br><span class="line">  <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> max</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">    max++;</span><br><span class="line">    <span class="keyword">let</span> length = queue.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">      node.<span class="property">left</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">      node.<span class="property">right</span> &amp;&amp; queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></h3><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p>示例：输入：<code>root = [1,  2,2,  3,4,4,3]</code>，               输出：<code>true</code><br>           输入：<code>root = [1,  2,2,  null,3,null,3]</code>,       输出：<code>false</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>定义递归函数<code>compareNode</code>用于比较二叉树的两个子树（<code>left</code>和<code>right</code>）是否对称。</p><p>首先，检查两个节点是否都是<code>null</code>：</p><ul><li>如果一个是 <code>null</code> 另一个不是，则返回 <code>false</code>（不对称）。</li><li>如果两个都是 <code>null</code>，则返回 <code>true</code>（对称）。</li></ul><p>然后，检查两个节点的值（<code>left.val</code>和<code>right.val</code>）是否相等，不相等则返回 <code>false</code></p><p>递归比较两个节点的外侧（<code>left.left</code>和<code>right.right</code>）以及内侧（<code>left.right</code>和<code>right.left</code>）：</p><ul><li><code>outSide</code> 存储外侧的比较结果。</li><li><code>inSide</code> 存储内侧的比较结果。</li></ul><p>返回 <code>outSide</code> 和 <code>inSide</code> 的逻辑与（<code>&amp;&amp;</code>），只有在两侧都对称的情况下才返回 <code>true</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 确定递归的参数 root.left root.right和返回值true false </span></span><br><span class="line">    <span class="keyword">const</span> compareNode = <span class="keyword">function</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定终止条件 空的情况</span></span><br><span class="line">        <span class="keyword">if</span>(left === <span class="literal">null</span> &amp;&amp; right !== <span class="literal">null</span> || left !== <span class="literal">null</span> &amp;&amp; right === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(left === <span class="literal">null</span> &amp;&amp; right === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(left.<span class="property">val</span> !== right.<span class="property">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 确定单层递归逻辑</span></span><br><span class="line">        <span class="keyword">let</span> outSide = <span class="title function_">compareNode</span>(left.<span class="property">left</span>, right.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">let</span> inSide = <span class="title function_">compareNode</span>(left.<span class="property">right</span>, right.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">return</span> outSide &amp;&amp; inSide;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compareNode</span>(root.<span class="property">left</span>, root.<span class="property">right</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h3><p>给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的 <strong>中序</strong> 遍历</em> 。</p><p>示例：输入：<code>root = [1,null,2,3]</code>，     输出：<code>[1,3,2]</code><br>           输入：<code>root = []</code>,                         输出：<code>[]</code></p><p><strong>代码实现思路</strong>：左中右</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=[];</span><br><span class="line">    <span class="keyword">const</span> dfs=<span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root===<span class="literal">null</span>)  <span class="keyword">return</span></span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">left</span>); <span class="comment">// 递归左子树</span></span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>); <span class="comment">// 父节点</span></span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">right</span>); <span class="comment">// 递归右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dfs</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代：</span></span><br><span class="line"><span class="comment">// 入栈 左 -&gt; 右</span></span><br><span class="line"><span class="comment">// 出栈 左 -&gt; 中 -&gt; 右</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root, res = []</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> cur = root;</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span> || cur) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(cur);  </span><br><span class="line">            cur = cur.<span class="property">left</span>; <span class="comment">// 左</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = stack.<span class="title function_">pop</span>(); <span class="comment">// 弹出</span></span><br><span class="line">            res.<span class="title function_">push</span>(cur.<span class="property">val</span>); <span class="comment">// 中</span></span><br><span class="line">            cur = cur.<span class="property">right</span>; <span class="comment">// 右</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h3><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p><p>示例：输入：<code>nums = [2,7,11,15],  target = 9</code>，     输出：<code>[0，1]</code><br>           输入：<code>nums = [3,2,4],      target = 6</code>,        输出：<code>[1，2]</code></p><p><strong>代码实现思路</strong>：</p><blockquote><p>暴力解法：两层 for 循环（<code>i=0 j=i+1 nums[i] + nums[j] === target</code>），不推荐</p><p>遍历当前数组元素，若<code>hash</code>表内匹配到了<code>target-nums [i]</code>，则返回<code>[i, hash[target - nums[i]]]</code>；反之，就把当前访问的元素和下标 加入到<code>map</code>中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123; <span class="comment">// 遍历数组，并在map中寻找匹配的key</span></span><br><span class="line">    <span class="keyword">if</span> (hash[target - nums[i]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [i, hash[target - nums[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    hash[nums[i]] = i; <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h3><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。<br>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>代码实现思路</strong>：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408091016149.jpg" style="width:480px; height:240px" /> </p><blockquote><p>本问题其实常规解法可以分成多个子问题，爬第<code>n</code>阶楼梯的方法数量，等于<code>2</code>部分之和</p><pre><code>1. 爬上`n−1`阶楼梯的方法数量。因为再爬`1`阶就能到第`n`阶1. 爬上`n−2`阶楼梯的方法数量，因为再爬`2`阶就能到第`n`阶</code></pre><p>可得到公式 <code>dp[n] = dp[n−1] + dp[n−2]</code>，而<code>dp[i]</code>意义是达到<code>i</code>阶有<code>dp[i]</code>种方法，所以需要初始化 <code>dp[1] = 1 和 dp[2] = 2</code>。</p></blockquote><ol><li>观察数学规律，使用斐波那契数列<code>[1、1、2、3、5、8、13、....]</code>的公式即可解决问题，公式如下：</li></ol><script type="math/tex; mode=display">F_n = 1/\sqrt{5}[(\frac{1+\sqrt{5}}{2})^n - (\frac{1-\sqrt{5}}{2})^n]</script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划：O(n)  dp[i] 为第 i 阶楼梯有多少种方法爬到楼顶</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span>(<span class="params">n</span>) &#123; </span><br><span class="line">  <span class="comment">// dp[i] = dp[i - 1] + dp[i - 2]</span></span><br><span class="line">  <span class="keyword">let</span> dp = [<span class="number">1</span> , <span class="number">2</span>]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">    dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[n - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列：O(logn)</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sqrt_5 = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">const</span> fib_n = <span class="title class_">Math</span>.<span class="title function_">pow</span>((<span class="number">1</span> + sqrt_5) / <span class="number">2</span>, n + <span class="number">1</span>) - <span class="title class_">Math</span>.<span class="title function_">pow</span>((<span class="number">1</span> - sqrt_5) / <span class="number">2</span>,n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(fib_n / sqrt_5);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="中等题"><a href="#中等题" class="headerlink" title="中等题"></a>中等题</h2><h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h3><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。<a href="https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p>示例：输入：<code>root = [3,  5,1,  6,2,0,8,  null,null,7,4], p = 5, q = 1</code>，     输出：<code>3</code><br>           输入：<code>root = [3,  5,1,  6,2,0,8,  null,null,7,4], p = 5, q = 4</code>,        输出：<code>5</code></p><p> <strong>代码实现思路</strong>：</p><blockquote><p>如果当前节点为空（表示到达了叶子节点的子节点）或者当前节点是 p 或 q 之一，则直接返回当前节点。<br>递归调用 travelTree 遍历左子树和右子树。<br>如果左子树和右子树都找到节点，则说明当前节点 root 是最近公共祖先。<br>如果左子树没有找到节点，则返回右子树的结果。<br>如果右子树没有找到节点，则返回左子树的结果。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归:需要从下到上，所以使用后序遍历</span></span><br><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="keyword">function</span>(<span class="params">root, p, q</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 确定递归的函数</span></span><br><span class="line">    <span class="keyword">const</span> travelTree = <span class="keyword">function</span>(<span class="params">root,p,q</span>) &#123;</span><br><span class="line">        <span class="comment">// 2. 确定递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root === <span class="literal">null</span> || root === p || root === q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 3. 确定递归单层逻辑</span></span><br><span class="line">        <span class="keyword">let</span> left = <span class="title function_">travelTree</span>(root.<span class="property">left</span>, p, q);</span><br><span class="line">        <span class="keyword">let</span> right = <span class="title function_">travelTree</span>(root.<span class="property">right</span>, p, q);</span><br><span class="line">        <span class="keyword">if</span>(left !== <span class="literal">null</span> &amp;&amp; right !== <span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(left === <span class="literal">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">travelTree</span>(root, p, q);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a><a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a></h3><p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，<em>下一个更高温度出现在几天后</em>。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><p>示例：输入：<code>temperatures = [73,74,75,71,69,72,76,73]</code>， 输出：<code>[1,1,4,2,1,1,0,0]</code><br>           输入：<code>temperatures = [30,40,50,60]</code>,                        输出：<code>[1,1,1,0]</code></p><p> <strong>代码实现思路</strong>：</p><p><strong>单调栈（Monotone Stack）</strong>：一种特殊的栈。在栈的「先进后出」规则基础上，要求「从 <strong>栈顶</strong> 到 <strong>栈底</strong> 的元素是单调递增（或者单调递减）」。其中满足从栈顶到栈底的元素是单调递增的栈，叫做「单调递增栈」。满足从栈顶到栈底的元素是单调递减的栈，叫做「单调递减栈」。</p><blockquote><p>从后向前遍历温度数组，用栈来存储还没有找到下一个更高温度的天数索引。当遍历到某一天时，检查栈顶的元素（即未来几天的温度），如果栈顶的温度比当前温度高，那么栈顶的索引就是我们想要的结果。否则，继续弹出栈顶，直到找到一个更高温度或者栈为空。最终将结果记录在 <code>answer</code> 数组中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从右向左遍历</span></span><br><span class="line"><span class="keyword">var</span> dailyTemperatures = <span class="keyword">function</span>(<span class="params">temperatures</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = temperatures.<span class="property">length</span></span><br><span class="line"><span class="keyword">let</span> answer = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> stack = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span> &amp;&amp; temperatures[i] &gt;= temperatures[stack[stack.<span class="property">length</span>-<span class="number">1</span>]])&#123;</span><br><span class="line">      stack.<span class="title function_">pop</span>() <span class="comment">// 弹出栈顶小于等于当前温度的索引</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stack.<span class="property">length</span>)&#123;<span class="comment">// 如果栈不为空，说明找到了下一个更高的温度</span></span><br><span class="line">      answer[i] = stack[stack.<span class="property">length</span>-<span class="number">1</span>] - i</span><br><span class="line">    &#125;</span><br><span class="line">    stack.<span class="title function_">push</span>(i)<span class="comment">// 将当前温度的索引入栈</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从左向右遍历：栈中记录还没算出「下一个更大元素」的那些数（的下标）。</span></span><br><span class="line"><span class="keyword">var</span> dailyTemperatures = <span class="keyword">function</span> (<span class="params">temperatures</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = temperatures.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> ans = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = temperatures[i];</span><br><span class="line">    <span class="keyword">while</span> (stack.<span class="property">length</span> &amp;&amp; t &gt; temperatures[stack[stack.<span class="property">length</span> - <span class="number">1</span>]]) &#123;</span><br><span class="line">      <span class="keyword">const</span> j = stack.<span class="title function_">pop</span>();</span><br><span class="line">      ans[j] = i - j;</span><br><span class="line">    &#125;</span><br><span class="line">      stack.<span class="title function_">push</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a><a href="https://leetcode.cn/problems/maximal-square/">221. 最大正方形</a></h3><p>在一个由 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 组成的二维矩阵内，找到只包含 <code>&#39;1&#39;</code> 的最大正方形，并返回其面积。</p><p>示例：</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408091041782.jpg" style="width:300px; height:240px" /> </p><p>输入：<code>matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]</code>输出：<code>4</code></p><p> <strong>代码实现思路</strong>：动态规划</p><p>定义一个 <code>dp</code> 数组，其中 <code>dp[i][j]</code> 表示以 <code>(i, j)</code> 作为右下角的最大正方形的边长。最终的答案就是 <code>dp</code> 数组中的最大值的平方。</p><blockquote><ol><li><strong>动态规划数组 <code>dp</code></strong>： 使用一个二维数组 <code>dp</code> 保存每个位置能形成的最大正方形的边长。</li><li><strong>遍历矩阵</strong>： 二重循环遍历每个元素，如果 <code>matrix[i][j] === &#39;1&#39;</code>，检查其左边、上边和左上角的三个位置的值，取最小值加一，即为当前位置的最大正方形边长 <code>dp[i][j]</code>。同时更新 <code>maxSide</code>，保持其为当前找到的最大正方形边长。</li><li><strong>返回面积</strong>： 最后，返回 <code>maxSide * maxSide</code> 作为面积。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maximalSquare</span>(<span class="params">matrix</span>) &#123;  </span><br><span class="line">  <span class="keyword">if</span> (!matrix || matrix.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> rows = matrix.<span class="property">length</span> <span class="comment">// 行</span></span><br><span class="line">  <span class="keyword">const</span> cols = matrix[<span class="number">0</span>].<span class="property">length</span> <span class="comment">// 列</span></span><br><span class="line">  <span class="keyword">let</span> maxSide = <span class="number">0</span> <span class="comment">// 记录出现的最大正方形的边长</span></span><br><span class="line">  <span class="comment">// 创建一个二维数组 dp，与原矩阵同样大小  </span></span><br><span class="line">  <span class="keyword">const</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: rows &#125;, <span class="function">() =&gt;</span> <span class="title class_">Array</span>(cols).<span class="title function_">fill</span>(<span class="number">0</span>)) </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历矩阵  </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (matrix[i][j] === <span class="string">&#x27;1&#x27;</span>) &#123;  </span><br><span class="line">        <span class="comment">// 如果在第一行或第一列，最大边长就是1  </span></span><br><span class="line">        <span class="keyword">if</span>(i === <span class="number">0</span> || j === <span class="number">0</span>) dp[i][j] = <span class="number">1</span>  </span><br><span class="line">        <span class="comment">// 设置 dp[i][j] 为其左、上和左上角最小值加一  </span></span><br><span class="line">        <span class="keyword">else</span> dp[i][j] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>  </span><br><span class="line">        maxSide = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxSide, dp[i][j]) <span class="comment">// 更新最大边长  </span></span><br><span class="line">        &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="keyword">return</span> maxSide * maxSide <span class="comment">// 返回最大正方形的面积  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="215. 数组中的第K个最大元素"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></h3><p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>k</code> 个最大的元素。<br>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。<br>你必须设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p>示例：输入： <code>[3,2,1,5,6,4]，k = 2</code>                   输出：<code>5</code><br>           输入：<code>[3,2,3,1,2,4,5,5,6],，k = 4</code>        输出：<code>4</code></p><p> <strong>代码实现思路</strong>：</p><p><strong><em>堆排序</em></strong> 是利用<code>堆</code>这种数据结构的一种排序算法，它是一种选择排序，最坏、最好、平均时间复杂度均为<code>O(nlogn)</code>，它是不稳定排序。</p><p>因为完全二叉树的性质，可以用数组表示对应的树结构，这叫<code>顺序存储</code>：</p><ul><li>第 n 个元素的<strong>左子节点</strong>为<code>2*n+1</code></li><li>第 n 个元素的<strong>右子节点</strong>为<code>2*n+2</code></li><li>第 n 个元素的<strong>父节点</strong>为<code>(n-1)/2</code></li><li>最后一个<strong>非叶子节点</strong>为<code>Math.floor(arr.length/2)-1</code></li></ul><p>堆是具有以下性质的完全二叉树：</p><ul><li>大顶堆：每个非叶子节点的值都<strong>大于或等于</strong>其左右子节点的值</li><li>小顶堆：每个非叶子节点的值都<strong>小于或等于</strong>其左右子节点的值</li></ul><p>注：没有要求左右子节点的值的大小关系</p><blockquote><p><strong>实现思路</strong></p><ul><li>升序：一般采用大顶堆</li><li>降序：一般采用小顶堆</li></ul><ol><li><strong>构建小根堆</strong>：首先，选择前 <code>k</code> 个元素，并构建一个小根堆。堆顶元素是当前堆中的最小值。</li><li><strong>维护堆结构</strong>：对于剩余的元素，逐个与堆顶元素比较。如果当前元素比堆顶元素大，则替换堆顶元素，并重新调整堆，使其依然保持小根堆的性质。</li><li><strong>最终结果</strong>：当所有元素都处理完后，堆顶元素就是第 <code>k</code> 大的元素。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findKthLargest = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!nums.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="comment">// 调堆过程： start：堆的根节点索引；end：堆的最后一个节点索引</span></span><br><span class="line">    <span class="keyword">let</span> heapSort = <span class="keyword">function</span>(<span class="params">arr, start, end</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[start] <span class="comment">//temp 保存堆顶元素的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">2</span>*start+<span class="number">1</span>; j &lt;= end; j = <span class="number">2</span>*j+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; end &amp;&amp; arr[j] &gt; arr[j+<span class="number">1</span>]) j++</span><br><span class="line">            <span class="keyword">if</span>(temp &lt; arr[j]) <span class="keyword">break</span></span><br><span class="line">            arr[start] = arr[j]</span><br><span class="line">            start = j</span><br><span class="line">        &#125;</span><br><span class="line">        arr[start] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取数组前 k 个元素，构建一个长度为 k 的小根堆。</span></span><br><span class="line">    <span class="keyword">let</span> numsArr = nums.<span class="title function_">slice</span>(<span class="number">0</span>, k)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(k/<span class="number">2</span>-<span class="number">1</span>); i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="title function_">heapSort</span>(numsArr, i, k-<span class="number">1</span>) <span class="comment">//从堆的中间位置开始向前调整堆</span></span><br><span class="line">    <span class="comment">// 遍历剩余的元素（k 之后的元素），将其与堆顶元素（即当前最小的元素）比较。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = k; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 若比小根堆根元素大就替换掉根元素，然后调整堆使堆顶元素最小</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; numsArr[<span class="number">0</span>]) &#123;</span><br><span class="line">            numsArr[<span class="number">0</span>] = nums[i]</span><br><span class="line">            <span class="title function_">heapSort</span>(numsArr, <span class="number">0</span>, k-<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numsArr[<span class="number">0</span>] <span class="comment">// 堆顶元素就是第 k 大的元素。</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!nums.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a-b))[nums.<span class="property">length</span>-k]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong>输入：<code>[1,2,3,1]</code>          输出：<code>4</code><br>              解释：偷窃 <code>1</code>号房屋 (金额 = <code>1</code>) ，然后偷窃 <code>3</code>号房屋 (金额 = 3)</p><p><strong>示例 2：</strong>输入：<code>[2,7,9,3,1]</code>       输出：<code>12</code><br>              解释：偷窃<code>1</code>号房屋 (金额 = 2), <code>3</code>号房屋 (金额 = 9)，接着偷窃 <code>5</code>号房屋 (金额 = 1)</p><p><strong>代码实现思路</strong>：动态规划</p><p>动态规划方程：dp[n] = MAX( dp[n-1], dp[n-2] + num )<br>由于不可以在相邻的房屋闯入，所以在当前位置 n 房屋可盗窃的最大值，要么就是 n-1 房屋可盗窃的最大值，要么就是 n-2 房屋可盗窃的最大值加上当前房屋的值，二者之间取最大值<br>举例来说：1 号房间可盗窃最大值为 3 即为 dp[1]=3，2 号房间可盗窃最大值为 4 即为 dp[2]=4，3 号房间自身的值为 2 即为 num=2，那么 dp[3] = MAX( dp[2], dp[1] + num ) = MAX(4, 3+2) = 5，3 号房间可盗窃最大值为 5<br>时间复杂度：O(n)，n 为数组长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(len + <span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= len; i++) &#123;</span><br><span class="line">        dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[len];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a><a href="https://leetcode.cn/problems/product-of-array-except-self/">238. 除自身以外数组的乘积</a></h3><p>给你一个整数数组 <code>nums</code>，返回 数组 <code>answer</code> ，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积 。</p><p>题目数据 <strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内。请 <strong>不要使用除法，</strong>且在 <code>O(n)</code> 时间复杂度内完成此题。</p><p><strong>进阶：</strong>你可以在 <code>O(1)</code> 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 <strong>不被视为</strong> 额外空间。）</p><p><strong>示例 ：</strong>输入：<code>nums = [1,2,3,4]</code>          输出：<code>[24,12,8,6]</code><br>            输入：<code>nums = [-1,1,0,-3,3]</code>   输出：<code>[0,0,9,0,0]</code></p><p><strong>代码实现思路</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h3><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p> 示例：输入：l1 = [2,4,3], l2 = [5,6,4]，                  输出：[7,0,8]<br>            输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9],      输出：[8,9,9,9,0,0,0,1]</p><p><strong>代码实现思路</strong>：</p><blockquote><p>初始化答案为一个「空链表」，每次循环，向该链表末尾添加一个节点（保存一个数位）。</p><p>循环即遍历链表l1和l2 ，每次把两个节点值l1.val, l2.val与进位值 carry 相加，除以 10的余数即为当前节点需要保存的数位，除以 10的商即为新的进位值。</p><p>需要注意的是，在第一次循环时，我们无法往一个空节点的末尾添加节点。这里的技巧是，创建一个哨兵节点（dummy node），当成初始的「空链表」。循环结束后，哨兵节点的下一个节点就是最终要返回的链表头节点。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="keyword">function</span> (<span class="params">l1, l2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(); <span class="comment">// 哨兵节点</span></span><br><span class="line">    <span class="keyword">let</span> cur = dummy;</span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>; <span class="comment">// 进位</span></span><br><span class="line">    <span class="keyword">while</span> (l1 || l2 || carry) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1) carry += l1.<span class="property">val</span>; <span class="comment">// 节点值和进位加在一起</span></span><br><span class="line">        <span class="keyword">if</span> (l2) carry += l2.<span class="property">val</span>; <span class="comment">// 节点值和进位加在一起</span></span><br><span class="line">        cur = cur.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry % <span class="number">10</span>); <span class="comment">// 每个节点保存一个数位</span></span><br><span class="line">        carry = <span class="title class_">Math</span>.<span class="title function_">floor</span>(carry / <span class="number">10</span>); <span class="comment">// 新的进位</span></span><br><span class="line">        <span class="keyword">if</span> (l1) l1 = l1.<span class="property">next</span>; <span class="comment">// 下一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (l2) l2 = l2.<span class="property">next</span>; <span class="comment">// 下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>; <span class="comment">// 哨兵节点的下一个节点就是头节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的最长子串的长度。</p><p>示例：输入：l1 = [2,4,3], l2 = [5,6,4]，                  输出：[7,0,8]<br>            输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9],      输出：[8,9,9,9,0,0,0,1]</p><p><strong>代码实现思路</strong>：滑动窗口</p><blockquote><p>使用 map 来存储当前已经遍历过的字符，key 为字符，value 为下标</p><p>使用 i 来标记无重复子串开始下标，j 为当前遍历字符下标</p><p>遍历字符串，判断当前字符是否已经在 map 中存在，存在则更新无重复子串开始下标 i 为相同字符的下一位置，此时从 i 到 j 为最新的无重复子串，更新 max ，将当前字符与下标放入 map 中。最后返回max </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(), max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; s.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(s[j])) &#123;</span><br><span class="line">            i = <span class="title class_">Math</span>.<span class="title function_">max</span>(map.<span class="title function_">get</span>(s[j]) + <span class="number">1</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, j - i + <span class="number">1</span>)</span><br><span class="line">        map.<span class="title function_">set</span>(s[j], j)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的 回文子串。</p><p>示例：输入：s = “babad”，     输出：”bab”<br>           输入：s = “cbbd”,          输出：”bb”</p><p><strong>代码实现思路</strong>：中心扩散法</p><blockquote><p>回文串一定是对称的，每次选择一个中心，进行中心向两边扩展比较左右字符是否相等<br>中心点的选取有两种<br>    aba，中心点是b<br>    aa，中心点是两个a之间<br>所以共有两种组合可能<br>    left：i，right：i<br>    left：i，right：i+1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (s.<span class="property">length</span>&lt;<span class="number">2</span>) <span class="keyword">return</span> s</span><br><span class="line">  <span class="keyword">let</span> l=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> r=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">helper</span>(i, i)<span class="comment">// 回文子串长度是奇数</span></span><br><span class="line">      <span class="title function_">helper</span>(i, i + <span class="number">1</span>) <span class="comment">// 回文子串长度是偶数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">helper</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (m &gt;= <span class="number">0</span> &amp;&amp; n &lt; s.<span class="property">length</span> &amp;&amp; s[m] == s[n]) &#123;</span><br><span class="line">          m--</span><br><span class="line">          n++</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注意此处m,n的值循环完后  是恰好不满足循环条件的时刻 如果此轮询得到回文串长度大于之前记录， 记录此轮循边界</span></span><br><span class="line">      <span class="keyword">if</span> (n - m - <span class="number">1</span> &gt; r-l-<span class="number">1</span>) &#123;</span><br><span class="line">         r=n</span><br><span class="line">         l=m</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">slice</span>(l+<span class="number">1</span>, r)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h3><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。返回容器可以储存的最大水量。<strong>说明：</strong>不能倾斜容器。</p><p>示例：输入：[1,8,6,2,5,4,8,3,7]，     输出：49<br>           输入：height = [1,1],               输出：1</p><p><strong>代码实现思路</strong>： 双指针法O(n)+O(1）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>, left = <span class="number">0</span>, right = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> area = (right - left) * <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right]);</span><br><span class="line">        ans = <span class="title class_">Math</span>.<span class="title function_">max</span>(ans, area);</span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h3><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p>示例：输入：digits = “23”，     输出：[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]<br>           输入：digits = “2”,          输出：[“a”,”b”,”c”]</p><p><strong>代码实现思路</strong>：回溯算法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letterCombinations = <span class="keyword">function</span>(<span class="params">digits</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> k = digits.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> map = [<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>,<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqrs&quot;</span>,<span class="string">&quot;tuv&quot;</span>,<span class="string">&quot;wxyz&quot;</span>];</span><br><span class="line">  <span class="keyword">if</span>(!k) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">if</span>(k === <span class="number">1</span>) <span class="keyword">return</span> map[digits].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = [], path = [];</span><br><span class="line">  <span class="title function_">backtracking</span>(digits, k, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backtracking</span>(<span class="params">n, k, a</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(path.<span class="property">length</span> === k) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(path.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> map[n[a]]) &#123;</span><br><span class="line">      path.<span class="title function_">push</span>(v);</span><br><span class="line">      <span class="title function_">backtracking</span>(n, k, a + <span class="number">1</span>);</span><br><span class="line">      path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔试</title>
      <link href="/2024/08/01/interview-%E9%9D%A2%E8%AF%95/"/>
      <url>/2024/08/01/interview-%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人力资源项目</title>
      <link href="/2024/08/01/project-Vue2%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/08/01/project-Vue2%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、项目介绍及初始化"><a href="#一、项目介绍及初始化" class="headerlink" title="一、项目介绍及初始化"></a>一、项目介绍及初始化</h1><h2 id="1-项目架构"><a href="#1-项目架构" class="headerlink" title="1.项目架构"></a>1.项目架构</h2><h3 id="1-1-项目架构和解决方案"><a href="#1-1-项目架构和解决方案" class="headerlink" title="1.1 项目架构和解决方案"></a>1.1 项目架构和解决方案</h3><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022005490.png" alt="image.png"></p><h3 id="1-2-课程安排"><a href="#1-2-课程安排" class="headerlink" title="1.2 课程安排"></a>1.2 课程安排</h3><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022005017.png" alt="image.png"></p><h3 id="1-3-课程具备能力"><a href="#1-3-课程具备能力" class="headerlink" title="1.3 课程具备能力"></a>1.3 课程具备能力</h3><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022005317.png" alt="image.png"></p><h2 id="2-基础代码拉取"><a href="#2-基础代码拉取" class="headerlink" title="2. 基础代码拉取"></a>2. 基础代码拉取</h2><ul><li><p>拉取命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span>  https://github.com/PanJiaChen/vue-admin-template.git</span><br></pre></td></tr></table></figure></li><li><p>升级core-js版本到<strong>3.25.5</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i core-js@3.25.5 <span class="comment"># npm</span></span><br></pre></td></tr></table></figure></li><li><p>安装完整依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i <span class="comment"># npm</span></span><br></pre></td></tr></table></figure></li><li><p>启动命令在package.json中查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></li><li><p>需要检查VsCode本身的插件ESLint 和 Vutur</p></li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022005304.png" alt="image.png"></p><h2 id="3-项目目录和入口文件介绍"><a href="#3-项目目录和入口文件介绍" class="headerlink" title="3.项目目录和入口文件介绍"></a>3.项目目录和入口文件介绍</h2><ul><li><p>项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── src                        <span class="comment"># 源代码目录</span></span><br><span class="line">│   ├── api                    <span class="comment"># 所有请求</span></span><br><span class="line">│   ├── assets                 <span class="comment"># 主题 字体等静态资源</span></span><br><span class="line">│   ├── components             <span class="comment"># 全局公用组件</span></span><br><span class="line">│   ├── icons                  <span class="comment"># 项目所有 svg icons</span></span><br><span class="line">│   ├── layout                 <span class="comment"># 全局 layout</span></span><br><span class="line">│   ├── router                 <span class="comment"># 路由</span></span><br><span class="line">│   ├── store                  <span class="comment"># 全局 store管理</span></span><br><span class="line">│   ├── styles                 <span class="comment"># 全局样式</span></span><br><span class="line">│   ├── utils                  <span class="comment"># 全局公用方法</span></span><br><span class="line">│   ├── views                  <span class="comment"># views 所有页面</span></span><br><span class="line">│   ├── App.vue                <span class="comment"># 入口页面</span></span><br><span class="line">│   ├── main.js                <span class="comment"># 入口文件 加载组件 初始化等</span></span><br><span class="line">│   └── permission.js          <span class="comment"># 权限管理</span></span><br><span class="line">│   └── settings.js            <span class="comment"># 配置文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>入口文件</p></li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006806.png" alt="image.png"></p><h2 id="4-App-vue根组件解析"><a href="#4-App-vue根组件解析" class="headerlink" title="4.App.vue根组件解析"></a>4.App.vue根组件解析</h2><ul><li>App.vue组件</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006600.png" alt="image.png"></p><ul><li>layout布局</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006071.png" alt="image.png"></p><h2 id="5-基础设置settings-js和导航守卫permission-js"><a href="#5-基础设置settings-js和导航守卫permission-js" class="headerlink" title="5.基础设置settings.js和导航守卫permission.js"></a>5.基础设置settings.js和导航守卫permission.js</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006253.png" alt="image.png"></p><blockquote><p>settings.js导出网站基础配置，包括：网站标题、固定header、显示logo<br>permission.js(权限)，主要负责路由导航守卫</p></blockquote><h2 id="6-Vuex的结构"><a href="#6-Vuex的结构" class="headerlink" title="6.Vuex的结构"></a>6.Vuex的结构</h2><h4 id="模板中的结构"><a href="#模板中的结构" class="headerlink" title="模板中的结构"></a>模板中的结构</h4><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006219.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006517.png" alt="image.png"></p><p>注意：人资资源项目主要针对<strong>用户模块user </strong>进行改造和重写</p><h4 id="Vuex的设计思想"><a href="#Vuex的设计思想" class="headerlink" title="Vuex的设计思想"></a>Vuex的设计思想</h4><ul><li>1.页面交互状态（折叠侧边栏-固定头部）</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006764.png" alt="image.png"></p><ul><li>2.使用全局状态Vuex根据功能拆分成不同的模块（modules）</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006576.png" alt="image.png"> </p><ul><li>3.进行状态管理通过getters建立对于模块中属性的快捷访问</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006497.png" alt="image.png"></p><h2 id="7-使用模板中的Icon图标"><a href="#7-使用模板中的Icon图标" class="headerlink" title="7.使用模板中的Icon图标"></a>7.使用模板中的Icon图标</h2><ul><li>src/icons/svg目录下的图标都可以使用</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022006284.png" alt="image.png"> </p><ul><li>图标文件名直接设置为svg-icon组件的iconClass属性</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022007147.png" alt="image.png"></p><h2 id="8-扩展—解析Icon图标的实现思路"><a href="#8-扩展—解析Icon图标的实现思路" class="headerlink" title="8.扩展—解析Icon图标的实现思路"></a>8.扩展—解析Icon图标的实现思路</h2><ul><li>引入目录所有的svg</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022007223.png" alt="image.png"></p><ul><li>全局注册svg-icon组件</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022007332.png" alt="image.png"></p><ul><li>loader插件打包svg</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022007842.png" alt="image.png"> </p><ul><li>svg-icon引用svg的链接</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022007387.png" alt="image.png"></p><ul><li>知识扩展</li></ul><p>1.了解：require.context(路径，是否扫描子目录， 正则匹配) 可以引入某个目录下的内容<br>2.了解：svg-sprite-loader打包了所有svg到一个svg标签上，将svg名称作为symbol标签的id属性<br>3.了解：svg-icon使用iconClass属性引用了symbol的id</p><h2 id="9-导入样式资源并使用git管理"><a href="#9-导入样式资源并使用git管理" class="headerlink" title="9.导入样式资源并使用git管理"></a>9.导入样式资源并使用git管理</h2><ul><li>将教学资源中的初始化<strong>图片-样式-svg </strong>拷贝到src目录下</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022007308.png" alt="image.png"></p><blockquote><p>因为项目是从github上拉取下来的，所以git记录了之前模版的信息，所以删除需要建立git</p></blockquote><ul><li>删除原有的.git文件</li><li><p>初始化仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init <span class="comment"># 初始化仓库</span></span><br></pre></td></tr></table></figure></li><li><p>添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add . <span class="comment"># 添加到暂存区</span></span><br></pre></td></tr></table></figure></li><li><p>提交本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;初始化人力资源项目&quot;</span> <span class="comment"># 提交本地仓库</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来，同学们需要在gitee上新建一个自己的远程仓库，然后将本地的仓库推送到远程仓库托管</p></blockquote></li><li><p>本地仓库配置远程仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin &lt;你的远程仓库地址&gt;  <span class="comment"># 本地仓库配置远程仓库地址</span></span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master <span class="comment"># 推送到远程仓库</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="二、登录模块"><a href="#二、登录模块" class="headerlink" title="二、登录模块"></a>二、登录模块</h1><h2 id="1-登录页的结构和表单"><a href="#1-登录页的结构和表单" class="headerlink" title="1.登录页的结构和表单"></a>1.登录页的结构和表单</h2><blockquote><p>接下来需要实现登录页的表单结构和表单内容</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022007413.png" alt="image.png"></p><ul><li>拷贝登录页的基本结构布局-代码位置(<strong>src/views/login/index.vue)</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;logo&quot; /&gt;</span><br><span class="line">    &lt;div class=&quot;form&quot;&gt;</span><br><span class="line">      &lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">      &lt;el-card shadow=&quot;never&quot; class=&quot;login-card&quot;&gt;</span><br><span class="line">        &lt;!--登录表单--&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name : &quot;Login&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.login-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: stretch;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  .logo &#123;</span><br><span class="line">    flex: 3;</span><br><span class="line">    background: rgba(38, 72, 176) url(../../assets/common/login_back.png)</span><br><span class="line">      no-repeat center / cover;</span><br><span class="line">    border-top-right-radius: 60px;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: flex-end;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    padding: 0 100px;</span><br><span class="line">    .icon &#123;</span><br><span class="line">      background: url(../../assets/common/logo.png) no-repeat 70px center /</span><br><span class="line">        contain;</span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 50px;</span><br><span class="line">      margin-bottom: 50px;</span><br><span class="line">    &#125;</span><br><span class="line">    p &#123;</span><br><span class="line">      color: #fff;</span><br><span class="line">      font-size: 18px;</span><br><span class="line">      margin-top: 20px;</span><br><span class="line">      width: 300px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .form &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    padding-left: 176px;</span><br><span class="line">    .el-card &#123;</span><br><span class="line">      border: none;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    h1 &#123;</span><br><span class="line">      padding-left: 20px;</span><br><span class="line">      font-size: 24px;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-input &#123;</span><br><span class="line">      width: 350px;</span><br><span class="line">      height: 44px;</span><br><span class="line">      .el-input__inner &#123;</span><br><span class="line">        background: #f4f5fb;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-checkbox &#123;</span><br><span class="line">      color:#606266;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>实现登录表单的结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">shadow</span>=<span class="string">&quot;never&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--登录表单--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- el-form &gt; el-form-item &gt; el-input --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">          用户平台使用协议</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">&quot;width:350px&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>提交代码</p></li></ul><h2 id="2-登录表单校验-实现"><a href="#2-登录表单校验-实现" class="headerlink" title="2.登录表单校验-实现"></a>2.登录表单校验-实现</h2><ol><li><p>定义数据和校验规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">loginForm</span>: &#123;</span><br><span class="line">        <span class="attr">mobile</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">isAgree</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">loginRules</span>: &#123;</span><br><span class="line">        <span class="attr">mobile</span>: [&#123;</span><br><span class="line">          <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;请输入手机号&#x27;</span>,</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">pattern</span>: <span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;手机号格式不正确&#x27;</span>,</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">password</span>: [&#123;</span><br><span class="line">          <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span>,</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">min</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">max</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;密码长度应该为6-16位之间&#x27;</span>,</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// required只能检查 null &quot;&quot; undefined</span></span><br><span class="line">        <span class="attr">isAgree</span>: [&#123;</span><br><span class="line">          <span class="attr">validator</span>: <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// rule规则</span></span><br><span class="line">            <span class="comment">// value检查的数据 true/false</span></span><br><span class="line">            <span class="comment">// callback 函数 执行这个函数</span></span><br><span class="line">            <span class="comment">// 成功执行callback 失败也执行callback(错误对象 new Error(错误信息))</span></span><br><span class="line">            value ? <span class="title function_">callback</span>() : <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;没有勾选用户平台协议&#x27;</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">isOK</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&#x27;校验通过&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>绑定组件的对应属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-form ref=&quot;form&quot; :model=&quot;loginForm&quot; :rules=&quot;loginRules&quot;&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;mobile&quot;&gt;</span><br><span class="line">            &lt;el-input v-model=&quot;loginForm.mobile&quot; placeholder=&quot;请输入手机号&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;loginForm.password&quot; show-password placeholder=&quot;请输入密码&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;isAgree&quot;&gt;</span><br><span class="line">          &lt;el-checkbox v-model=&quot;loginForm.isAgree&quot;&gt;</span><br><span class="line">              用户平台使用协议</span><br><span class="line">          &lt;/el-checkbox&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-button style=&quot;width:350px&quot; type=&quot;primary&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-分析登录流程"><a href="#3-分析登录流程" class="headerlink" title="3. 分析登录流程"></a>3. 分析登录流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/8435673/1677660537041-ce27cc25-b47f-44f0-8658-7c86a29d426a.png#clientId=u60b73d67-62d7-4&amp;from=paste&amp;height=459&amp;id=u6da3ee15&amp;name=image.png&amp;originHeight=918&amp;originWidth=1994&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=110407&amp;status=done&amp;style=none&amp;taskId=uc92adc89-73eb-4124-aaac-39d1fc4ac34&amp;title=&amp;width=997" alt="image.png"></p><blockquote><p>传统思路都是登录校验通过之后，直接调用接口，获取token之后，跳转到主页。</p></blockquote><ul><li>vue-element-admin的登录思路：</li></ul><ol><li>登录表单校验通过</li><li>调用Vuex提供的登录的action</li><li>登录的Action中会调用接口</li><li>登录接口如果成功执行，会返回token</li><li>利用Vuex的特性，将token共享的到Vuex中，这样Vuex就统一管理了token,别的地方想要使用，直接通过Vuex就可以</li><li>登录接口会调用单独封装的请求模块(api)</li><li>请求模块中又会使用用到axios封装的请求工具</li><li>而请求工具又要考虑区分 开发环境和生产环境的问题</li><li>请求时还要考虑前后分离项目产生的跨域问题，要使用代理解决跨域</li></ol><h2 id="4-Vuex中用户模块的实现"><a href="#4-Vuex中用户模块的实现" class="headerlink" title="4. Vuex中用户模块的实现"></a>4. Vuex中用户模块的实现</h2><blockquote><p>登录流程中最核心的是用户模块，所以这部分我们单独拿出来进行重写。</p></blockquote><p>代码位置(<strong>src/store/modules/user.js</strong>)</p><ul><li>删除原有模板中用户模块中的内容</li><li>导出Vuex子模块-声明一个状态token</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">   state,</span><br><span class="line">   mutations,</span><br><span class="line">   actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现token的Vue数据持久化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="title function_">getToken</span>(), <span class="comment">// 从缓存中读取初始值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">setToken</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">    state.<span class="property">token</span> = token</span><br><span class="line">    <span class="comment">// 同步到缓存</span></span><br><span class="line">    <span class="title function_">setToken</span>(token)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">removeToken</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="comment">// 删除Vuex的token</span></span><br><span class="line">    state.<span class="property">token</span> = <span class="literal">null</span></span><br><span class="line">    <span class="title function_">removeToken</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">// 开启命名空间</span></span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>实现登录的action方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// context上下文，传入参数</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">context, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="comment">// todo: 调用登录接口</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="title function_">login</span>(data)</span><br><span class="line">    <span class="comment">// 返回一个token 123456</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setToken&#x27;</span>, token)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在登录组件中调用该action方法-代码位置(<strong>src/views/login/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">isOK</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;user/login&quot;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 因为user模块导出的时候<strong>namespaced为true</strong>，所以我们调用action的时候要加上模块名称如<strong>user/login</strong></p><h2 id="5-Vue-cli代理解决跨域"><a href="#5-Vue-cli代理解决跨域" class="headerlink" title="5.Vue-cli代理解决跨域"></a>5.Vue-cli代理解决跨域</h2><blockquote><p>上个小节，完成了Vuex用户模块的创建和持久化管理，现在已经调通了 <strong>登录页面- action，</strong>继续往下需要处理<br><strong>请求模块-axios封装-跨域-区分环境</strong></p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022008343.png" alt="image.png"></p><blockquote><p>我们要先把跨域问题解决才能考虑其他内容的开发</p></blockquote><ul><li>首先为什么会有跨域？</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022008548.png" alt="image.png"></p><blockquote><p>在后端没有开启cors的情况下，浏览器的同源策略会直接限制后端返回的数据给到前端。这是因为我们目前所有的项目都是前后分离，前端一个服务， 后端一个服务，后端不开cors只能前端自己想办法。</p></blockquote><ul><li>代理是怎么解决跨域的？</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022008178.png" alt="image.png"></p><blockquote><p>既然前端不能直接请求后端服务，那就搞个中间服务，中间服务刚好和我们的前端服务同源，前端和中间服务可以通信，而中间服务是node, node后台向后端发请求是不受同源策略影响的，因为<strong>同源策略只针对浏览器！！！</strong>， 这样就是代理，中间层的服务将前端的请求代理给了后端接口。</p></blockquote><ul><li>具体怎么做呢？</li></ul><blockquote><p>跨域有开发环境跨域和生产环境跨域，我们最后上线的时候要考虑生产环境跨域，目前只需要考虑开发环境。</p></blockquote><ul><li>配置文件可以直接配置代理 vue.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: port,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">overlay</span>: &#123;</span><br><span class="line">    <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;https://heimahr.itheima.net&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// before: require(&#x27;./mock/mock-server.js&#x27;)</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意： 要去掉before这个选项，这个是mock数据，会影响到我们的请求，并且修改完成之后要重启服务。</p><h2 id="6-axios封装"><a href="#6-axios封装" class="headerlink" title="6.axios封装"></a>6.axios封装</h2><blockquote><p>完成了代理跨域，就可以考虑axios的封装了。</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022008739.png" alt="image.png"></p><blockquote><p>axios封装主要封装做哪些呢？</p></blockquote><ul><li>基础地址，超时时间</li><li>请求拦截器-统一注入token</li><li>响应拦截器-解构数据-处理异常</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009181.png" alt="image.png"></p><ul><li>axios的基础功能</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009628.png" alt="image.png"></p><p>代码位置(src/utils/request.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 注入token</span></span><br><span class="line"><span class="comment">//  this.$store.getters</span></span><br><span class="line">  <span class="comment">// store.getters.token =&gt; 请求头里面</span></span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;store.getters.token&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 失败执行promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, message, success &#125; = response.<span class="property">data</span> <span class="comment">// 默认json格式</span></span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>, message &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(message))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="title function_">async</span>(error) =&gt; &#123;</span><br><span class="line">  <span class="comment">// error.message</span></span><br><span class="line">  <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>, <span class="attr">message</span>: error.<span class="property">message</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><h2 id="7-环境区分"><a href="#7-环境区分" class="headerlink" title="7.环境区分"></a>7.环境区分</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009073.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022039126.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022040621.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009697.png" alt="image.png"></p><ul><li>将.env.development中的值改为 /api 作为请求工具的基础地址</li><li><strong>process.env.VUE_APP_BASE_API </strong>的表示读取该变量，npm run dev时该变量为 /api,  npm run build:prod时 该变量为 /prod-api</li></ul><h2 id="8-登录联调"><a href="#8-登录联调" class="headerlink" title="8. 登录联调"></a>8. 登录联调</h2><blockquote><p>目前登录功能只剩下红色的部分还需要</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009416.png" alt="image.png"></p><ul><li>首先封装登录的API请求-代码位置(<strong>src/api/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vuex中的用户模块调用登录接口-代码位置(<strong>src/store/modules/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// context上下文，传入参数</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">context, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="comment">// todo: 调用登录接口</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="title function_">login</span>(data)</span><br><span class="line">    <span class="comment">// 返回一个token 123456</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setToken&#x27;</span>, token)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>登录成功后，跳转到主页-代码位置(<strong>src/views/login/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="title function_">async</span>(isOK) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/login&#x27;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>)</span><br><span class="line">        <span class="comment">// Vuex 中的action 返回的promise</span></span><br><span class="line">        <span class="comment">// 跳转主页</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>区分不同环境的数据-代码位置(<strong>src/views/login/index.vue</strong>)</li></ul><blockquote><p>因为开发环境为了便利，我们将用户的账户信息和密码都默认写在了页面上，但是真正的项目我们不可能将数据进行暴露出去，所以在生产环境时应该将 用户的手机号和密码抹去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">loginForm</span>: &#123;</span><br><span class="line">        <span class="attr">mobile</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;13800000002&#x27;</span> : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;123456&#x27;</span> : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">isAgree</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-主页权限验证—鉴权"><a href="#9-主页权限验证—鉴权" class="headerlink" title="9.主页权限验证—鉴权"></a>9.主页权限验证—鉴权</h2><blockquote><p>当前项目用户是否有权限访问主页，要考虑当前有没有token,  如果有token, 用户还想去登录页，我们可以直接去主页-这个就是免登录功能。有token的情况下，直接到主页。</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009304.png" alt="image.png"></p><ul><li>访问主页-有token放过，没有token跳到登录页</li><li>访问登录-有token跳到主页，没有token放过</li></ul><p>代码实现-代码位置(<strong>src/pemission.js</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *前置守卫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/404&#x27;</span>]</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  nprogress.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    <span class="comment">// 存在token</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 跳转到主页</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// 中转到主页</span></span><br><span class="line">      <span class="comment">// next（地址）并没有执行后置守卫</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="title function_">next</span>() <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 中转到登录页</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 后置守卫</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  nprogress.<span class="title function_">done</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、主页"><a href="#三、主页" class="headerlink" title="三、主页"></a>三、主页</h1><h2 id="1-获取用户资料在Vuex中共享"><a href="#1-获取用户资料在Vuex中共享" class="headerlink" title="1.获取用户资料在Vuex中共享"></a>1.获取用户资料在Vuex中共享</h2><blockquote><p>登录成功跳转到主页之后，可以获取用户资料，获取的资料在Vuex中共享，这样用户就可以很方便的获取该信息</p></blockquote><ul><li>获取流程</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009209.png" alt="image.png"></p><ul><li>在什么位置获取？</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009623.png" alt="image.png"></p><blockquote><p>之前在导航守卫的位置，可以确定已经有了token，这个位置获取资料更佳，因为导航守卫在页面发生跳转时出发，这时不论你从何时何地进来，如果发现你没获取资料，都可以非常清楚直观的获取资料。判断条件也使得不会发生重复的加载。</p></blockquote><ul><li>封装获取用户资料的API-代码位置(<strong>src/api/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/profile&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vuex中声明用户信息状态，修改用户信息的mutations， 和获取用户信息的action-代码位置(<strong>src/store/modules/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="title function_">getToken</span>(),</span><br><span class="line">  <span class="attr">userInfo</span>: &#123;&#125; <span class="comment">// 这里有一个空对象，为了放置后面取数据报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">setUserInfo</span>(<span class="params">state, userInfo</span>) &#123;</span><br><span class="line">    state.<span class="property">userInfo</span> = userInfo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="keyword">async</span> getUserInfo (context) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>()</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&quot;setUserInfo&quot;</span>, result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过getters声明userId(快捷访问)-代码位置(<strong>src/store/getters.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">userId</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在权限拦截处调用action-代码位置(<strong>src/pemission.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *前置守卫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/404&#x27;</span>]</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  nprogress.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    <span class="comment">// 存在token</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 跳转到主页</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// 中转到主页</span></span><br><span class="line">      <span class="comment">// next（地址）并没有执行后置守卫</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(!store.<span class="property">getters</span>.<span class="property">userId</span>) &#123;</span><br><span class="line">         <span class="keyword">await</span> store.<span class="title function_">diapatch</span>(<span class="string">&quot;user/getUserInfo&quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">next</span>() <span class="comment">// 放行</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 中转到登录页</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>有同学会问，为什么用户信息不做持久化管理呢？ 不需要缓存吗？ 用户信息不同于token，token是当前用户的唯一标识，在几个小时内都是有效的，但是用户信息可能会进行修改或者发生变化，所以用户信息在一般的项目或者业务中不进行缓存。</p></blockquote><h2 id="2-显示用户头像和用户名"><a href="#2-显示用户头像和用户名" class="headerlink" title="2.显示用户头像和用户名"></a>2.显示用户头像和用户名</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009859.png" alt="image.png"> </p><blockquote><p>首先解析一下顶部组件的内部位置</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022009526.png" alt="image.png"></p><blockquote><p>因为上个小节，将资料已经放到了Vuex中，可以通过getters开放属性，直接在组件中引用即可</p></blockquote><ul><li>Vuex中使用getters暴露属性-代码位置(<strong>src/store/getters.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">token</span>,</span><br><span class="line">  <span class="attr">userId</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">userId</span>,</span><br><span class="line">  <span class="attr">avatar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">staffPhoto</span>, <span class="comment">// 头像</span></span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">username</span>, <span class="comment">// 用户名称</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在Navbar组件引入getters-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 引入头像和用户名称</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      &#x27;sidebar&#x27;,</span><br><span class="line">      &#x27;avatar&#x27;,</span><br><span class="line">      &#x27;name&#x27;</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NavBar组件显示用户名和头像-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;avatar-wrapper&quot;&gt;</span><br><span class="line">          &lt;!-- 头像 --&gt;</span><br><span class="line">          &lt;img :src=&quot;avatar&quot; class=&quot;user-avatar&quot;&gt;</span><br><span class="line">          &lt;!-- 用户名称 --&gt;</span><br><span class="line">          &lt;span class=&quot;name&quot;&gt;&#123;&#123; name &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;!-- 图标 --&gt;</span><br><span class="line">          &lt;i class=&quot;el-icon-setting&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>设置头像和用户名的样式-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.avatar-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="selector-class">.name</span> &#123;</span><br><span class="line">    //  用户名称距离右侧距离</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-icon-setting</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.user-avatar</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="3-处理头像为空的场景"><a href="#3-处理头像为空的场景" class="headerlink" title="3.处理头像为空的场景"></a>3.处理头像为空的场景</h2><blockquote><p>不是所有用户都有头像的，当用户没有头像时要显示对应的内容</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010215.png" alt="image.png"></p><ul><li>条件判断-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;avatar-wrapper&quot;&gt;</span><br><span class="line">          &lt;!-- 头像 --&gt;</span><br><span class="line">          &lt;img v-if=&quot;avatar&quot; :src=&quot;avatar&quot; class=&quot;user-avatar&quot;&gt;</span><br><span class="line">          &lt;span v-else class=&quot;username&quot;&gt;&#123;&#123; name?.charAt(0) &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;!-- 用户名称 --&gt;</span><br><span class="line">          &lt;span class=&quot;name&quot;&gt;&#123;&#123; name &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;!-- 图标 --&gt;</span><br><span class="line">          &lt;i class=&quot;el-icon-setting&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.username</span> &#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">         <span class="attribute">text-align</span>: center;</span><br><span class="line">         <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">         <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">         <span class="attribute">background</span>: <span class="number">#04c9be</span>;</span><br><span class="line">         <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">         <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们使用了可选链操作符 ？， 它的意思是当？前面的变量为空时，它不会继续往下执行，防止报错，如<br>null?.name，但是我们当前的版本不支持？的编译，所以需要升级一下对应的版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i vue@2.7.0  vue-template-compiler@2.7.0   <span class="comment"># 升级vue版本️</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>升级完成后，重启服务就可以了。</p></blockquote><h2 id="4-处理token失效的问题"><a href="#4-处理token失效的问题" class="headerlink" title="4.处理token失效的问题"></a>4.处理token失效的问题</h2><blockquote><p>token是有时效性的，当token超时，我们需要做一下处理</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010909.png" alt="image.png"></p><ul><li>请求拦截器处理-代码位置(<strong>src/utils/request.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(..., <span class="title function_">async</span>(error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;token超时了&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment">// 说明token超时了</span></span><br><span class="line">    <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/logout&#x27;</span>) <span class="comment">// 调用action 退出登录</span></span><br><span class="line">    <span class="comment">//  主动跳到登录页</span></span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 跳转到登录页</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// error.message</span></span><br><span class="line">  <span class="title class_">Message</span>.<span class="title function_">error</span>(error.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>实现Vuex的登出action-代码位置(<strong>src/store/modules/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 退出登录的action</span></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;removeToken&#x27;</span>) <span class="comment">// 删除token</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, &#123;&#125;) <span class="comment">// 设置用户信息为空对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-调整下拉菜单，实现退出登录"><a href="#5-调整下拉菜单，实现退出登录" class="headerlink" title="5.调整下拉菜单，实现退出登录"></a>5.调整下拉菜单，实现退出登录</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010872.png" alt="image.png"></p><blockquote><p>退出登录流程</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010696.png" alt="image.png"></p><ul><li>Navbar中点击退出登录-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dropdown-item @click.native=&quot;logout&quot;&gt;</span><br><span class="line">        &lt;span style=&quot;display:block;&quot;&gt;登出&lt;/span&gt;</span><br><span class="line">&lt;/el-dropdown-item&gt;</span><br></pre></td></tr></table></figure><ul><li>退出方法-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default  &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">     async logout() &#123;</span><br><span class="line">      // 调用退出登录的action</span><br><span class="line">      await this.$store.dispatch(&#x27;user/logout&#x27;)</span><br><span class="line">      this.$router.push(&#x27;/login&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：native修饰符表示给组件的根元素注册事件️</p><h2 id="6-修改密码功能实现"><a href="#6-修改密码功能实现" class="headerlink" title="6.修改密码功能实现"></a>6.修改密码功能实现</h2><ul><li>整体流程</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010998.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010784.png" alt="image.png"></p><h3 id="6-1-修改密码-弹出层"><a href="#6-1-修改密码-弹出层" class="headerlink" title="6.1-修改密码-弹出层"></a>6.1-修改密码-弹出层</h3><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010365.png" alt="image.png"> </p><ul><li>注册修改密码点击事件-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- prevent阻止默认事件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;updatePassword&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown-item</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>声明变量和方法控制弹层显示-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return  &#123;</span><br><span class="line">      showDialog: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updatePassword() &#123;</span><br><span class="line">      this.showDialog = true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>放置弹层组件-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog width=&quot;500px&quot; title=&quot;修改密码&quot; :visible.sync=&quot;showDialog&quot; &gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><h3 id="6-2-修改密码-表单结构"><a href="#6-2-修改密码-表单结构" class="headerlink" title="6.2-修改密码-表单结构"></a>6.2-修改密码-表单结构</h3><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010627.png" alt="image.png"></p><ul><li>表单结构-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form  label-width=&quot;120px&quot; &gt;</span><br><span class="line">      &lt;el-form-item label=&quot;旧密码&quot; &gt;</span><br><span class="line">        &lt;el-input  show-password size=&quot;small&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;新密码&quot; &gt;</span><br><span class="line">        &lt;el-input  show-password size=&quot;small&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;重复密码&quot; &gt;</span><br><span class="line">        &lt;el-input  show-password size=&quot;small&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; &gt;确认修改&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button size=&quot;mini&quot; &gt;取消&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3-修改密码-表单校验"><a href="#6-3-修改密码-表单校验" class="headerlink" title="6.3-修改密码-表单校验"></a>6.3-修改密码-表单校验</h3><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010583.png" alt="image.png"> </p><ul><li>声明数据和规则-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span>  &#123;</span><br><span class="line">     <span class="attr">passForm</span>: &#123;</span><br><span class="line">        <span class="attr">oldPassword</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 旧密码</span></span><br><span class="line">        <span class="attr">newPassword</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 新密码</span></span><br><span class="line">        <span class="attr">confirmPassword</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 确认密码字段</span></span><br><span class="line">      &#125;,</span><br><span class="line">     <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="attr">oldPassword</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;旧密码不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;], <span class="comment">// 旧密码</span></span><br><span class="line">        <span class="attr">newPassword</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;新密码不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;, &#123;</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">          <span class="attr">min</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">max</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;新密码的长度为6-16位之间&#x27;</span></span><br><span class="line">        &#125;], <span class="comment">// 新密码</span></span><br><span class="line">        <span class="attr">confirmPassword</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;重复密码不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;, &#123;</span><br><span class="line">          <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">          <span class="attr">validator</span>: <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// value</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">passForm</span>.<span class="property">newPassword</span> === value) &#123;</span><br><span class="line">              <span class="title function_">callback</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;重复密码和新密码输入不一致&#x27;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;] <span class="comment">// 确认密码字段</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定属性-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form ref=&quot;passForm&quot; label-width=&quot;120px&quot; :model=&quot;passForm&quot; :rules=&quot;rules&quot;&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;旧密码&quot; prop=&quot;oldPassword&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;passForm.oldPassword&quot; show-password size=&quot;small&quot; /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;新密码&quot; prop=&quot;newPassword&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;passForm.newPassword&quot; show-password size=&quot;small&quot; /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;重复密码&quot; prop=&quot;confirmPassword&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;passForm.confirmPassword&quot; show-password size=&quot;small&quot; /&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; &gt;确认修改&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button size=&quot;mini&quot; &gt;取消&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure><h3 id="6-4-修改密码-确定和取消"><a href="#6-4-修改密码-确定和取消" class="headerlink" title="6.4-修改密码-确定和取消"></a>6.4-修改密码-确定和取消</h3><ul><li>确定和取消流程</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022010479.png" alt="image.png"></p><ul><li>封装修改密码方法-代码位置(<strong>src/api/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新密码</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updatePassword</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/updatePass&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>确定方法-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定</span></span><br><span class="line">    <span class="title function_">btnOK</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">passForm</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> isOK =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">          <span class="comment">// 调用接口</span></span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">updatePassword</span>(<span class="variable language_">this</span>.<span class="property">passForm</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;修改密码成功&#x27;</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">btnCancel</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><ul><li>取消方法-代码位置(<strong>src/layout/components/NavBar.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnCancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">passForm</span>.<span class="title function_">resetFields</span>() <span class="comment">// 重置表单</span></span><br><span class="line">      <span class="comment">// 关闭弹层</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>监听弹层关闭事件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog @close=&quot;btnCancel&quot; width=&quot;500px&quot; title=&quot;修改密码&quot; :visible.sync=&quot;showDialog&quot; &gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>有同学有疑惑，不是用了.sync修饰符吗？可以直接关闭弹层，为何还要监听close事件，这是因为sync修饰符只能关闭弹层，我们还需要将表单进行重置，因为你之前打开弹层可能修改了一半或者残留一些校验信息，再打开的时候这些信息应该都被重置，所以这里用监听事件的方式再重置一下表单，保证功能的体验和完整性。</p></blockquote><h2 id="7-清理组件和路由"><a href="#7-清理组件和路由" class="headerlink" title="7. 清理组件和路由"></a>7. 清理组件和路由</h2><blockquote><p>主页功能开发完了，我们要清理一下模板中残余文件</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022011378.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/8435673/1677731001663-0c373e48-4eb6-4691-9f60-29048729645b.png#averageHue=%23b6b6b6&amp;clientId=udd47902c-ce16-4&amp;from=paste&amp;height=400&amp;id=u4e457222&amp;name=image.png&amp;originHeight=800&amp;originWidth=1908&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=166425&amp;status=done&amp;style=none&amp;taskId=u8610b8d9-8690-445e-abf9-dac59fc210c&amp;title=&amp;width=954" alt="image.png"></p><ul><li>路由只保留登录-主页-404</li><li>请求模块只保留user.js模块</li></ul><h2 id="8-创建项目所需要的组件和路由"><a href="#8-创建项目所需要的组件和路由" class="headerlink" title="8.创建项目所需要的组件和路由"></a>8.创建项目所需要的组件和路由</h2><blockquote><p>人力资源项目需要这些模块</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── approval            <span class="comment"># 审批管理</span></span><br><span class="line">├── attendance          <span class="comment"># 考勤管理</span></span><br><span class="line">├── department          <span class="comment"># 组织架构</span></span><br><span class="line">├── employee            <span class="comment"># 员工管理</span></span><br><span class="line">├── permission          <span class="comment"># 权限管理</span></span><br><span class="line">├── role                <span class="comment"># 角色管理</span></span><br><span class="line">├── salary              <span class="comment"># 工资管理</span></span><br><span class="line">├── social              <span class="comment"># 社保管理</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建模块</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022011336.png" alt="image.png"></p><blockquote><p>大家可以直接从当天课程的素材中拷贝已经准备好的路由/组件</p></blockquote><p>组件结构样例：<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022011966.png" alt="image.png"></p><p>路由模块样例：<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022011570.png" alt="image.png"></p><p>路由的统一导入：<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022011211.png" alt="image.png"></p><p>在src/router/index.js中集成到当前路由中：<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022011544.png" alt="image.png"></p><h2 id="9-扩展—解析左侧菜单原理"><a href="#9-扩展—解析左侧菜单原理" class="headerlink" title="9.扩展—解析左侧菜单原理"></a>9.扩展—解析左侧菜单原理</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022011939.png" alt="image.png"></p><blockquote><p>左侧菜单的数据来源于路由模块的信息， 会根据路由信息的hidden属性来判断是否显示该路由信息到菜单，<br>菜单属性中的图表和标题来源于路由meta中的icon和title属性</p></blockquote><ul><li>分析过程</li></ul><p>sidebar组件引入路由信息：<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022012599.png" alt="image.png"></p><p>循环渲染路由信息<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022012624.png" alt="image.png"></p><p>sidebarItem组件根据条件渲染-传递icon和title属性给item组件<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022012057.png" alt="image.png"></p><p>item组件接收icon和title属性，使用函数型组件完成渲染<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022012508.png" alt="image.png"></p><h2 id="10-左侧菜单显示项目logo"><a href="#10-左侧菜单显示项目logo" class="headerlink" title="10. 左侧菜单显示项目logo"></a>10. 左侧菜单显示项目logo</h2><blockquote><p>logo有两种展示形态，当菜单展开时，显示大图，当菜单折叠时，显示小图</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013374.png" alt="image.png"><br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013048.png" alt="image.png"></p><ul><li>通过settings.js的设置，将logo显示出来-代码位置(<strong>src/settings.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;人力资源后台管理系统&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">boolean</span>&#125; true | false</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span> Whether fix the header</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">fixedHeader</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">boolean</span>&#125; true | false</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span> Whether show the logo in sidebar</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">sidebarLogo</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>调整logo的页面结构-代码位置(<strong>src/layout/components/Sidebar/Logo.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;sidebar-logo-container&quot; :class=&quot;&#123;&#x27;collapse&#x27;:collapse&#125;&quot;&gt;</span><br><span class="line">    &lt;transition name=&quot;sidebarLogoFade&quot;&gt;</span><br><span class="line">      &lt;router-link key=&quot;collapse&quot; class=&quot;sidebar-logo-link&quot; to=&quot;/&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;@/assets/common/logo.png&quot; class=&quot;sidebar-logo&quot;&gt;</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>调整logo样式-代码位置(<strong>src/layout/components/Sidebar/Logo.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.sidebarLogoFade-enter-active &#123;</span><br><span class="line">  transition: opacity 1.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebarLogoFade-enter,</span><br><span class="line">.sidebarLogoFade-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar-logo-container &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  line-height: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  overflow: hidden;</span><br><span class="line"></span><br><span class="line">  &amp; .sidebar-logo-link &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 100%;</span><br><span class="line"></span><br><span class="line">    &amp; .sidebar-logo &#123;</span><br><span class="line">      width: 140px;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">      margin-right: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp; .sidebar-title &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      margin: 0;</span><br><span class="line">      color: #fff;</span><br><span class="line">      font-weight: 600;</span><br><span class="line">      line-height: 50px;</span><br><span class="line">      font-size: 14px;</span><br><span class="line">      font-family: Avenir, Helvetica Neue, Arial, Helvetica, sans-serif;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.collapse &#123;</span><br><span class="line">    .sidebar-logo &#123;</span><br><span class="line">      margin-right: 0px;</span><br><span class="line">      width: 32px;</span><br><span class="line">      height: 32px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、组织架构"><a href="#四、组织架构" class="headerlink" title="四、组织架构"></a>四、组织架构</h1><h2 id="1-树组件应用"><a href="#1-树组件应用" class="headerlink" title="1.树组件应用"></a>1.树组件应用</h2><ul><li>树形组件-用层级结构展示信息，可展开或折叠。</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013599.png" alt="image.png"></p><ul><li>element-ui提供了树组件<a href="https://element.eleme.cn/#/zh-CN/component/tree">el-tree</a>的应用</li><li>data（绑定数据）</li><li>props (设置属性) - children(设置子节点的字段名) / label(设置显示内容的字段名)</li><li>default-expand-all (默认展开所有节点)</li></ul><ul><li>在组织架构组件中放置树形组件-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tree default-expand-all :data=&quot;depts&quot; :props=&quot;defaultProps&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>声明树组件相关的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Department&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return  &#123;</span><br><span class="line">      depts: [&#123;</span><br><span class="line">        name: &#x27;传智教育&#x27;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123; name: &#x27;总裁办&#x27;&#125;,</span><br><span class="line">          &#123; name: &#x27;行政部&#x27;&#125;,</span><br><span class="line">          &#123; name: &#x27;财务部&#x27;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;],</span><br><span class="line">      defaultProps: &#123;</span><br><span class="line">        children: &#x27;children&#x27;,</span><br><span class="line">        label: &#x27;name&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-树组件自定义结构"><a href="#2-树组件自定义结构" class="headerlink" title="2.树组件自定义结构"></a>2.树组件自定义结构</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013605.png" alt="image.png"></p><blockquote><p>通过在el-tree中传入插槽内容，就可以渲染数据</p></blockquote><ul><li>自定义树形结构-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tree default-expand-all :data=&quot;depts&quot; :props=&quot;defaultProps&quot;&gt;</span><br><span class="line">        &lt;!-- 节点结构 --&gt;</span><br><span class="line">        &lt;!-- v-slot=&quot;&#123; node, data &#125;&quot; 只能作用在template --&gt;</span><br><span class="line">        &lt;template v-slot=&quot;&#123; data &#125;&quot;&gt;</span><br><span class="line">          &lt;el-row style=&quot;width:100%;height:40px&quot; type=&quot;flex&quot; justify=&quot;space-between&quot; align=&quot;middle&quot;&gt;</span><br><span class="line">            &lt;el-col&gt;&#123;&#123; data.name &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;el-col :span=&quot;4&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;tree-manager&quot;&gt;&#123;&#123; data.managerName &#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;!-- $event 实参 表示类型 --&gt;</span><br><span class="line">              &lt;el-dropdown &gt;</span><br><span class="line">                &lt;!-- 显示区域内容 --&gt;</span><br><span class="line">                &lt;span class=&quot;el-dropdown-link&quot;&gt;</span><br><span class="line">                  操作&lt;i class=&quot;el-icon-arrow-down el-icon--right&quot; /&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">                &lt;!-- 下拉菜单选项 --&gt;</span><br><span class="line">                &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</span><br><span class="line">                  &lt;el-dropdown-item command=&quot;add&quot;&gt;添加子部门&lt;/el-dropdown-item&gt;</span><br><span class="line">                  &lt;el-dropdown-item command=&quot;edit&quot;&gt;编辑部门&lt;/el-dropdown-item&gt;</span><br><span class="line">                  &lt;el-dropdown-item command=&quot;del&quot;&gt;删除&lt;/el-dropdown-item&gt;</span><br><span class="line">                &lt;/el-dropdown-menu&gt;</span><br><span class="line">              &lt;/el-dropdown&gt;</span><br><span class="line">            &lt;/el-col&gt;</span><br><span class="line">          &lt;/el-row&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">  &lt;/el-tree&gt;</span><br></pre></td></tr></table></figure><ul><li>样式-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.app-container &#123;</span><br><span class="line">  padding: 30px 140px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.tree-manager &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-获取组织架构数据"><a href="#3-获取组织架构数据" class="headerlink" title="3.获取组织架构数据"></a>3.获取组织架构数据</h2><ul><li>封装获取组织的API-代码位置(<strong>src/api/department.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 获取组织架构数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getDepartment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company/department&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在组织架构初始化时调用方法-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; getDepartment &#125; from &#x27;@/api/department&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Department&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return  &#123;</span><br><span class="line">      depts: [],</span><br><span class="line">      defaultProps: &#123;</span><br><span class="line">        children: &#x27;children&#x27;,</span><br><span class="line">        label: &#x27;name&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getDepartment()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">   async getDepartment() &#123;</span><br><span class="line">    const result = await getDepartment()</span><br><span class="line">    this.depts = result</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-递归转化树形结构"><a href="#4-递归转化树形结构" class="headerlink" title="4.递归转化树形结构"></a>4.递归转化树形结构</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013813.png" alt="image.png"></p><ol><li>首先分析数据的关联关系</li><li>封装递归函数根据关联关系转化层级结构</li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013695.png" alt="image.png"></p><blockquote><p>通过分析了解到，父级的id为子级的pid</p></blockquote><ul><li>封装公共方法-代码位置(src/utils/index.js)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 列表型数据转化树形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">transListToTreeData</span>(<span class="params">list, rootValue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> === rootValue) &#123;</span><br><span class="line">      <span class="comment">// 找到了匹配的节点</span></span><br><span class="line">      <span class="comment">// 当前节点的id 和 当前节点的子节点的pid是想等的</span></span><br><span class="line">      <span class="keyword">const</span> children = <span class="title function_">transListToTreeData</span>(list, item.<span class="property">id</span>) <span class="comment">// 找到的节点的子节点</span></span><br><span class="line">      item.<span class="property">children</span> = children  <span class="comment">// 将子节点赋值给当前节点</span></span><br><span class="line">      arr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取完的组织数据使用转化方法转化成树形-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  this.getDepartment() // 调用获取数据的接口</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  // 封装好方法</span><br><span class="line">  async getDepartment() &#123;</span><br><span class="line">    const result = await getDepartment()</span><br><span class="line">    this.depts = transListToTreeData(result, 0)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：递归特点</p><ul><li>一般用来处理未知层级的数据</li><li>递归要有跳出条件</li><li>自身调用自身时参数不能重复</li></ul><h2 id="5-添加子部门—新建弹层组件"><a href="#5-添加子部门—新建弹层组件" class="headerlink" title="5.添加子部门—新建弹层组件"></a>5.添加子部门—新建弹层组件</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013923.png" alt="image.png"><br>步骤：</p><ul><li>注册添加子部门事件</li><li>封装弹层组件</li><li><p>控制弹层显示隐藏</p></li><li><p>注册下拉菜单点击事件-代码位置(<strong>src/views/department/index.vue</strong>)</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dropdown</span> @<span class="attr">command</span>=<span class="string">&quot;operateDept&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 显示区域内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;el-dropdown-link&quot;</span>&gt;</span></span><br><span class="line">            操作<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-arrow-down el-icon--right&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 下拉菜单选项 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加子部门<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">&quot;edit&quot;</span>&gt;</span>编辑部门<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>声明变量控制弹层显示隐藏-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      showDialog: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    operateDept(type) &#123;</span><br><span class="line">      if(type === &#x27;add&#x27;) &#123;</span><br><span class="line">        this.showDialog = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>封装新增组织部门组件-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-dialog title=&quot;新增部门&quot; :visible=&quot;showDialog&quot; @close=&quot;close&quot;&gt;</span><br><span class="line">  &lt;/el-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;AddDept&#x27;</span><br><span class="line">  props: &#123;</span><br><span class="line">    showDialog: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    close() &#123;</span><br><span class="line">      this.$emit(&#x27;update:showDialog&#x27;, false)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在组织架构中放置新增部门组件-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add-dept</span>  <span class="attr">:show-dialog.sync</span>=<span class="string">&quot;showDialog&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里我们同样使用了sync修饰符，可以监听子组件传过来的 <strong>update:属性名</strong>的事件，直接将父组件的值进行修改</p></blockquote><ul><li>设置el-tree组件的点击属性-(点击树不可以折叠，只有点击折叠展开图标才可以)-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tree</span> <span class="attr">:expand-on-click-node</span>=<span class="string">&quot;false&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-添加子部门—表单结构"><a href="#6-添加子部门—表单结构" class="headerlink" title="6.添加子部门—表单结构"></a>6.添加子部门—表单结构</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022013684.png" alt="image.png"> </p><ul><li>新增组织架构结构-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form  label-width=&quot;120px&quot;&gt;</span><br><span class="line">      &lt;el-form-item prop=&quot;name&quot; label=&quot;部门名称&quot;&gt;</span><br><span class="line">        &lt;el-input  placeholder=&quot;2-10个字符&quot; style=&quot;width: 80%&quot; size=&quot;mini&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;部门编码&quot;&gt;</span><br><span class="line">        &lt;el-input  placeholder=&quot;2-10个字符&quot; style=&quot;width: 80%&quot; size=&quot;mini&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;部门负责人&quot;&gt;</span><br><span class="line">        &lt;el-select  placeholder=&quot;请选择负责人&quot; style=&quot;width: 80%&quot; size=&quot;mini&quot;&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item  label=&quot;部门介绍&quot;&gt;</span><br><span class="line">        &lt;el-input  placeholder=&quot;1-100个字符&quot; type=&quot;textarea&quot; size=&quot;mini&quot; :rows=&quot;4&quot; style=&quot;width: 80%&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;!-- 按钮 --&gt;</span><br><span class="line">        &lt;el-row type=&quot;flex&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">          &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">            &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; &gt;确定&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button size=&quot;mini&quot; &gt;取消&lt;/el-button&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br></pre></td></tr></table></figure><h2 id="7-添加子部门—表单基本校验"><a href="#7-添加子部门—表单基本校验" class="headerlink" title="7.添加子部门—表单基本校验"></a>7.添加子部门—表单基本校验</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022014581.png" alt="image.png"><br>表单校验规则</p><ul><li>规则表单项必填/表单项长度限制</li><li>部门名称和已有部门不重复</li><li>部门编码和已有编码不重复</li></ul><p>步骤：</p><ol><li>定义数据架构</li><li>绑定属性</li><li>定义规则</li></ol><p>基本校验</p><ul><li>声明数据和规则-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span>  &#123;</span><br><span class="line">      <span class="attr">formData</span>: &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门编码</span></span><br><span class="line">        <span class="attr">introduce</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门介绍</span></span><br><span class="line">        <span class="attr">managerId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门负责人id</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门名称</span></span><br><span class="line">        <span class="attr">pid</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 父级部门的id</span></span><br><span class="line">      &#125;,</span><br><span class="line">       <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="attr">code</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;部门编码不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">&#x27;部门编码的长度为2-10个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ], <span class="comment">// 部门编码</span></span><br><span class="line">        <span class="attr">introduce</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;部门介绍不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;, &#123;</span><br><span class="line">          <span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">100</span>, <span class="attr">message</span>: <span class="string">&#x27;部门介绍的长度为1-100个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">        &#125;], <span class="comment">// 部门介绍</span></span><br><span class="line">        <span class="attr">managerId</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;部门负责人不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;], <span class="comment">// 部门负责人id</span></span><br><span class="line">        <span class="attr">name</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;部门名称不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">min</span>: <span class="number">2</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">&#x27;部门名称的长度为2-10个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">          &#125;] <span class="comment">// 部门名称</span></span><br><span class="line">        <span class="comment">// pid: &#x27;&#x27; // 父级部门的id 不需要做校验</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定属性-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;addDept&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门名称&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;2-10个字符&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;code&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门编码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.code&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;2-10个字符&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;managerId&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门负责人&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.managerId&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择负责人&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;introduce&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门介绍&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.introduce&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;1-100个字符&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">:rows</span>=<span class="string">&quot;4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> &gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> &gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-添加子部门—表单业务校验"><a href="#8-添加子部门—表单业务校验" class="headerlink" title="8.添加子部门—表单业务校验"></a>8.添加子部门—表单业务校验</h2><ul><li>部门名称和已有部门不重复</li><li>部门编码和已有编码不重复</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022014400.png" alt="image.png"></p><ul><li>部门和编码的重复校验-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><blockquote><p>编码的校验规则</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">            <span class="comment">// 自定义校验模式</span></span><br><span class="line">            <span class="attr">validator</span>: <span class="title function_">async</span>(rule, value, callback) =&gt; &#123;</span><br><span class="line">              <span class="comment">// value就是输入的编码</span></span><br><span class="line">              <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">getDepartment</span>()</span><br><span class="line">              <span class="comment">// result数组中是否存在 value值</span></span><br><span class="line">              <span class="keyword">if</span> (result.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">code</span> === value)) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;部门中已经有该编码了&#x27;</span>))</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>部门的校验规则</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">            <span class="comment">// 自定义校验模式</span></span><br><span class="line">            <span class="attr">validator</span>: <span class="title function_">async</span>(rule, value, callback) =&gt; &#123;</span><br><span class="line">              <span class="comment">// value就是输入的编码</span></span><br><span class="line">              <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">getDepartment</span>()</span><br><span class="line">              <span class="comment">// result数组中是否存在 value值</span></span><br><span class="line">              <span class="keyword">if</span> (result.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === value)) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;部门中已经有该名称了&#x27;</span>))</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h2 id="9-添加子部门—获取负责人数据"><a href="#9-添加子部门—获取负责人数据" class="headerlink" title="9.添加子部门—获取负责人数据"></a>9.添加子部门—获取负责人数据</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022014321.png" alt="image.png"><br>步骤：</p><ol><li>获取负责人列表</li><li>绑定下拉组件</li></ol><ul><li>封装获取负责人的API-代码位置(<strong>src/api/department.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  获取部门负责人的数据</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getManagerList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/simple&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在组件初始化时调用-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getManagerList &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/department&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">managerList</span>: [], <span class="comment">// 存储负责人列表</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getManagerList</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="keyword">async</span> <span class="title function_">getManagerList</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">managerList</span> = <span class="keyword">await</span> <span class="title function_">getManagerList</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>select渲染下拉选项-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.managerId&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择负责人&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80%&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 下拉选项 循环 负责人数据 label表示显示的字段 value 存储字段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in managerList&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">:label</span>=<span class="string">&quot;item.username&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-添加子部门—记录部门"><a href="#10-添加子部门—记录部门" class="headerlink" title="10.添加子部门—记录部门"></a>10.添加子部门—记录部门</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022014985.png" alt="image.png"></p><blockquote><p>因为添加子部门是基于当前部门，所以需要记录当前是在哪个部门添加的</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022014547.png" alt="image.png"> </p><ul><li>点击添加子部门时传递id-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dropdown</span> @<span class="attr">command</span>=<span class="string">&quot;operateDept($event, data.id)&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>$event 实参 表示点击菜单传出来的类型</p></blockquote><ul><li>声明一个响应式数据记录该id-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span>  &#123;</span><br><span class="line">      <span class="attr">currentNodeId</span>: <span class="literal">null</span>, <span class="comment">// 存储当前点击的id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加子部门方法-记录id-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作部门方法</span></span><br><span class="line"> <span class="title function_">operateDept</span>(<span class="params">type, id</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (type === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">     <span class="comment">// 添加子部门</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">true</span> <span class="comment">// 显示弹层</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">currentNodeId</span> = id</span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>通过组件传递id-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;add-dept :current-node-id=<span class="string">&quot;currentNodeId&quot;</span> :show-dialog.<span class="property">sync</span>=<span class="string">&quot;showDialog&quot;</span>  /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>子组件接收id-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">currentNodeId</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-添加子部门—确定取消"><a href="#11-添加子部门—确定取消" class="headerlink" title="11.添加子部门—确定取消"></a>11.添加子部门—确定取消</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022014098.png" alt="image.png"></p><ul><li>封装新增部门的API-代码位置(<strong>src/api/department.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增组织</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addDepartment</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/company/department&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确定方法-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击确定时调用</span></span><br><span class="line">  <span class="title function_">btnOK</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">addDept</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> isOK =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">addDepartment</span>(&#123; ...<span class="variable language_">this</span>.<span class="property">formData</span>, <span class="attr">pid</span>: <span class="variable language_">this</span>.<span class="property">currentNodeId</span> &#125;)</span><br><span class="line">        <span class="comment">// 通知父组件更新</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;updateDepartment&#x27;</span>)</span><br><span class="line">        <span class="comment">// 提示消息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">`新增部门成功`</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">close</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>取消方法-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">addDept</span>.<span class="title function_">resetFields</span>() <span class="comment">// 重置表单</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:showDialog&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>父组件监听updateDepartment事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add-dept</span> @<span class="attr">updateDepartment</span>=<span class="string">&quot;getDepartment&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-编辑部门—弹出层获取数据"><a href="#12-编辑部门—弹出层获取数据" class="headerlink" title="12.编辑部门—弹出层获取数据"></a>12.编辑部门—弹出层获取数据</h2><blockquote><p>编辑部门和新增部门会共用一个组件，也就是add-dept组件要支持两种场景-新增场景-编辑场景</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015210.png" alt="image.png"></p><ul><li>封装获取部门详情的API-代码位置(<strong>src/api/department.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取部门详情</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getDepartmentDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/department/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击编辑时，弹出层，通过ref获取组件实例，调用获取详情的方法-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;add-dept ref=&quot;addDept&quot; :current-node-id=&quot;currentNodeId&quot; :show-dialog.sync=&quot;showDialog&quot; @updateDepartment=&quot;getDepartment&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>调用子组件方法-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作部门方法</span></span><br><span class="line">   <span class="title function_">operateDept</span>(<span class="params">type, id</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (type === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">       <span class="comment">// 添加子部门</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">true</span> <span class="comment">// 显示弹层</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">currentNodeId</span> = id</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;edit&#x27;</span>) &#123;</span><br><span class="line">       <span class="comment">// 编辑部门场景</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">true</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">currentNodeId</span> = id <span class="comment">// 记录id 要用它获取数据</span></span><br><span class="line">       <span class="comment">// 更新props- 异步动作</span></span><br><span class="line">       <span class="comment">// 直接调用了子组件的方法 同步的方法</span></span><br><span class="line">       <span class="comment">// 要在子组件获取数据</span></span><br><span class="line">       <span class="comment">// 父组件调用子组件的方法来获取数据</span></span><br><span class="line">       <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">addDept</span>.<span class="title function_">getDepartmentDetail</span>() <span class="comment">// this.$refs.addDept等同于子组件的this</span></span><br><span class="line">       &#125;)</span><br><span class="line">     &#125; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里为什么要用$nextTick，因为弹出层之后紧接着要调用子组件方法，第一次弹出层时，里面的组件还未完成渲染，所以要等到showDialog这个属性设置的数据完成渲染之后才进行调用</p></blockquote><ul><li>子组件提供获取详情的方法-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取组织的详情</span></span><br><span class="line">   <span class="keyword">async</span> <span class="title function_">getDepartmentDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">formData</span> = <span class="keyword">await</span> <span class="title function_">getDepartmentDetail</span>(<span class="variable language_">this</span>.<span class="property">currentNodeId</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="13-编辑部门—编辑表单校验"><a href="#13-编辑部门—编辑表单校验" class="headerlink" title="13.编辑部门—编辑表单校验"></a>13.编辑部门—编辑表单校验</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015342.png" alt="image.png"></p><blockquote><p>编辑部门表单校验和新增部门表单校验的区别就是编辑的数据已经在数据库存在了，必然是存在重复的</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015636.png" alt="image.png"></p><ul><li><p>编辑场景下排出自身-</p></li><li><p>检查部门编码-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">            <span class="comment">// 自定义校验模式</span></span><br><span class="line">            <span class="attr">validator</span>: <span class="title function_">async</span>(rule, value, callback) =&gt; &#123;</span><br><span class="line">              <span class="comment">// value就是输入的编码</span></span><br><span class="line">              <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">getDepartment</span>()</span><br><span class="line">              <span class="comment">// 判断是否是编辑模式</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span>) &#123;</span><br><span class="line">                <span class="comment">// 编辑场景</span></span><br><span class="line">                result = result.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span>)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// result数组中是否存在 value值</span></span><br><span class="line">              <span class="keyword">if</span> (result.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">code</span> === value)) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;部门中已经有该编码了&#x27;</span>))</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>检查部门名称-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">            <span class="comment">// 自定义校验模式</span></span><br><span class="line">            <span class="attr">validator</span>: <span class="title function_">async</span>(rule, value, callback) =&gt; &#123;</span><br><span class="line">              <span class="comment">// value就是输入的名称</span></span><br><span class="line">              <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">getDepartment</span>()</span><br><span class="line">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span>) &#123;</span><br><span class="line">                <span class="comment">// 编辑场景 排除自身</span></span><br><span class="line">                result = result.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span>)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// result数组中是否存在 value值</span></span><br><span class="line">              <span class="keyword">if</span> (result.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === value)) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;部门中已经有该名称了&#x27;</span>))</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="14-编辑部门—确认取消"><a href="#14-编辑部门—确认取消" class="headerlink" title="14.编辑部门—确认取消"></a>14.编辑部门—确认取消</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015695.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022043463.png" alt="image.png"></p><ul><li>封装更新部门的API-代码位置(<strong>src/api/department.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 更新部门</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateDepartment</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/department/<span class="subst">$&#123;data.id&#125;</span>`</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确认时区分当前时编辑还是新增场景-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击确定时调用</span></span><br><span class="line">   <span class="title function_">btnOK</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">addDept</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> isOK =&gt; &#123;</span><br><span class="line">       <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">         <span class="keyword">let</span> msg = <span class="string">&#x27;新增&#x27;</span></span><br><span class="line">         <span class="comment">// 通过formData中id</span></span><br><span class="line">         <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span>) &#123;</span><br><span class="line">           <span class="comment">// 编辑场景</span></span><br><span class="line">           msg = <span class="string">&#x27;更新&#x27;</span></span><br><span class="line">           <span class="keyword">await</span> <span class="title function_">updateDepartment</span>(<span class="variable language_">this</span>.<span class="property">formData</span>)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 新增场景</span></span><br><span class="line">           <span class="keyword">await</span> <span class="title function_">addDepartment</span>(&#123; ...<span class="variable language_">this</span>.<span class="property">formData</span>, <span class="attr">pid</span>: <span class="variable language_">this</span>.<span class="property">currentNodeId</span> &#125;)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 通知父组件更新</span></span><br><span class="line">         <span class="variable language_">this</span>.$emit(<span class="string">&#x27;updateDepartment&#x27;</span>)</span><br><span class="line">         <span class="comment">// 提示消息</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">`<span class="subst">$&#123;msg&#125;</span>部门成功`</span>)</span><br><span class="line">         <span class="variable language_">this</span>.<span class="title function_">close</span>()</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><ul><li>取消时重置数据-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 修改父组件的值 子传父</span></span><br><span class="line">     <span class="comment">// resetFields 只能重置在模板中绑定的数据</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">formData</span> = &#123;</span><br><span class="line">       <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门编码</span></span><br><span class="line">       <span class="attr">introduce</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门介绍</span></span><br><span class="line">       <span class="attr">managerId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门负责人id</span></span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 部门名称</span></span><br><span class="line">       <span class="attr">pid</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 父级部门的id</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">addDept</span>.<span class="title function_">resetFields</span>() <span class="comment">// 重置表单</span></span><br><span class="line">     <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:showDialog&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><ul><li>使用计算属性生成当前显示的弹层标题-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">showTitle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span> ? <span class="string">&#x27;编辑部门&#x27;</span> : <span class="string">&#x27;新增部门&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>弹层标题使用计算属性-代码位置(<strong>src/views/department/components/add-dept.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog :title=&quot;showTitle&quot; :visible=&quot;showDialog&quot; @close=&quot;close&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="15-删除部门"><a href="#15-删除部门" class="headerlink" title="15.删除部门"></a>15.删除部门</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015596.png" alt="image.png"></p><ul><li>封装删除部门的API-代码位置(<strong>src/api/department.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除部门</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delDepartment</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/company/department/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在删除场景下调用API删除-代码位置(<strong>src/views/department/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作部门方法</span></span><br><span class="line">  <span class="title function_">operateDept</span>(<span class="params">type, id</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 添加子部门</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">true</span> <span class="comment">// 显示弹层</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentNodeId</span> = id</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;edit&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 编辑部门场景</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">true</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentNodeId</span> = id <span class="comment">// 记录id 要用它获取数据</span></span><br><span class="line">      <span class="comment">// 更新props- 异步动作</span></span><br><span class="line">      <span class="comment">// 直接调用了子组件的方法 同步的方法</span></span><br><span class="line">      <span class="comment">// 要在子组件获取数据</span></span><br><span class="line">      <span class="comment">// 父组件调用子组件的方法来获取数据</span></span><br><span class="line">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">addDept</span>.<span class="title function_">getDepartmentDetail</span>() <span class="comment">// this.$refs.addDept等同于子组件的this</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 删除部门</span></span><br><span class="line">      <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;您确认要删除该部门吗&#x27;</span>).<span class="title function_">then</span>(<span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">delDepartment</span>(id)</span><br><span class="line">        <span class="comment">// 提示消息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除部门成功&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getDepartment</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="五、角色管理"><a href="#五、角色管理" class="headerlink" title="五、角色管理"></a>五、角色管理</h1><h2 id="1-搭建页面结构"><a href="#1-搭建页面结构" class="headerlink" title="1.搭建页面结构"></a>1.搭建页面结构</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015287.png" alt="image.png"></p><ul><li>搭建角色管理的页面结构-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">      &lt;!-- 角色管理内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;role-operate&quot;&gt;</span><br><span class="line">        &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot;&gt;添加角色&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 放置table组件 --&gt;</span><br><span class="line">      &lt;el-table&gt;</span><br><span class="line">        &lt;!-- 放置列 --&gt;</span><br><span class="line">        &lt;el-table-column align=&quot;center&quot; width=&quot;200&quot; label=&quot;角色&quot; /&gt;</span><br><span class="line">        &lt;el-table-column align=&quot;center&quot; width=&quot;200&quot; label=&quot;启用&quot; /&gt;</span><br><span class="line">        &lt;el-table-column align=&quot;center&quot; label=&quot;描述&quot; /&gt;</span><br><span class="line">        &lt;el-table-column align=&quot;center&quot; label=&quot;操作&quot; /&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">      &lt;!-- 放置分页组件 --&gt;</span><br><span class="line">      &lt;el-row type=&quot;flex&quot; style=&quot;height:60px&quot; align=&quot;middle&quot; justify=&quot;end&quot;&gt;</span><br><span class="line">        &lt;!-- 放置分页组件 --&gt;</span><br><span class="line">        &lt;el-pagination layout=&quot;prev, pager, next&quot; /&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>样式-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.role-operate</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-获取数据"><a href="#2-获取数据" class="headerlink" title="2.获取数据"></a>2.获取数据</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015841.png" alt="image.png"> </p><ul><li>封装获取角色API-代码位置(<strong>src/api/role.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 获取角色列表</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getRoleList</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/role&#x27;</span>,</span><br><span class="line">    params <span class="comment">// 查询参数</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在初始化时调用API-赋值给数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getRoleList &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/role&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Role&#x27;</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Role&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getRoleList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; rows &#125; = <span class="keyword">await</span> <span class="title function_">getRoleList</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span> = rows <span class="comment">// 赋值数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定表格属性-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 放置列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">label</span>=<span class="string">&quot;启用&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-表格自定义结构"><a href="#3-表格自定义结构" class="headerlink" title="3.表格自定义结构"></a>3.表格自定义结构</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022015037.png" alt="image.png"></p><ul><li>自定义启用列和操作列的结构-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">label</span>=<span class="string">&quot;启用&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 自定义列结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>  &#123;&#123; row.state === 1 ? &quot;已启用&quot; : row.state === 0 ? &quot;未启用&quot; : &quot;无&quot; &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义操作列结构-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 放置操作按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>分配权限<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-分页功能"><a href="#4-分页功能" class="headerlink" title="4.分页功能"></a>4.分页功能</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022016862.png" alt="image.png"><br>分页功能</p><ul><li>展示页码</li><li>切换分页获取数据</li></ul><p>分页组件属性</p><ul><li>当前页码</li><li>每页条数</li><li>总数</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022016380.png" alt="image.png"> </p><ul><li>定义分页信息-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span>  &#123;</span><br><span class="line">      <span class="attr">pageParams</span>: &#123;</span><br><span class="line">          <span class="attr">page</span>: <span class="number">1</span>, <span class="comment">// 第几页</span></span><br><span class="line">          <span class="attr">pagesize</span>: <span class="number">5</span>, <span class="comment">// 每页多少条</span></span><br><span class="line">          <span class="attr">total</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定分页信息-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-size</span>=<span class="string">&quot;pageParams.pagesize&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:current-page</span>=<span class="string">&quot;pageParams.page&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;pageParams.total&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">current-change</span>=<span class="string">&quot;changePage&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>初始化时将总数赋值-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getRoleList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; rows, total &#125; = <span class="keyword">await</span> <span class="title function_">getRoleList</span>(<span class="variable language_">this</span>.<span class="property">pageParams</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">list</span> = rows <span class="comment">// 赋值数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pageParams</span>.<span class="property">total</span> = total</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>切换分页时，获取对应页码的数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切换分页时 请求新的数据</span></span><br><span class="line"><span class="title function_">changePage</span>(<span class="params">newPage</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pageParams</span>.<span class="property">page</span> = newPage <span class="comment">// 赋值当前页码</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-新增功能弹层"><a href="#5-新增功能弹层" class="headerlink" title="5.新增功能弹层"></a>5.新增功能弹层</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022016001.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022016010.png" alt="image.png"></p><ul><li>放置弹层组件-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">title</span>=<span class="string">&quot;新增角色&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;showDialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表单内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;角色名称&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">style</span>=<span class="string">&quot;width:300px&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;启用&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;角色描述&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">:rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:300px&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>声明变量控制弹层显示-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span>  &#123;</span><br><span class="line">      <span class="attr">showDialog</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击按钮弹出层-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDialog = true&quot;</span>&gt;</span>添加角色<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>有同学可能会问，为啥组织架构要新增和编辑要单独封装一个组件，而角色管理不用呢?这里面有什么原因和讲究吗？ 其实在企业开发过程中，封装组件并不是必须的，当一个业务或者需求明确，并且会有复用的场景下，封装组件会更佳规范一些，而有的企业为了提升开发效率，速度优先, 不封装组件的情况也是很常见的。</p></blockquote><h2 id="6-表单数据校验"><a href="#6-表单数据校验" class="headerlink" title="6.表单数据校验"></a>6.表单数据校验</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022016081.png" alt="image.png"></p><ul><li>声明数据和规则-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">roleForm</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="number">0</span> <span class="comment">// 默认未1启用 关闭 0 打开1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;角色名称不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;],</span><br><span class="line">        <span class="attr">description</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;角色描述不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定表单校验和数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;roleForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;roleForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色名称&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;roleForm.name&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:300px&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;启用&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 如果不需要校验 就不需要写 prop属性 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;roleForm.state&quot;</span> <span class="attr">:active-value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:inactive-value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色描述&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;roleForm.description&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">:rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:300px&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="7-新增角色—确定取消"><a href="#7-新增角色—确定取消" class="headerlink" title="7.新增角色—确定取消"></a>7.新增角色—确定取消</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022016352.png" alt="image.png"></p><ul><li>封装新增角色的API-代码位置(<strong>src/api/role.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** **</span></span><br><span class="line"><span class="comment"> * 新增角色</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addRole</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/role&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确定和取消方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnOK</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">roleForm</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> isOK =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">addRole</span>(<span class="variable language_">this</span>.<span class="property">roleForm</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;新增角色成功&#x27;</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>()</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">btnCancel</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="title function_">btnCancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">roleForm</span>.<span class="title function_">resetFields</span>() <span class="comment">// 重置表单数据</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">false</span> <span class="comment">// 关闭弹层</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>弹层绑定关闭方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">title</span>=<span class="string">&quot;新增角色&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;showDialog&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;btnCancel&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-编辑角色—进入行内编辑"><a href="#8-编辑角色—进入行内编辑" class="headerlink" title="8.编辑角色—进入行内编辑"></a>8.编辑角色—进入行内编辑</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022016171.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/8435673/1677752762094-a0a67f8f-852d-4562-b351-e13bb19d5546.png#averageHue=%23c6daec&amp;clientId=u437893ff-a4ad-4&amp;from=paste&amp;height=124&amp;id=ue23dbb1e&amp;name=image.png&amp;originHeight=248&amp;originWidth=2046&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=37554&amp;status=done&amp;style=none&amp;taskId=u094ccf42-5d1a-4fdc-bf33-a8c74276aea&amp;title=&amp;width=1023" alt="image.png"></p><ul><li>获取数据之后针对每个数据定义标识-使用$set-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 针对每一行数据添加一个编辑标记</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// item.isEdit = false // 添加一个属性 初始值为false</span></span><br><span class="line">       <span class="comment">// 数据响应式的问题  数据变化 视图更新</span></span><br><span class="line">       <span class="comment">// 添加的动态属性 不具备响应式特点</span></span><br><span class="line">       <span class="comment">// this.$set(目标对象, 属性名称, 初始值) 可以针对目标对象 添加的属性 添加响应式</span></span><br><span class="line">       <span class="variable language_">this</span>.$set(item, <span class="string">&#x27;isEdit&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>为什么不使用item.isEdit = false , 因为动态添加的属性不具备响应式的特点，如果想要具备响应式，可以使用$set</p></blockquote><ul><li>点击编辑时，将当前行的标记isEdit设置为true-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column align=&quot;center&quot; label=&quot;操作&quot;&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">        &lt;!-- 非编辑状态 --&gt;</span><br><span class="line">        &lt;el-button size=&quot;mini&quot; type=&quot;text&quot;&gt;分配权限&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button size=&quot;mini&quot; type=&quot;text&quot; @click=&quot;btnEditRow(row)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button size=&quot;mini&quot; type=&quot;text&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><ul><li>点击编辑的方法-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击编辑行</span></span><br><span class="line"><span class="title function_">btnEditRow</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  row.<span class="property">isEdit</span> = <span class="literal">true</span> <span class="comment">// 改变行的编辑状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表格列中根据当前的isEdit标记-渲染结构-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 条件判断 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-if</span>=<span class="string">&quot;row.isEdit&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; row.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">label</span>=<span class="string">&quot;启用&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 自定义列结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-if</span>=<span class="string">&quot;row.isEdit&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>  &#123;&#123; row.state === 1 ? &quot;已启用&quot; : row.state === 0 ? &quot;未启用&quot; : &quot;无&quot; &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-if</span>=<span class="string">&quot;row.isEdit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; row.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;row.isEdit&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 编辑状态 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 非编辑状态 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>分配权限<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnEditRow(row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>$set的应用</p></blockquote><ul><li>this.$set(目标对象, 属性名称, 初始值 ) </li><li>等价于 Vue.set(目标对象, 属性名称, 初始值)</li><li>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。</li></ul><h2 id="9-行内编辑—数据缓存"><a href="#9-行内编辑—数据缓存" class="headerlink" title="9.行内编辑—数据缓存"></a>9.行内编辑—数据缓存</h2><blockquote><p>为什么要做数据缓存？</p></blockquote><p>答： 因为编辑时，可以取消会滚到之前的状态，所以编辑时的数据是临时的数据。</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022017750.png" alt="image.png"><br>如图，editRow的数据是针对当前行的数据做了一份拷贝，针对这个拷贝，我们可以随意修改。</p><ul><li>初始化时缓存数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// item.isEdit = false // 添加一个属性 初始值为false</span></span><br><span class="line">      <span class="comment">// 数据响应式的问题  数据变化 视图更新</span></span><br><span class="line">      <span class="comment">// 添加的动态属性 不具备响应式特点</span></span><br><span class="line">      <span class="comment">// this.$set(目标对象, 属性名称, 初始值) 可以针对目标对象 添加的属性 添加响应式</span></span><br><span class="line">      <span class="variable language_">this</span>.$set(item, <span class="string">&#x27;isEdit&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">      <span class="variable language_">this</span>.$set(item, <span class="string">&#x27;editRow&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">state</span>: item.<span class="property">state</span>,</span><br><span class="line">        <span class="attr">description</span>: item.<span class="property">description</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>点击编辑时更新缓存数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnEditRow</span>(<span class="params">row</span>) &#123;</span><br><span class="line">      row.<span class="property">isEdit</span> = <span class="literal">true</span> <span class="comment">// 改变行的编辑状态</span></span><br><span class="line">      <span class="comment">// 更新缓存数据</span></span><br><span class="line">      row.<span class="property">editRow</span>.<span class="property">name</span> = row.<span class="property">name</span></span><br><span class="line">      row.<span class="property">editRow</span>.<span class="property">state</span> = row.<span class="property">state</span></span><br><span class="line">      row.<span class="property">editRow</span>.<span class="property">description</span> = row.<span class="property">description</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将编辑时的表单双向绑定缓存数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 条件判断 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-if</span>=<span class="string">&quot;row.isEdit&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;row.editRow.name&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; row.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">label</span>=<span class="string">&quot;启用&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自定义列结构 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开 1 关 0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-if</span>=<span class="string">&quot;row.isEdit&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;row.editRow.state&quot;</span> <span class="attr">:active-value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:inactive-value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>  &#123;&#123; row.state === 1 ? &quot;已启用&quot; : row.state === 0 ? &quot;未启用&quot; : &quot;无&quot; &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-if</span>=<span class="string">&quot;row.isEdit&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;row.editRow.description&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; row.description &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-编辑角色—确定取消"><a href="#10-编辑角色—确定取消" class="headerlink" title="10.编辑角色—确定取消"></a>10.编辑角色—确定取消</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022017308.png" alt="image.png"></p><ul><li>封装更新角色信息的API-代码位置(<strong>src/api/role.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新角色</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateRole</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/role/<span class="subst">$&#123;data.id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确定方法-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">&quot;primary&quot;</span> size=<span class="string">&quot;mini&quot;</span> @click=<span class="string">&quot;btnEditOK(row)&quot;</span>&gt;确定&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击确定时触发</span></span><br><span class="line">    <span class="keyword">async</span>  <span class="title function_">btnEditOK</span>(<span class="params">row</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (row.<span class="property">editRow</span>.<span class="property">name</span> &amp;&amp; row.<span class="property">editRow</span>.<span class="property">description</span>) &#123;</span><br><span class="line">        <span class="comment">// 下一步操作</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">updateRole</span>(&#123; ...row.<span class="property">editRow</span>, <span class="attr">id</span>: row.<span class="property">id</span> &#125;)</span><br><span class="line">        <span class="comment">// 更新成功</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;更新角色成功&#x27;</span>)</span><br><span class="line">        <span class="comment">// 更新显示数据  退出编辑状态</span></span><br><span class="line">        <span class="comment">// row.name = row.editRow.name // eslint的一校验 误判</span></span><br><span class="line">        <span class="comment">// Object.assign(target, source)</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(row, &#123;</span><br><span class="line">          ...row.<span class="property">editRow</span>,</span><br><span class="line">          <span class="attr">isEdit</span>: <span class="literal">false</span> <span class="comment">// 退出编辑模式</span></span><br><span class="line">        &#125;) <span class="comment">// 规避eslint的误判</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;角色和描述不能为空&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意： 这里既然更新成功了，要把缓存数据回显到页面上，并且关闭编辑模式</p></blockquote><ul><li>取消方法-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button size=&quot;mini&quot; @click=&quot;row.isEdit = false&quot;&gt;取消&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h2 id="11-删除角色"><a href="#11-删除角色" class="headerlink" title="11.删除角色"></a>11.删除角色</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022017063.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022017112.png" alt="image.png"></p><ul><li>封装删除角色的API-代码位置(<strong>src/api/role.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 删除角色</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delRole</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/role/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在删除位置加入气泡框-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-popconfirm</span> <span class="attr">title</span>=<span class="string">&quot;这是一段内容确定删除吗？&quot;</span> @<span class="attr">onConfirm</span>=<span class="string">&quot;confirmDel(row.id)&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">&quot;reference&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:10px&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-popconfirm</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里element-ui文档有点问题，el-popconfirm的确认事件是onConfirm，但是文档上写的是confirm事件，这里需要注意</p></blockquote><ul><li>删除方法-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">async</span>  <span class="title function_">confirmDel</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">delRole</span>(id) <span class="comment">// 后端删除</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除角色成功&#x27;</span>)</span><br><span class="line">      <span class="comment">// 删除的如果是最后一个</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span> === <span class="number">1</span>) <span class="variable language_">this</span>.<span class="property">pageParams</span>.<span class="property">page</span>--</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、员工管理"><a href="#六、员工管理" class="headerlink" title="六、员工管理"></a>六、员工管理</h1><h2 id="1-页面结构"><a href="#1-页面结构" class="headerlink" title="1.页面结构"></a>1.页面结构</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022017858.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022017147.png" alt="image.png"> </p><ul><li>基本的页面结构-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;el-input style=&quot;margin-bottom:10px&quot; type=&quot;text&quot; prefix-icon=&quot;el-icon-search&quot; size=&quot;small&quot; placeholder=&quot;输入员工姓名全员搜索&quot; /&gt;</span><br><span class="line">        &lt;!-- 树形组件 --&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;el-row class=&quot;opeate-tools&quot; type=&quot;flex&quot; justify=&quot;end&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot;&gt;添加员工&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot;&gt;excel导入&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot;&gt;excel导出&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;!-- 表格组件 --&gt;</span><br><span class="line">        &lt;!-- 分页 --&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Employee&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.app-container &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">  display: flex;</span><br><span class="line">  .left &#123;</span><br><span class="line">    width: 280px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    border-right: 1px solid #eaeef4;</span><br><span class="line">  &#125;</span><br><span class="line">  .right &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    .opeate-tools &#123;</span><br><span class="line">      margin:10px ;</span><br><span class="line">    &#125;</span><br><span class="line">    .username &#123;</span><br><span class="line">      height: 30px;</span><br><span class="line">      width: 30px;</span><br><span class="line">      line-height: 30px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">      color: #fff;</span><br><span class="line">      background: #04C9BE;</span><br><span class="line">      font-size: 12px;</span><br><span class="line">      display:inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-左侧树的加载"><a href="#2-左侧树的加载" class="headerlink" title="2.左侧树的加载"></a>2.左侧树的加载</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022017747.png" alt="image.png"> </p><ul><li>定义树组件需要的数据-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">depts</span>: [], <span class="comment">// 组织数据</span></span><br><span class="line">      <span class="attr">defaultProps</span>: &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: <span class="string">&#x27;children&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>放置树形组件-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tree</span><br><span class="line">          :data=&quot;depts&quot;</span><br><span class="line">          :props=&quot;defaultProps&quot;</span><br><span class="line">          default-expand-all</span><br><span class="line">          :expand-on-click-node=&quot;false&quot;</span><br><span class="line">          highlight-current</span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure><ul><li>初始化时加载数据转化树形-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getDepartment</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getDepartment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 递归方法 将列表转化成树形</span></span><br><span class="line">    <span class="comment">// let result = await getDepartment()</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">depts</span> = <span class="title function_">transListToTreeData</span>(<span class="keyword">await</span> <span class="title function_">getDepartment</span>(), <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-选中首个节点"><a href="#3-选中首个节点" class="headerlink" title="3.选中首个节点"></a>3.选中首个节点</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018909.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018606.png" alt="image.png"></p><ul><li>在data中声明一个记录id的参数-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span>  &#123;</span><br><span class="line">    <span class="comment">// 存储查询参数</span></span><br><span class="line">      <span class="attr">queryParams</span>: &#123;</span><br><span class="line">        <span class="attr">departmentId</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么要放在queryParams中，因为后面的查询会有很多查询条件，到时候查询条件都会聚合到一起，所以使用一个公共的对象来管理更方便和合适</p></blockquote><ul><li>初始化时首个id节点，并且选中-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getDepartment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 递归方法 将列表转化成树形</span></span><br><span class="line">      <span class="comment">// let result = await getDepartment()</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">depts</span> = <span class="title function_">transListToTreeData</span>(<span class="keyword">await</span> <span class="title function_">getDepartment</span>(), <span class="number">0</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">departmentId</span> = <span class="variable language_">this</span>.<span class="property">depts</span>[<span class="number">0</span>].<span class="property">id</span></span><br><span class="line">      <span class="comment">// 设置选中节点</span></span><br><span class="line">      <span class="comment">// 树组件渲染是异步的 等到更新完毕</span></span><br><span class="line">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 此时意味着树渲染完毕</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">deptTree</span>.<span class="title function_">setCurrentKey</span>(<span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">departmentId</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么使用$nextTick，因为我们设置完树形之后立刻选中首个节点，此时更新还没有完成，必须等待更新完成后，再去选中首个节点，所以需要使用$nextTick</p></blockquote><ul><li>监听树组件的节点切换事件-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tree</span></span></span><br><span class="line"><span class="tag">         <span class="attr">ref</span>=<span class="string">&quot;deptTree&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">node-key</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:data</span>=<span class="string">&quot;depts&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:props</span>=<span class="string">&quot;defaultProps&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:expand-on-click-node</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">highlight-current</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">current-change</span>=<span class="string">&quot;selectNode&quot;</span></span></span><br><span class="line"><span class="tag"> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里需要明白，需要给定node-key属性，否则setCurrentKey方法不知道设置的是哪个字段的值</p></blockquote><ul><li>切换节点时再次记录id-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">selectNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">departmentId</span> = node.<span class="property">id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-员工列表结构"><a href="#4-员工列表结构" class="headerlink" title="4.员工列表结构"></a>4.员工列表结构</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018205.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/8435673/1677825898302-a01e05a6-8b83-47fd-901f-7030b9750138.png#averageHue=%23fefefe&amp;clientId=u37856cab-f36d-4&amp;from=paste&amp;height=45&amp;id=u3b973573&amp;name=image.png&amp;originHeight=235&amp;originWidth=1280&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=1205451&amp;status=done&amp;style=none&amp;taskId=u457f4e2e-c2f6-49b3-8924-d0ad8cceff4&amp;title=&amp;width=243" alt="image.png"></p><ul><li>右侧列表页面结构-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;手机号&quot;</span> <span class="attr">sortable</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;工号&quot;</span> <span class="attr">sortable</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;聘用形式&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;部门&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;入职时间&quot;</span> <span class="attr">sortable</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;280px&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>角色<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">style</span>=<span class="string">&quot;height: 60px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;total,prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">     /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-获取员工数据"><a href="#5-获取员工数据" class="headerlink" title="5.获取员工数据"></a>5.获取员工数据</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018137.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018428.png" alt="image.png"> </p><blockquote><p>第一次加载之后 或者是切换节点之后，都要去根据点击的节点去查询员工的数据</p></blockquote><ul><li>封装获取员工数据的API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmployeeList</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user&#x27;</span>,</span><br><span class="line">    params <span class="comment">// 地址参数 查询参数</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明一个list数据进行接受list-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">list</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化后获取右侧表格数据-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getDepartment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 递归方法 将列表转化成树形</span></span><br><span class="line">      <span class="comment">// let result = await getDepartment()</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">depts</span> = <span class="title function_">transListToTreeData</span>(<span class="keyword">await</span> <span class="title function_">getDepartment</span>(), <span class="number">0</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">departmentId</span> = <span class="variable language_">this</span>.<span class="property">depts</span>[<span class="number">0</span>].<span class="property">id</span></span><br><span class="line">      <span class="comment">// 设置选中节点</span></span><br><span class="line">      <span class="comment">// 树组件渲染是异步的 等到更新完毕</span></span><br><span class="line">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 此时意味着树渲染完毕</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">deptTree</span>.<span class="title function_">setCurrentKey</span>(<span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">departmentId</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 这个时候参数 记录了id</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getEmployeeList</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取员工列表的方法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getEmployeeList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; rows &#125; = <span class="keyword">await</span> <span class="title function_">getEmployeeList</span>(<span class="variable language_">this</span>.<span class="property">queryParams</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span> = rows</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>切换节点时，获取右侧表格数据-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">selectNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">departmentId</span> = node.<span class="property">id</span> <span class="comment">// 重新记录了参数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getEmployeeList</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>绑定表格-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;staffPhoto&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">label</span>=<span class="string">&quot;手机号&quot;</span> <span class="attr">sortable</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;workNumber&quot;</span> <span class="attr">label</span>=<span class="string">&quot;工号&quot;</span> <span class="attr">sortable</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;formOfEmployment&quot;</span> <span class="attr">label</span>=<span class="string">&quot;聘用形式&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;departmentName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;部门&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;timeOfEntry&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职时间&quot;</span> <span class="attr">sortable</span> /&gt;</span></span><br><span class="line">          ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-头像和聘用形式的处理"><a href="#6-头像和聘用形式的处理" class="headerlink" title="6.头像和聘用形式的处理"></a>6.头像和聘用形式的处理</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018468.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018322.png" alt="image.png"> </p><ul><li>头像的设置-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;staffPhoto&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-avatar</span> <span class="attr">v-if</span>=<span class="string">&quot;row.staffPhoto&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;row.staffPhoto&quot;</span> <span class="attr">:size</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span>&#123;&#123; row.username?.charAt(0) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>聘用形式的处理-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;formOfEmployment&quot;</span> <span class="attr">label</span>=<span class="string">&quot;聘用形式&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;row.formOfEmployment === 1&quot;</span>&gt;</span>正式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;row.formOfEmployment === 2&quot;</span>&gt;</span>非正式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>无<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-员工分页处理"><a href="#7-员工分页处理" class="headerlink" title="7.员工分页处理"></a>7.员工分页处理</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022019138.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022018888.png" alt="image.png"></p><ul><li>定义分页参数-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">queryParams</span>: &#123;</span><br><span class="line">        <span class="attr">departmentId</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">page</span>: <span class="number">1</span>, <span class="comment">// 当前页码</span></span><br><span class="line">        <span class="attr">pagesize</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">// 记录员工的总数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定分页参数-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;total,prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:current-page</span>=<span class="string">&quot;queryParams.page&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-size</span>=<span class="string">&quot;queryParams.pagesize&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;changePage&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>切换页码事件-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切换页码</span></span><br><span class="line">    <span class="title function_">changePage</span>(<span class="params">newPage</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">page</span> = newPage <span class="comment">// 赋值新页码</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getEmployeeList</span>() <span class="comment">// 查询数据</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>切换部门时，查询第一页数据-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">selectNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">departmentId</span> = node.<span class="property">id</span> <span class="comment">// 重新记录了参数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">page</span> = <span class="number">1</span> <span class="comment">// 设置第一页</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getEmployeeList</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>设置ElementUI的语言为中文-代码位置(<strong>src/main.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br></pre></td></tr></table></figure><h2 id="8-员工模糊搜索"><a href="#8-员工模糊搜索" class="headerlink" title="8.员工模糊搜索"></a>8.员工模糊搜索</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022019637.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022046423.png" alt="image.png"> </p><ul><li>设置模糊搜索的参数字段-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">queryParams</span>: &#123;</span><br><span class="line">        <span class="attr">departmentId</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">page</span>: <span class="number">1</span>, <span class="comment">// 当前页码</span></span><br><span class="line">        <span class="attr">pagesize</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">keyword</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 模糊搜索字段</span></span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>双向绑定input输入框，监听值改变事件-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;queryParams.keyword&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;margin-bottom:10px&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">prefix-icon</span>=<span class="string">&quot;el-icon-search&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;输入员工姓名全员搜索&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">input</span>=<span class="string">&quot;changeValue&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里监听的事件是input，有同学可能会问，为什么不用change事件，注意change事件是离开焦点触发，input是只要内容发生变化就会触发，所以这里使用input更符合使用场景</p></blockquote><ul><li>值改变查询数据-支持防抖查询-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">changeValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 单位时间内只执行最后一次</span></span><br><span class="line">      <span class="comment">// this的实例上赋值了一个timer的属性</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>) <span class="comment">// 清理上一次的定时器</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">page</span> = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getEmployeeList</span>()</span><br><span class="line">      &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-导出excel"><a href="#9-导出excel" class="headerlink" title="9.导出excel"></a>9.导出excel</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022019872.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022046324.png" alt="image.png"></p><ul><li>导出员工接口返回的是二进制流</li><li>axios配置responseType为blob接收二进制流文件为Blob格式</li><li><p>安装file-saver包，实现下载Blob文件  yarn add file-saver</p></li><li><p>封装导出员工excel的API-代码位置(<strong>src/api/employee.js</strong>)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出员工的excel</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exportEmployee</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/export&#x27;</span>,</span><br><span class="line">    <span class="comment">// 改变接收数据的类型</span></span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span> <span class="comment">// 使用blob接收二进制文件流</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拦截器判断是不是blob类型，如果是直接返回数据，不再进行解构-代码位置(<strong>src/utils/request.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// axios默认包裹了data</span></span><br><span class="line">  <span class="comment">// 判断是不是Blob</span></span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span> <span class="keyword">instanceof</span> <span class="title class_">Blob</span>) <span class="keyword">return</span> response.<span class="property">data</span> <span class="comment">// 返回了Blob对象</span></span><br><span class="line">  <span class="keyword">const</span> &#123; data, message, success &#125; = response.<span class="property">data</span> <span class="comment">// 默认json格式</span></span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>, message &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(message))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>安装file-saver</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i file-saver</span><br><span class="line">$ yarn add file-saver</span><br></pre></td></tr></table></figure><ul><li>点击按钮调用接口，使用file-saver将blob转化成文件下载-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button size=<span class="string">&quot;mini&quot;</span> @click=<span class="string">&quot;exportEmployee&quot;</span>&gt;excel导出&lt;/el-button&gt;</span><br><span class="line"> <span class="keyword">import</span> <span class="title class_">FileSaver</span> <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"> <span class="keyword">import</span> &#123; exportEmployee &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/employee&#x27;</span></span><br><span class="line">  <span class="keyword">async</span>  <span class="title function_">exportEmployee</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">exportEmployee</span>() <span class="comment">// 导出所有的员工接口</span></span><br><span class="line">      <span class="comment">// console.log(result) // 使用一个npm包 直接将blob文件下载到本地 file-saver</span></span><br><span class="line">      <span class="comment">// FileSaver.saveAs(blob对象,文件名称)</span></span><br><span class="line">      <span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(result, <span class="string">&#x27;员工信息表.xlsx&#x27;</span>) <span class="comment">// 下载文件</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="10-excel组件封装"><a href="#10-excel组件封装" class="headerlink" title="10.excel组件封装"></a>10.excel组件封装</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022019604.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022019648.png" alt="image.png"></p><ul><li>创建员工导入组件-代码位置(<strong>src/views/employee/components/import-excel.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;员工导入&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:visible</span>=<span class="string">&quot;showExcelDialog&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">close</span>=<span class="string">&quot;$emit(&#x27;update:showExcelDialog&#x27;, false)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-excel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">&quot;excel-upload-input&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;excel-upload-input&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">accept</span>=<span class="string">&quot;.xlsx, .xls&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drop&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>下载导入模板<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>将文件拖到此处或</span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- update:props属性名，值 直接修改 .sync修饰符的属性值 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;update:showExcelDialog&#x27;, false)&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">showExcelDialog</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.upload-excel</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">360px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#697086</span>;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.excel-upload-input</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: -<span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.btn-upload</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.drop</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#dcdfe6</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.drop</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#bbb</span>;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">color</span>: <span class="number">#c0c4cc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在员工管理页面-导入该组件并注册使用-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ImportExcel</span> <span class="keyword">from</span> <span class="string">&#x27;./components/import-excel.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ImportExcel</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明一个控制该弹层的变量-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span>  &#123;</span><br><span class="line">      <span class="attr">showExcelDialog</span>: <span class="literal">false</span> <span class="comment">// 控制excel的弹层显示和隐藏</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用该组件，并且应用变量-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import-excel</span> <span class="attr">:show-excel-dialog.sync</span>=<span class="string">&quot;showExcelDialog&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>点击员工导入弹出层-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showExcelDialog = true&quot;</span>&gt;</span>excel导入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11-下载导入模板"><a href="#11-下载导入模板" class="headerlink" title="11.下载导入模板"></a>11.下载导入模板</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022019133.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022020868.png" alt="image.png"></p><ul><li>封装下载模板的API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载员工导入模版</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getExportTemplate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/import/template&#x27;</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span> <span class="comment">// 二进制文件流</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>点击按钮进行下载模板-代码位置(<strong>src/views/employee/components/import-excel.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;getTemplate&quot;</span>&gt;下载导入模板&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getTemplate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getExportTemplate</span>()</span><br><span class="line">    <span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(data, <span class="string">&#x27;员工导入模版.xlsx&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-员工导入—上传excel"><a href="#12-员工导入—上传excel" class="headerlink" title="12.员工导入—上传excel"></a>12.员工导入—上传excel</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022020961.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022020439.png" alt="image.png"></p><ul><li>封装上传excel的API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传用户的excel</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">uploadExcel</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/import&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data <span class="comment">// form-data类型 因为要上传文件类型</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击上传-弹出文件选择框-代码位置(<strong>src/views/employee/components/import-excel.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;handleUpload&quot;</span>&gt;点击上传&lt;/el-button&gt;</span><br><span class="line"><span class="title function_">handleUpload</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;excel-upload-input&#x27;</span>].<span class="title function_">click</span>() <span class="comment">// this.$refs.属性名 和 this.$refs[属性名] 等价</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>监听文件改变-上传excel-关闭弹层-代码位置(<strong>src/views/employee/components/import-excel.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;input</span><br><span class="line">          ref=<span class="string">&quot;excel-upload-input&quot;</span></span><br><span class="line">          <span class="keyword">class</span>=<span class="string">&quot;excel-upload-input&quot;</span></span><br><span class="line">          type=<span class="string">&quot;file&quot;</span></span><br><span class="line">          accept=<span class="string">&quot;.xlsx, .xls&quot;</span></span><br><span class="line">          @change=<span class="string">&quot;uploadChange&quot;</span></span><br><span class="line">  &gt;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">uploadChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">files</span>)</span><br><span class="line">      <span class="comment">// 调用上传接口</span></span><br><span class="line">      <span class="comment">// uploadExcel() // 参数  form-data 需要文件file</span></span><br><span class="line">      <span class="keyword">const</span> files = event.<span class="property">target</span>.<span class="property">files</span> <span class="comment">// input的文件列表</span></span><br><span class="line">      <span class="keyword">if</span> (files.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 大于0 说明有文件要上传</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">        <span class="comment">// file: file类型</span></span><br><span class="line">        data.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, files[<span class="number">0</span>]) <span class="comment">// 将文件参数加入到formData中</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">uploadExcel</span>(data)</span><br><span class="line">          <span class="comment">// 成功</span></span><br><span class="line">          <span class="variable language_">this</span>.$emit(<span class="string">&#x27;uploadSuccess&#x27;</span>) <span class="comment">// 通知父组件 我上传成功</span></span><br><span class="line">          <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:showExcelDialog&#x27;</span>, <span class="literal">false</span>) <span class="comment">// 关闭弹层</span></span><br><span class="line">          <span class="comment">// this.$refs[&#x27;excel-upload-input&#x27;].value = &#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">// 捕获失败</span></span><br><span class="line">          <span class="comment">// this.$refs[&#x27;excel-upload-input&#x27;].value = &#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 不论成功或者失败都会执行finally</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;excel-upload-input&#x27;</span>].<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里为什么不管成功或者失败都要清空文件选择器中的内容呢？ 因为不论成功或者失败，再点击上传都会去选择一个新的excel，所以这里使用finally等到最后，将内容清空。</p></blockquote><ul><li>父组件需要监听上传成功的事件-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import-excel</span> <span class="attr">:show-excel-dialog.sync</span>=<span class="string">&quot;showExcelDialog&quot;</span> @<span class="attr">uploadSuccess</span>=<span class="string">&quot;getEmployeeList&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-删除员工"><a href="#13-删除员工" class="headerlink" title="13.删除员工"></a>13.删除员工</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022020622.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022020259.png" alt="image.png"></p><ul><li>封装删除员工的API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除员工</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delEmployee</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/user/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>放置气泡框确认框-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-popconfirm</span> <span class="attr">title</span>=<span class="string">&quot;确认删除该行数据吗？&quot;</span>  @<span class="attr">onConfirm</span>=<span class="string">&quot;confirmDel(row.id)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">&quot;reference&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:10px&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-popconfirm</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>删除方法实现-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除员工方法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">confirmDel</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">delEmployee</span>(id)</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">page</span> &gt; <span class="number">1</span>) <span class="variable language_">this</span>.<span class="property">queryParams</span>.<span class="property">page</span>--</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getEmployeeList</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除员工成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="七、员工详情"><a href="#七、员工详情" class="headerlink" title="七、员工详情"></a>七、员工详情</h1><h2 id="1-员工详情和路由"><a href="#1-员工详情和路由" class="headerlink" title="1.员工详情和路由"></a>1.员工详情和路由</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022020048.png" alt="image.png"> </p><ul><li>(拷贝)创建一个员工详情页面-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dashboard-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;edit-form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;userForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;220px&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 姓名 部门 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 工号 入职时间 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;工号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;workNumber&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--手机 聘用形式  --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;手机&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;mobile&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;部门&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;departmentId&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 放置及联部门组件 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;聘用形式&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;formOfEmployment&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职时间&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;timeOfEntry&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;转正时间&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 员工照片 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;员工头像&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 放置上传图片 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 保存个人信息 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:220px&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>保存更新<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.edit-form</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.inputW</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">380px</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置员工详情的路由信息-代码位置(<strong>src/router/modules/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> layout <span class="keyword">from</span> <span class="string">&#x27;@/layout&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: layout,</span><br><span class="line">  <span class="attr">children</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;employee&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/employee&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;员工&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;people&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/employee/detail&#x27;</span>, <span class="comment">// 员工详情的地址</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/employee/detail.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>, <span class="comment">// 表示隐藏在左侧菜单</span></span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;员工详情&#x27;</span> <span class="comment">// 显示在导航的文本</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击添加员工跳转到详情页-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#x27;/employee/detail&#x27;)&quot;</span>&gt;</span>添加员工<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-表单数据校验"><a href="#2-表单数据校验" class="headerlink" title="2.表单数据校验"></a>2.表单数据校验</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022021862.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022021792.png" alt="image.png"> </p><blockquote><p>表单校验规则</p></blockquote><ul><li>姓名-必填-1-4个字符</li><li>手机号-必填-格式校验</li><li>部门-必填</li><li>聘用形式-必填</li><li>入职时间-必填</li><li><p>转正时间-必填-不能小于入职时间</p></li><li><p>定义数据和规则-代码位置(<strong>src/views/employee/detail.vue</strong>)</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userInfo: &#123;</span><br><span class="line">        username: &#x27;&#x27;, // 用户名</span><br><span class="line">        mobile: &#x27;&#x27;, // 手机号</span><br><span class="line">        workNumber: &#x27;&#x27;, // 工号</span><br><span class="line">        formOfEmployment: null, // 聘用形式</span><br><span class="line">        departmentId: null, // 部门id</span><br><span class="line">        timeOfEntry: &#x27;&#x27;, // 入职时间</span><br><span class="line">        correctionTime: &#x27;&#x27; // 转正时间</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [&#123; required: true, message: &#x27;请输入姓名&#x27;, trigger: &#x27;blur&#x27; &#125;, &#123;</span><br><span class="line">          min: 1, max: 4, message: &#x27;姓名为1-4位&#x27;</span><br><span class="line">        &#125;],</span><br><span class="line">        mobile: [&#123; required: true, message: &#x27;请输入手机号&#x27;, trigger: &#x27;blur&#x27; &#125;, &#123;</span><br><span class="line">        //   pattern 正则表达式</span><br><span class="line">          pattern: /^1[3-9]\d&#123;9&#125;$/,</span><br><span class="line">          message: &#x27;手机号格式不正确&#x27;,</span><br><span class="line">          trigger: &#x27;blur&#x27;</span><br><span class="line">        &#125;],</span><br><span class="line">        formOfEmployment: [&#123; required: true, message: &#x27;请选择聘用形式&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">        departmentId: [&#123; required: true, message: &#x27;请选择部门&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">        timeOfEntry: [&#123; required: true, message: &#x27;请选择入职时间&#x27;, trigger: &#x27;blur&#x27; &#125;],</span><br><span class="line">        correctionTime: [&#123; required: true, message: &#x27;请选择转正时间&#x27;, trigger: &#x27;blur&#x27; &#125;, &#123;</span><br><span class="line">          validator: (rule, value, callback) =&gt; &#123;</span><br><span class="line">            if (this.userInfo.timeOfEntry) &#123;</span><br><span class="line">              if (new Date(this.userInfo.timeOfEntry) &gt; new Date(value)) &#123;</span><br><span class="line">                callback(new Error(&#x27;转正时间不能小于入职时间&#x27;))</span><br><span class="line">                return</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            callback()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    saveData() &#123;</span><br><span class="line">      this.$refs.userForm.validate()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>绑定表单数据和属性-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;userForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;220px&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 姓名 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.username&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 工号 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;工号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;workNumber&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 工号是系统生成的  禁用这个组件--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.workNumber&quot;</span> <span class="attr">disabled</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--手机  --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;手机&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;mobile&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">v-model</span>=<span class="string">&quot;userInfo.mobile&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span></span></span><br><span class="line"><span class="tag">               /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;部门&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;departmentId&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 放置及联部门组件 会单独封装--&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;聘用形式&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;formOfEmployment&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.formOfEmployment&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;正式&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;非正式&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职时间&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;timeOfEntry&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">v-model</span>=<span class="string">&quot;userInfo.timeOfEntry&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span></span></span><br><span class="line"><span class="tag">               /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;转正时间&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;correctionTime&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">v-model</span>=<span class="string">&quot;userInfo.correctionTime&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span></span></span><br><span class="line"><span class="tag">               /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 员工照片 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;员工头像&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 放置上传图片 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 保存个人信息 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:220px&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;saveData&quot;</span>&gt;</span>保存更新<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-封装部门级联组件"><a href="#3-封装部门级联组件" class="headerlink" title="3.封装部门级联组件"></a>3.封装部门级联组件</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022021153.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022021084.png" alt="image.png"> </p><p>Cascader级联组件的特性</p><ol><li>options为一个树形结构的数据源</li><li>props可以设置数据源中的字段如 label (展示)  value（存取）</li><li>separator为展示的分隔符</li></ol><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022022395.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022047362.png" alt="image.png"></p><ul><li>创建select-tree组件-代码位置(<strong>src/views/employee/components/select-tree.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- element-ui级联组件 --&gt;</span><br><span class="line">  &lt;el-cascader</span><br><span class="line">    size=&quot;mini&quot;</span><br><span class="line">    :options=&quot;treeData&quot;</span><br><span class="line">    :props=&quot;props&quot;</span><br><span class="line">    separator=&quot;-&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; getDepartment &#125; from &#x27;@/api/department&#x27;</span><br><span class="line">import &#123; transListToTreeData &#125; from &#x27;@/utils&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      treeData: [], // 赋值给 级联组件的options</span><br><span class="line">      props: &#123;</span><br><span class="line">        label: &#x27;name&#x27;, // 要展示的字段</span><br><span class="line">        value: &#x27;id&#x27; // 要存储的字段</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getDepartment()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getDepartment() &#123;</span><br><span class="line">      this.treeData = transListToTreeData(await getDepartment(), 0) // 将组织架构的数据 转化树形赋值给treeData</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>解决转化树形中的问题-代码位置(<strong>src/utils/index.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 列表型数据转化树形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">transListToTreeData</span>(<span class="params">list, rootValue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">pid</span> === rootValue) &#123;</span><br><span class="line">      <span class="comment">// 找到了匹配的节点</span></span><br><span class="line">      arr.<span class="title function_">push</span>(item)</span><br><span class="line">      <span class="comment">// 当前节点的id 和 当前节点的子节点的pid是想等的</span></span><br><span class="line">      <span class="keyword">const</span> children = <span class="title function_">transListToTreeData</span>(list, item.<span class="property">id</span>) <span class="comment">// 找到的节点的子节点</span></span><br><span class="line">      <span class="keyword">if</span> (children.<span class="property">length</span>) &#123; item.<span class="property">children</span> = children &#125; <span class="comment">// 将子节点赋值给当前节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们加了一个判断，就是只有当前节点有子节点时才添加children属性，否则会造成级联组件本身就已经是最末端了，但是发现它的children属性存在，就会呈现不同的表现形式。</p></blockquote><ul><li>使用select-tree组件-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><blockquote><p>不要忘记引入注册</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;部门&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;departmentId&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 放置及联部门组件 会单独封装--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- inputW样式会给到selectTree中 template第一层的组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select-tree</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-级联组件—双向绑定"><a href="#4-级联组件—双向绑定" class="headerlink" title="4.级联组件—双向绑定"></a>4.级联组件—双向绑定</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022022991.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022022652.png" alt="image.png"></p><ul><li>接收value属性-代码位置(<strong>src/views/employee/components/select-tree.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: Number, // 存储的是部门的id  3 4 5</span><br><span class="line">      default: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>级联改变触发input事件-代码位置(<strong>src/views/employee/components/select-tree.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-cascader</span><br><span class="line">    :value=<span class="string">&quot;value&quot;</span></span><br><span class="line">    size=<span class="string">&quot;mini&quot;</span></span><br><span class="line">    :options=<span class="string">&quot;treeData&quot;</span></span><br><span class="line">    :props=<span class="string">&quot;props&quot;</span></span><br><span class="line">    separator=<span class="string">&quot;-&quot;</span></span><br><span class="line">    @change=<span class="string">&quot;changeValue&quot;</span></span><br><span class="line">  /&gt;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">changeValue</span>(<span class="params">list</span>) &#123;</span><br><span class="line">      <span class="comment">// 取到数组的最后一次</span></span><br><span class="line">      <span class="keyword">if</span> (list.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, list[list.<span class="property">length</span> - <span class="number">1</span>]) <span class="comment">// 将最后一位的id取出来 传出去</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="literal">null</span>) <span class="comment">// 如果长度为0 说明值为空</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在父组件使用v-model双向绑定-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select-tree</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.departmentId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-新增员工"><a href="#5-新增员工" class="headerlink" title="5.新增员工"></a>5.新增员工</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022022757.png" alt="image.png"></p><ul><li>封装新增员工API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addEmployee</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击保存按钮进行新增-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">saveData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userForm</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> isOK =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">          <span class="comment">// 校验通过</span></span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">addEmployee</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;新增员工成功&#x27;</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/employee&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-编辑员工—查看员工"><a href="#6-编辑员工—查看员工" class="headerlink" title="6.编辑员工—查看员工"></a>6.编辑员工—查看员工</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022022845.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022048161.png" alt="image.png"></p><ul><li>封装获取员工详情的API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取员工详情</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEmployeeDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/user/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击查看时跳转到详情携带id-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(`/employee/detail/$&#123;row.id&#125;`)&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>配置详情的路由支持新增模式和编辑模式-代码位置(<strong>src/router/modules/employee.js</strong>)</li></ul><blockquote><p>? 标识可有可无，可以传id也可以选择不传，页面都能正确显示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: layout,</span><br><span class="line">  <span class="attr">children</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;employee&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/employee&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;员工&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;people&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/employee/detail/:id?&#x27;</span>, <span class="comment">// 员工详情的地址</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/employee/detail.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>, <span class="comment">// 表示隐藏在左侧菜单</span></span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;员工详情&#x27;</span> <span class="comment">// 显示在导航的文本</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>员工详情页判断是否有id，有id就查询详情数据-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">// 如何获取路由参数的中id</span></span><br><span class="line">   <span class="comment">// if (this.$route.params.id) &#123; this.getEmployeeDetail() &#125;</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">getEmployeeDetail</span>()</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="keyword">async</span> <span class="title function_">getEmployeeDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="keyword">await</span> <span class="title function_">getEmployeeDetail</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="7-编辑员工—保存"><a href="#7-编辑员工—保存" class="headerlink" title="7.编辑员工—保存"></a>7.编辑员工—保存</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022022589.png" alt="image.png"></p><ul><li>封装更新员工的API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateEmployee</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/user/<span class="subst">$&#123;data.id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>保存时区分保存和新增场景-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">saveData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userForm</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> isOK =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (isOK) &#123;</span><br><span class="line">        <span class="comment">// 编辑模式</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>) &#123;</span><br><span class="line">          <span class="comment">// 编辑模式</span></span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">updateEmployee</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;更新员工成功&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 新增模式</span></span><br><span class="line">          <span class="comment">// 校验通过</span></span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">addEmployee</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;新增员工成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/employee&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>在当编辑模式时，让手机号不可编辑-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><blockquote><p>因为新增时手机号已经注册成功，手机号如果修改了，用户就不能再成功登录。所以编辑时，用户的手机号允许修改。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">       <span class="attr">v-model</span>=<span class="string">&quot;userInfo.mobile&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:disabled</span>=<span class="string">&quot;!!$route.params.id&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;inputW&quot;</span></span></span><br><span class="line"><span class="tag"> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-封装员工头像组件"><a href="#8-封装员工头像组件" class="headerlink" title="8.封装员工头像组件"></a>8.封装员工头像组件</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022023683.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022048657.png" alt="image.png"></p><ul><li>创建image-upload组件-代码位置(<strong>src/views/employee/components/image-upload.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-upload</span><br><span class="line">    class=&quot;avatar-uploader&quot;</span><br><span class="line">    action=&quot;&quot;</span><br><span class="line">    :show-file-list=&quot;false&quot;</span><br><span class="line">    :before-upload=&quot;beforeAvatarUpload&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- (自动上传)action是上传地址 人资项目不需要 人资项目(手动上传)  --&gt;</span><br><span class="line">    &lt;!-- show-file-list不展示列表 --&gt;</span><br><span class="line">    &lt;img v-if=&quot;value&quot; :src=&quot;value&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">    &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot; /&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 检查函数 判断文件的类型还有大小 return  true(继续上传)/false(停止上传)</span><br><span class="line">    beforeAvatarUpload(file) &#123;</span><br><span class="line">      // jpeg png gif bmp</span><br><span class="line"></span><br><span class="line">      const isJPG = [&#x27;image/jpeg&#x27;, &#x27;image/png&#x27;, &#x27;image/gif&#x27;, &#x27;image/bmp&#x27;].includes(file.type)</span><br><span class="line">      const isLt2M = file.size / 1024 / 1024 &lt; 5 // 5M</span><br><span class="line"></span><br><span class="line">      if (!isJPG) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片只能是 JPG PNG GIF BMP 格式!&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">      if (!isLt2M) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片大小不能超过 5MB!&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">      return isJPG &amp;&amp; isLt2M</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .avatar-uploader .el-upload &#123;</span><br><span class="line">    border: 1px dashed #d9d9d9;</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    position: relative;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  .avatar-uploader .el-upload:hover &#123;</span><br><span class="line">    border-color: #409EFF;</span><br><span class="line">  &#125;</span><br><span class="line">  .avatar-uploader-icon &#123;</span><br><span class="line">    font-size: 28px;</span><br><span class="line">    color: #8c939d;</span><br><span class="line">    width: 178px;</span><br><span class="line">    height: 178px;</span><br><span class="line">    line-height: 178px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .avatar &#123;</span><br><span class="line">    width: 178px;</span><br><span class="line">    height: 178px;</span><br><span class="line">    display: block;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>在父组件中应用-代码位置(<strong>src/views/employee/detail.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image-upload</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.staffPhoto&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-上传图片—创建腾讯云存储桶"><a href="#9-上传图片—创建腾讯云存储桶" class="headerlink" title="9.上传图片—创建腾讯云存储桶"></a>9.上传图片—创建腾讯云存储桶</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022023116.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022023766.png" alt="image.png"><br>1.注册腾讯云账号-课前完成<a href="https://cloud.tencent.com/login">https://cloud.tencent.com/login</a><br>2.创建腾讯云存储桶<br>3.得到应用密钥和应用标识</p><ul><li>创建存储桶</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022023380.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022023698.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022024594.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022024510.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022024274.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022024541.png" alt="image.png"></p><h3 id="9-1获取存储桶相关信息"><a href="#9-1获取存储桶相关信息" class="headerlink" title="9.1获取存储桶相关信息"></a>9.1获取存储桶相关信息</h3><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022025344.png" alt="image.png"></p><blockquote><p>将存储桶和所属地域拷贝下来，备用</p></blockquote><ul><li>获取应用标识<a href="https://console.cloud.tencent.com/cam/capi">https://console.cloud.tencent.com/cam/capi</a></li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022025737.png" alt="image.png"></p><blockquote><p>将SecretId和SecretKey拷贝下来，备用</p></blockquote><p><strong>存储桶名称</strong>：izdloyl-1325700039</p><p><strong>所属地域</strong>：ap-nanjing</p><p><strong>SecretId</strong>: AKIDKYdXHCxXyEJDxYzFLI5jDY1LUUL4d1Qg</p><p><strong>SecretKey</strong>: DGAuVwDKI6kpupaAf2LWaVIxWyIVbaQ9</p><h2 id="10-使用cos-sdk完成上传"><a href="#10-使用cos-sdk完成上传" class="headerlink" title="10.使用cos-sdk完成上传"></a>10.使用cos-sdk完成上传</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022025096.png" alt="image.png"></p><ul><li>安装腾讯云js-sdk</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i cos-js-sdk-v5 </span><br><span class="line">$ yarn add  cos-js-sdk-v5</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用el-upload自定义上传-代码位置(<strong>src/views/employee/components/image-upload.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">action</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-upload</span>=<span class="string">&quot;beforeAvatarUpload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:http-request</span>=<span class="string">&quot;uploadImage&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- (自动上传)action是上传地址 人资项目不需要 人资项目(手动上传)  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- show-file-list不展示列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;value&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;value&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>实现上传方法-代码位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择图片上传</span></span><br><span class="line"><span class="title function_">uploadImage</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="property">file</span>)</span><br><span class="line">  <span class="keyword">const</span> cos = <span class="keyword">new</span> <span class="title function_">COS</span>(&#123;</span><br><span class="line">    <span class="title class_">SecretId</span>: <span class="string">&#x27;AKIDDSdjgnjT1NZ3a7VjkfVIwOdfv9IH2b8e&#x27;</span>,</span><br><span class="line">    <span class="title class_">SecretKey</span>: <span class="string">&#x27;WEwe9WJ9vLeq1BHNLLKF5Up10ndUDk24&#x27;</span></span><br><span class="line">  &#125;) <span class="comment">// 完成cos对象的初始化</span></span><br><span class="line">  cos.<span class="title function_">putObject</span>(&#123;</span><br><span class="line">    <span class="title class_">Bucket</span>: <span class="string">&#x27;heimachengxuyuan-1302806742&#x27;</span>, <span class="comment">// 存储桶名称</span></span><br><span class="line">    <span class="title class_">Region</span>: <span class="string">&#x27;ap-nanjing&#x27;</span>, <span class="comment">// 地域名称</span></span><br><span class="line">    <span class="title class_">Key</span>: params.<span class="property">file</span>.<span class="property">name</span>, <span class="comment">// 文件名称</span></span><br><span class="line">    <span class="title class_">StorageClass</span>: <span class="string">&#x27;STANDARD&#x27;</span>, <span class="comment">// 固定值</span></span><br><span class="line">    <span class="title class_">Body</span>: params.<span class="property">file</span> <span class="comment">// 文件对象</span></span><br><span class="line">  &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">statusCode</span> === <span class="number">200</span> &amp;&amp; data.<span class="property">Location</span>) &#123;</span><br><span class="line">      <span class="comment">// 拿到了腾讯云返回的地址</span></span><br><span class="line">      <span class="comment">// 通过input自定义事件将地址传出去</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;http://&#x27;</span> + data.<span class="property">Location</span>) <span class="comment">// 将地址返回了</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(err.<span class="property">Message</span>) <span class="comment">// 上传失败提示消息</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里需要使用 上个小节准备好的存储桶的名称-地域名称-应用标识-应用密钥</p></blockquote><p>这里需要知道Cos的初始化和上传的方法<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022025242.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022025086.png" alt="image.png"> </p><h1 id="八、权限管理"><a href="#八、权限管理" class="headerlink" title="八、权限管理"></a>八、权限管理</h1><h2 id="1-搭建权限页面"><a href="#1-搭建权限页面" class="headerlink" title="1. 搭建权限页面"></a>1. 搭建权限页面</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022025002.png" alt="image.png"></p><ul><li>实现权限管理的页面结构-代码位置(<strong>src/views/permission/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">      &lt;el-button class=&quot;btn-add&quot; size=&quot;mini&quot; type=&quot;primary&quot;&gt;添加权限&lt;/el-button&gt;</span><br><span class="line">      &lt;el-table&gt;</span><br><span class="line">        &lt;el-table-column label=&quot;名称&quot; /&gt;</span><br><span class="line">        &lt;el-table-column label=&quot;标识&quot; /&gt;</span><br><span class="line">        &lt;el-table-column label=&quot;描述&quot; /&gt;</span><br><span class="line">        &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;text&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;text&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;text&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Permission&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.btn-add &#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-获取数据转化树形"><a href="#2-获取数据转化树形" class="headerlink" title="2.获取数据转化树形"></a>2.获取数据转化树形</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022025840.png" alt="image.png"></p><ul><li>封装获取权限API-代码位置(<strong>src/api/permission.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 获取权限列表</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getPermissionList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/permission&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取数据-转化树形-控制二级权限不显示添加按钮(<strong>src/views/permission/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">      &lt;el-button class=&quot;btn-add&quot; size=&quot;mini&quot; type=&quot;primary&quot;&gt;添加权限&lt;/el-button&gt;</span><br><span class="line">      &lt;el-table default-expand-all :data=&quot;list&quot; row-key=&quot;id&quot;&gt;</span><br><span class="line">        &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; /&gt;</span><br><span class="line">        &lt;el-table-column prop=&quot;code&quot; label=&quot;标识&quot; /&gt;</span><br><span class="line">        &lt;el-table-column prop=&quot;description&quot; label=&quot;描述&quot; /&gt;</span><br><span class="line">        &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class="line">          &lt;template v-slot=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">            &lt;el-button v-if=&quot;row.type === 1&quot; size=&quot;mini&quot; type=&quot;text&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button size=&quot;mini&quot; type=&quot;text&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button size=&quot;mini&quot; type=&quot;text&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/el-table-column&gt;</span><br><span class="line">      &lt;/el-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; getPermissionList &#125; from &#x27;@/api/permission&#x27;</span><br><span class="line">import &#123; transListToTreeData &#125; from &#x27;@/utils&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Permission&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getPermissionList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getPermissionList() &#123;</span><br><span class="line">      this.list = transListToTreeData(await getPermissionList(), 0) // 将列表数据转化成树形结构</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.btn-add &#123;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-权限管理—作业"><a href="#3-权限管理—作业" class="headerlink" title="3.权限管理—作业"></a>3.权限管理—作业</h2><p>基于权限接口和线上效果完成 权限点的新增- 删除- 编辑</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022026903.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022026070.png" alt="image.png"> </p><p>要求： </p><ol><li>实现新增-删除-编辑功能</li><li>编辑模式不做限制-弹层-行内-跳转都可</li><li>注意：二级权限和一级权限的区别为type，当type为1时，为一级权限，当type为2时，为二级权限</li><li>二级权限应该添加在一级权限下，二者是通过id和pid进行关联的，其类似于组织架构中的添加子部门。</li></ol><p>作业实现</p><ol><li>封装权限管理的API接口-代码位置(<strong>src/api/permission.js</strong>)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addPermission</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/permission&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updatePermission</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/permission/<span class="subst">$&#123;data.id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delPermission</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/permission/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取权限详情</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getPermissionDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/permission/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.新增编辑权限的弹层-代码位置(<strong>src/views/permission/index.vue</strong>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 放置一个弹层 用来编辑新增节点 --&gt;</span><br><span class="line">   &lt;el-dialog :title=&quot;`$&#123;showText&#125;权限点`&quot; :visible=&quot;showDialog&quot; @close=&quot;btnCancel&quot;&gt;</span><br><span class="line">      &lt;!-- 表单 --&gt;</span><br><span class="line">      &lt;el-form ref=&quot;perForm&quot; :model=&quot;formData&quot; :rules=&quot;rules&quot; label-width=&quot;120px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;权限名称&quot; prop=&quot;name&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;formData.name&quot; style=&quot;width:90%&quot; /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;权限标识&quot; prop=&quot;code&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;formData.code&quot; style=&quot;width:90%&quot; /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;权限描述&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;formData.description&quot; style=&quot;width:90%&quot; /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;开启&quot;&gt;</span><br><span class="line">          &lt;el-switch</span><br><span class="line">            v-model=&quot;formData.enVisible&quot;</span><br><span class="line">            active-value=&quot;1&quot;</span><br><span class="line">            inactive-value=&quot;0&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;el-row slot=&quot;footer&quot; type=&quot;flex&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">        &lt;el-col :span=&quot;6&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;small&quot; type=&quot;primary&quot; @click=&quot;btnOK&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size=&quot;small&quot; @click=&quot;btnCancel&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-row&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><p>声明弹层需要的变量和表单数据和校验规则-代码位置(<strong>src/views/permission/index.vue</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getPermissionList, updatePermission, addPermission, getPermissionDetail, delPermission &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/permission&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; transListToTreeData &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: [],</span><br><span class="line">      <span class="attr">formData</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 名称</span></span><br><span class="line">        <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标识</span></span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 描述</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 类型 该类型 不需要显示 因为点击添加的时候已经知道类型了</span></span><br><span class="line">        <span class="attr">pid</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 因为做的是树 需要知道添加到哪个节点下了</span></span><br><span class="line">        <span class="attr">enVisible</span>: <span class="string">&quot;0&quot;</span> <span class="comment">// 默认关闭</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;权限名称不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;],</span><br><span class="line">        <span class="attr">code</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;权限标识不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">showDialog</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">showText</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span> ? <span class="string">&#x27;编辑&#x27;</span> : <span class="string">&#x27;新增&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getPermissionList</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span>  <span class="title function_">getPermissionList</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span> = <span class="title function_">transListToTreeData</span>(<span class="keyword">await</span> <span class="title function_">getPermissionList</span>(), <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现一级权限新增-二级权限新增-代码位置(<strong>src/views/permission/index.vue</strong>)</li></ol><p>添加一级权限-<img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022026528.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button class=&quot;btn-add&quot; size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;addPermission(row.id, 1)&quot;&gt;添加权限&lt;/el-button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加二级权限-<img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022026739.png" alt="image.png"></p><blockquote><p>注意：一级添加的type为1， 二级添加的type为2</p></blockquote><p>点击添加调用的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">addPermission</span>(<span class="params">pid, type</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">pid</span> = pid</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">type</span> = type</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>实现确定和取消方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnOK</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">perForm</span>.<span class="title function_">validate</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">id</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">updatePermission</span>(<span class="variable language_">this</span>.<span class="property">formData</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">addPermission</span>(<span class="variable language_">this</span>.<span class="property">formData</span>)</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//  提示消息</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;新增成功&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getPermissionList</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">btnCancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">formData</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 名称</span></span><br><span class="line">        <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 标识</span></span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 描述</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 类型 该类型 不需要显示 因为点击添加的时候已经知道类型了</span></span><br><span class="line">        <span class="attr">pid</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 因为做的是树 需要知道添加到哪个节点下了</span></span><br><span class="line">        <span class="attr">enVisible</span>: <span class="string">&quot;0&quot;</span> <span class="comment">// 默认关闭</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">perForm</span>.<span class="title function_">resetFields</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>实现编辑弹层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;editPermission(row.id)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击编辑方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">async</span> <span class="title function_">editPermission</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="comment">// 根据获取id获取详情</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">formData</span> = <span class="keyword">await</span> <span class="title function_">getPermissionDetail</span>(id)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showDialog</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;delPermission(row.id)&quot;&gt; 删除&lt;/el-button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">delPermission</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确定要删除该数据吗&#x27;</span>)</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">delPermission</span>(id)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getPermissionList</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="4-权限概念"><a href="#4-权限概念" class="headerlink" title="4.权限概念"></a>4.权限概念</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022026248.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022050934.png" alt="image.png"></p><blockquote><p>权限是通过角色这个中间人实现，首先员工拥有角色，角色拥有权限，那么员工自动拥有了角色所对应的权限。</p></blockquote><p>所以接下来，我们需要实现 给员工分配角色，给角色分配权限。</p><ul><li>分配过程-给员工分角色</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022027797.png" alt="image.png"></p><ul><li>分配过程-给角色分权限</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022027339.png" alt="image.png"></p><h2 id="5-员工分配角色—弹出层"><a href="#5-员工分配角色—弹出层" class="headerlink" title="5.员工分配角色—弹出层"></a>5.员工分配角色—弹出层</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022027852.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022050743.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022050639.png" alt="image.png"></p><ul><li>封装获取可用角色的API-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取可用的角色</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getEnableRoleList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/role/list/enabled&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明变量控制弹层显示-和角色列表-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">showRoleDialog</span>: <span class="literal">false</span>, <span class="comment">// 用来控制角色弹层的显示</span></span><br><span class="line">      <span class="attr">roleList</span>: [], <span class="comment">// 接收角色列表</span></span><br><span class="line">      <span class="attr">roleIds</span>: [] <span class="comment">// 用来双向绑定数据的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击角色按钮-获取角色列表-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击角色按钮弹出层</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">btnRole</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showRoleDialog</span> = <span class="literal">true</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">roleList</span> = <span class="keyword">await</span> <span class="title function_">getEnableRoleList</span>()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>放置弹层-绑定变量和渲染checkbox-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;showRoleDialog&quot;</span> <span class="attr">title</span>=<span class="string">&quot;分配角色&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 弹层内容 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- checkbox --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;roleIds&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 放置n个的checkbox  要执行checkbox的存储值 item.id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;item in roleList&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:label</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-员工分配角色—回显数据并提交"><a href="#6-员工分配角色—回显数据并提交" class="headerlink" title="6.员工分配角色—回显数据并提交"></a>6.员工分配角色—回显数据并提交</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022027317.png" alt="image.png"></p><ul><li>封装给员工分配角色的接口-代码位置(<strong>src/api/employee.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分配员工角色</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">assignRole</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/user/assignRoles&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>点击角色按钮时，获取员工已经拥有的角色，并记录当前点击的用户id-代码位置(<strong>src/views/employee/index.vue</strong>)</p><p>在data中声明一个id用来记录</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span>  &#123;</span><br><span class="line">    <span class="attr">currentUserId</span>: <span class="literal">null</span> <span class="comment">// 用来记录当前点击的用户id</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">btnRole</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">roleList</span> = <span class="keyword">await</span> <span class="title function_">getEnableRoleList</span>()</span><br><span class="line">      <span class="comment">// 记录当前点击的id 因为后边 确定取消要存取给对应的用户</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentUserId</span> = id</span><br><span class="line">      <span class="keyword">const</span> &#123; roleIds &#125; = <span class="keyword">await</span> <span class="title function_">getEmployeeDetail</span>(id)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">roleIds</span> = roleIds</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showRoleDialog</span> = <span class="literal">true</span> <span class="comment">// 调整顺序</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>注意，这里我们特地调整了弹层的顺序，因为获取已经拥有的角色是一个异步的过程，如果弹层显示在前，会出现卡顿的效果，表现出缓慢的效果，所以等到获取所有数据之后再弹层。</p></blockquote><ul><li>点击确定实现给用户分配角色-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击角色的确定</span></span><br><span class="line">   <span class="keyword">async</span>  <span class="title function_">btnRoleOK</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">await</span> <span class="title function_">assignRole</span>(&#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">currentUserId</span>,</span><br><span class="line">       <span class="attr">roleIds</span>: <span class="variable language_">this</span>.<span class="property">roleIds</span></span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;分配用户角色成功&#x27;</span>)</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">showRoleDialog</span> = <span class="literal">false</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>取消关闭弹层-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">type</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnRoleOK&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showRoleDialog = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-给角色分配权限—弹出层"><a href="#7-给角色分配权限—弹出层" class="headerlink" title="7.给角色分配权限—弹出层"></a>7.给角色分配权限—弹出层</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022027649.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022051339.png" alt="image.png"></p><ul><li>声明变量控制弹层显示和接收权限数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">showPermissionDialog</span>: <span class="literal">false</span>,</span><br><span class="line">     <span class="attr">permissionData</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击分配权限-弹出层-获取数据并转化树形-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button size=<span class="string">&quot;mini&quot;</span> type=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;btnPermission&quot;</span>&gt;分配权限&lt;/el-button&gt;</span><br><span class="line"><span class="keyword">async</span>  <span class="title function_">btnPermission</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showPermissionDialog</span> = <span class="literal">true</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">permissionData</span> = <span class="title function_">transListToTreeData</span>(<span class="keyword">await</span> <span class="title function_">getPermissionList</span>(), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>放置弹层和树组件-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 放置权限弹层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;showPermissionDialog&quot;</span> <span class="attr">title</span>=<span class="string">&quot;分配权限&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 放置权限数据 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-tree</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:data</span>=<span class="string">&quot;permissionData&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:props</span>=<span class="string">&quot;&#123; label: &#x27;name&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">show-checkbox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-角色分配权限—显示已有权限数据"><a href="#8-角色分配权限—显示已有权限数据" class="headerlink" title="8.角色分配权限—显示已有权限数据"></a>8.角色分配权限—显示已有权限数据</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022027947.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028881.png" alt="image.png"></p><ul><li>封装获取角色详情的API-代码位置(<strong>src/api/role.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取角色详情</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getRoleDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/sys/role/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明变量记录当前点击的角色id和角色所拥有的权限数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">currentRoleId</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">permIds</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击分配权限按钮时传递角色id，并根据id获取该角色所拥有的权限-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button size=<span class="string">&quot;mini&quot;</span> type=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;btnPermission(row.id)&quot;</span>&gt;分配权限&lt;/el-button&gt;</span><br><span class="line"><span class="keyword">async</span>  <span class="title function_">btnPermission</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentRoleId</span> = id</span><br><span class="line">      <span class="keyword">const</span> &#123; permIds &#125; = <span class="keyword">await</span> <span class="title function_">getRoleDetail</span>(id)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">permIds</span> = permIds</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">permissionData</span> = <span class="title function_">transListToTreeData</span>(<span class="keyword">await</span> <span class="title function_">getPermissionList</span>(), <span class="number">0</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showPermissionDialog</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置el-tree组件的属性-node-key和当前选中数据-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-tree</span></span></span><br><span class="line"><span class="tag">        <span class="attr">node-key</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:data</span>=<span class="string">&quot;permissionData&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:props</span>=<span class="string">&quot;&#123; label: &#x27;name&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">show-checkbox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:default-checked-keys</span>=<span class="string">&quot;permIds&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>default-checked-keys的属性是设置当前选中的节点，但是必须配合node-key属性，因为permIds变量中存储的都是id，必须el-tree组件知道key是哪个字段，所以设置node-key=”id”</p></blockquote><h2 id="9-角色分配权限—确定提交"><a href="#9-角色分配权限—确定提交" class="headerlink" title="9.角色分配权限—确定提交"></a>9.角色分配权限—确定提交</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028958.png" alt="image.png"></p><ul><li>封装分配权限的接口API-代码位置(<strong>src/api/role.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给角色分配权限</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">assignPerm</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/sys/role/assignPrem&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确定和取消事件-代码位置(<strong>src/views/role/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-row slot=<span class="string">&quot;footer&quot;</span> type=<span class="string">&quot;flex&quot;</span> justify=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnPermissionOK&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showPermissionDialog = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击确定时触发</span></span><br><span class="line">    <span class="keyword">async</span>  <span class="title function_">btnPermissionOK</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">assignPerm</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">currentRoleId</span>,</span><br><span class="line">        <span class="attr">permIds</span>: <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">permTree</span>.<span class="title function_">getCheckedKeys</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;角色分配权限成功&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">showPermissionDialog</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="10-拆分静态路由—动态路由"><a href="#10-拆分静态路由—动态路由" class="headerlink" title="10.拆分静态路由—动态路由"></a>10.拆分静态路由—动态路由<img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028328.png" alt="image.png"></h2><ul><li>将静态路由和动态路由进行拆分-代码位置(<strong>src/router/index.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Layout */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;@/layout&#x27;</span></span><br><span class="line"><span class="keyword">import</span> departmentRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/department&#x27;</span></span><br><span class="line"><span class="keyword">import</span> approvalRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/approval&#x27;</span></span><br><span class="line"><span class="keyword">import</span> attendanceRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/attendance&#x27;</span></span><br><span class="line"><span class="keyword">import</span> employeeRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/employee&#x27;</span></span><br><span class="line"><span class="keyword">import</span> permissionRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/permission&#x27;</span></span><br><span class="line"><span class="keyword">import</span> roleRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/role&#x27;</span></span><br><span class="line"><span class="keyword">import</span> salaryRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/salary&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socialRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/social&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: sub-menu only appear when route children.length &gt;= 1</span></span><br><span class="line"><span class="comment"> * Detail see: https://panjiachen.github.io/vue-element-admin-site/guide/essentials/router-and-nav.html</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * hidden: true                   if set true, item will not show in the sidebar(default is false)</span></span><br><span class="line"><span class="comment"> * alwaysShow: true               if set true, will always show the root menu</span></span><br><span class="line"><span class="comment"> *                                if not set alwaysShow, when item has more than one children route,</span></span><br><span class="line"><span class="comment"> *                                it will becomes nested mode, otherwise not show the root menu</span></span><br><span class="line"><span class="comment"> * redirect: noRedirect           if set noRedirect will no redirect in the breadcrumb</span></span><br><span class="line"><span class="comment"> * name:&#x27;router-name&#x27;             the name is used by &lt;keep-alive&gt; (must set!!!)</span></span><br><span class="line"><span class="comment"> * meta : &#123;</span></span><br><span class="line"><span class="comment">    roles: [&#x27;admin&#x27;,&#x27;editor&#x27;]    control the page roles (you can set multiple roles)</span></span><br><span class="line"><span class="comment">    title: &#x27;title&#x27;               the name show in sidebar and breadcrumb (recommend set)</span></span><br><span class="line"><span class="comment">    icon: &#x27;svg-name&#x27;/&#x27;el-icon-x&#x27; the icon show in the sidebar</span></span><br><span class="line"><span class="comment">    breadcrumb: false            if set false, the item will hidden in breadcrumb(default is true)</span></span><br><span class="line"><span class="comment">    activeMenu: &#x27;/example/list&#x27;  if set path, the sidebar will highlight the path you set</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * constantRoutes</span></span><br><span class="line"><span class="comment"> * a base page that does not have permission requirements</span></span><br><span class="line"><span class="comment"> * all roles can be accessed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 404 page must be placed at the end !!!</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 动态路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoutes = [</span><br><span class="line">  departmentRouter,</span><br><span class="line">  roleRouter,</span><br><span class="line">  employeeRouter,</span><br><span class="line">  permissionRouter,</span><br><span class="line">  attendanceRouter,</span><br><span class="line">  approvalRouter,</span><br><span class="line">  salaryRouter,</span><br><span class="line">  socialRouter]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createRouter</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="comment">// mode: &#x27;history&#x27;, // require service support</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="attr">routes</span>: constantRoutes <span class="comment">// 默认引入静态路由</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resetRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newRouter = <span class="title function_">createRouter</span>()</span><br><span class="line">  router.<span class="property">matcher</span> = newRouter.<span class="property">matcher</span> <span class="comment">// reset router</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="11-根据用户权限添加动态路由"><a href="#11-根据用户权限添加动态路由" class="headerlink" title="11.根据用户权限添加动态路由"></a>11.根据用户权限添加动态路由</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028382.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028370.png" alt="image.png"><br>怎么匹配?</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028196.png" alt="image.png"></p><ul><li>Vuex用户模块action中返回result信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getUserInfo</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>()</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, result)</span><br><span class="line">    <span class="keyword">return</span> result <span class="comment">// 返回数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>权限拦截处筛选-添加路由-代码位置(<strong>src/permission.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; asyncRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *前置守卫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/404&#x27;</span>]</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  nprogress.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    <span class="comment">// 存在token</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 跳转到主页</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// 中转到主页</span></span><br><span class="line">      <span class="comment">// next（地址）并没有执行后置守卫</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断是否获取过资料</span></span><br><span class="line">      <span class="keyword">if</span> (!store.<span class="property">getters</span>.<span class="property">userId</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; roles &#125; = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/getUserInfo&#x27;</span>)</span><br><span class="line">        <span class="comment">// console.log(roles.menus) // 数组 不确定 可能是8个 1个 0个</span></span><br><span class="line">        <span class="comment">// console.log(asyncRoutes) // 数组 8个</span></span><br><span class="line">        <span class="keyword">const</span> filterRoutes = asyncRoutes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// return true/false</span></span><br><span class="line">          <span class="keyword">return</span> roles.<span class="property">menus</span>.<span class="title function_">includes</span>(item.<span class="property">name</span>)</span><br><span class="line">        &#125;) <span class="comment">// 筛选后的路由</span></span><br><span class="line">        router.<span class="title function_">addRoutes</span>([...filterRoutes, &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;]) <span class="comment">// 添加动态路由信息到路由表</span></span><br><span class="line">        <span class="comment">// router添加动态路由之后 需要转发一下</span></span><br><span class="line">        <span class="title function_">next</span>(to.<span class="property">path</span>) <span class="comment">// 目的是让路由拥有信息 router的已知缺陷</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">// 放过</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 中转到登录页</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 后置守卫</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  nprogress.<span class="title function_">done</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>删除静态路由中的404-代码位置(<strong>src/router/index.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * constantRoutes</span></span><br><span class="line"><span class="comment"> * a base page that does not have permission requirements</span></span><br><span class="line"><span class="comment"> * all roles can be accessed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>针对每个路由模块的配置文件添加name属性，和权限的数据进行对应。</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022028863.png" alt="image.png"> </p><h2 id="12-根据权限显示左侧菜单"><a href="#12-根据权限显示左侧菜单" class="headerlink" title="12.根据权限显示左侧菜单"></a>12.根据权限显示左侧菜单</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022029992.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022029114.png" alt="image.png"></p><ul><li>Vuex中的user模块添加state管理-代码位置(<strong>src/store/modules/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; login, getUserInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="title function_">getToken</span>(), <span class="comment">// 从缓存中读取初始值</span></span><br><span class="line">  <span class="attr">userInfo</span>: &#123;&#125;, <span class="comment">// 存储用户基本资料状态</span></span><br><span class="line">  <span class="attr">routes</span>: constantRoutes <span class="comment">// 静态路由的数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">setToken</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">    state.<span class="property">token</span> = token</span><br><span class="line">    <span class="comment">// 同步到缓存</span></span><br><span class="line">    <span class="title function_">setToken</span>(token)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">removeToken</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="comment">// 删除Vuex的token</span></span><br><span class="line">    state.<span class="property">token</span> = <span class="literal">null</span></span><br><span class="line">    <span class="title function_">removeToken</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setUserInfo</span>(<span class="params">state, userInfo</span>) &#123;</span><br><span class="line">    state.<span class="property">userInfo</span> = userInfo</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setRoutes</span>(<span class="params">state, newRoutes</span>) &#123;</span><br><span class="line">    state.<span class="property">routes</span> = [...constantRoutes, ...newRoutes] <span class="comment">// 静态路由 + 动态路由</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// context上下文，传入参数</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">context, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="comment">// todo: 调用登录接口</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="title function_">login</span>(data)</span><br><span class="line">    <span class="comment">// 返回一个token 123456</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setToken&#x27;</span>, token)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取用户的基本资料</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getUserInfo</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>()</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, result)</span><br><span class="line">    <span class="keyword">return</span> result <span class="comment">// 返回数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 退出登录的action</span></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;removeToken&#x27;</span>) <span class="comment">// 删除token</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, &#123;&#125;) <span class="comment">// 设置用户信息为空对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">// 开启命名空间</span></span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>筛选路由后，更新state信息-代码位置(<strong>src/permission.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; asyncRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *前置守卫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/404&#x27;</span>]</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  nprogress.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    <span class="comment">// 存在token</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 跳转到主页</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>) <span class="comment">// 中转到主页</span></span><br><span class="line">      <span class="comment">// next（地址）并没有执行后置守卫</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断是否获取过资料</span></span><br><span class="line">      <span class="keyword">if</span> (!store.<span class="property">getters</span>.<span class="property">userId</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; roles &#125; = <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/getUserInfo&#x27;</span>)</span><br><span class="line">        <span class="comment">// console.log(roles.menus) // 数组 不确定 可能是8个 1个 0个</span></span><br><span class="line">        <span class="comment">// console.log(asyncRoutes) // 数组 8个</span></span><br><span class="line">        <span class="keyword">const</span> filterRoutes = asyncRoutes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// return true/false</span></span><br><span class="line">          <span class="keyword">return</span> roles.<span class="property">menus</span>.<span class="title function_">includes</span>(item.<span class="property">name</span>)</span><br><span class="line">        &#125;) <span class="comment">// 筛选后的路由</span></span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;user/setRoutes&#x27;</span>, filterRoutes)</span><br><span class="line">        router.<span class="title function_">addRoutes</span>([...filterRoutes, &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;]) <span class="comment">// 添加动态路由信息到路由表</span></span><br><span class="line">        <span class="comment">// router添加动态路由之后 需要转发一下</span></span><br><span class="line">        <span class="title function_">next</span>(to.<span class="property">path</span>) <span class="comment">// 目的是让路由拥有信息 router的已知缺陷</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">// 放过</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有token</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>) <span class="comment">// 中转到登录页</span></span><br><span class="line">      nprogress.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** *</span></span><br><span class="line"><span class="comment"> * 后置守卫</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  nprogress.<span class="title function_">done</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用getters开放路由的访问信息-代码位置(<strong>src/store/getters.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">sidebar</span>,</span><br><span class="line">  <span class="attr">device</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">device</span>,</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">token</span>,</span><br><span class="line">  <span class="attr">userId</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">userId</span>,</span><br><span class="line">  <span class="attr">avatar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">staffPhoto</span>, <span class="comment">// 头像</span></span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">username</span>, <span class="comment">// 用户名称</span></span><br><span class="line">  <span class="attr">routes</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">routes</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>左侧菜单组件读取Vuex中的路由信息-代码位置(<strong>src/layout/components/Sidebar/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">SidebarItem</span>, <span class="title class_">Logo</span> &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([</span><br><span class="line">      <span class="string">&#x27;sidebar&#x27;</span>, <span class="string">&#x27;routes&#x27;</span></span><br><span class="line">    ]),</span><br><span class="line">    <span class="comment">// 路由信息的计算属性</span></span><br><span class="line">    <span class="comment">// routes() &#123;</span></span><br><span class="line">    <span class="comment">//   // 返回所有的路由信息</span></span><br><span class="line">    <span class="comment">//   return this.$router.options.routes</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-退出登录重置路由"><a href="#13-退出登录重置路由" class="headerlink" title="13.退出登录重置路由"></a>13.退出登录重置路由</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022029860.png" alt="image.png"></p><ul><li>退出登录时-重置路由-代码位置(<strong>src/store/modules/user.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; resetRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出登录的action</span></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;removeToken&#x27;</span>) <span class="comment">// 删除token</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;setUserInfo&#x27;</span>, &#123;&#125;) <span class="comment">// 设置用户信息为空对象</span></span><br><span class="line">    <span class="comment">// 重置路由</span></span><br><span class="line">    <span class="title function_">resetRouter</span>()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="14-功能权限—按钮权限标识"><a href="#14-功能权限—按钮权限标识" class="headerlink" title="14.功能权限—按钮权限标识"></a>14.功能权限—按钮权限标识</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022029001.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022029143.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022029356.png" alt="image.png"></p><h2 id="15-自定义指令应用功能权限"><a href="#15-自定义指令应用功能权限" class="headerlink" title="15.自定义指令应用功能权限"></a>15.自定义指令应用功能权限</h2><ul><li>自定义指令- 作用在按钮上-所有的按钮都可以直接使用 </li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022029618.png" alt="image.png"></p><ul><li>封装自定义指令-代码位置(<strong>src/main.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装自定义指令 用来控制操作权</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;permission&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 会在指令作用的元素插入到页面完成以后触发</span></span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="comment">// el 指令作用的元素的dom对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el)</span><br><span class="line">    <span class="keyword">const</span> points = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">userInfo</span>?.<span class="property">roles</span>?.<span class="property">points</span> || [] <span class="comment">// 当前用户信息的操作权</span></span><br><span class="line">    <span class="keyword">if</span> (!points.<span class="title function_">includes</span>(binding.<span class="property">value</span>)) &#123;</span><br><span class="line">      <span class="comment">// 不存在就要删除或者禁用</span></span><br><span class="line">      el.<span class="title function_">remove</span>() <span class="comment">// 删除元素</span></span><br><span class="line">      <span class="comment">// el.disabled = true</span></span><br><span class="line">      <span class="comment">// 线上的权限数据和线下的代码进行对应</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>应用自定义指令-代码位置(<strong>src/views/employee/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-permission</span>=<span class="string">&quot;&#x27;add-employee&#x27;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#x27;/employee/detail&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  添加员工</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="九、其他模块"><a href="#九、其他模块" class="headerlink" title="九、其他模块"></a>九、其他模块</h1><h2 id="1-集成"><a href="#1-集成" class="headerlink" title="1.集成"></a>1.集成</h2><blockquote><p>素材中，已经给大家提供了 其他模块的请求/路由/组件，只需要拷贝到src即可</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022030263.png" alt="image.png"></p><h2 id="2-首页—基本结构和数字滚动"><a href="#2-首页—基本结构和数字滚动" class="headerlink" title="2.首页—基本结构和数字滚动"></a>2.首页—基本结构和数字滚动</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022030287.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022030164.png" alt="image.png"> </p><ul><li>基本结构-代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- 左侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;!-- 个人信息 --&gt;</span><br><span class="line">          &lt;div class=&quot;user-info&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;avatar&quot; src=&quot;../../assets/common/defaultHead.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;company-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                江苏传智播客教育科技股份有限公司</span><br><span class="line">                &lt;span&gt;体验版&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;depart&quot;&gt;庆山 ｜ 传智播客-总裁办&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 代办 --&gt;</span><br><span class="line">          &lt;div class=&quot;todo-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;组织总人数&lt;/span&gt;</span><br><span class="line">              &lt;!-- 起始值 终点值  滚动时间 --&gt;</span><br><span class="line">              &lt;span&gt;228&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;正式员工&lt;/span&gt;</span><br><span class="line">               &lt;span&gt;334&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;合同待签署&lt;/span&gt;</span><br><span class="line">               &lt;span&gt;345&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;待入职&lt;/span&gt;</span><br><span class="line">               &lt;span&gt;890&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待转正&lt;/span&gt;</span><br><span class="line">               &lt;span&gt;117&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待离职&lt;/span&gt;</span><br><span class="line">              &lt;span&gt;234&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;接口总访问&lt;/span&gt;</span><br><span class="line">               &lt;span&gt;789&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 快捷入口 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;快捷入口&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;quick-entry&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon approval&quot; /&gt;</span><br><span class="line">              &lt;span&gt;假期审批&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon social&quot; /&gt;</span><br><span class="line">              &lt;span&gt;社保管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon role&quot; /&gt;</span><br><span class="line">              &lt;span&gt;角色管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon salary&quot; /&gt;</span><br><span class="line">              &lt;span&gt;薪资设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon bpm&quot; /&gt;</span><br><span class="line">              &lt;span&gt;流程设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;社保申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;span&gt;223&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                   &lt;span&gt;117&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                   &lt;span&gt;167&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                   &lt;span&gt;24&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;公积金申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                 &lt;span&gt;335&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                   &lt;span&gt;345&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                   &lt;span&gt;109&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                   &lt;span&gt;77&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 右侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;!-- 帮助链接 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;help&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;help-left&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;panel-title&quot;&gt;帮助链接&lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;help-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-entry&quot; /&gt;</span><br><span class="line">                  入门指南</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-help&quot; /&gt;</span><br><span class="line">                  在线帮助手册</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-support&quot; /&gt;</span><br><span class="line">                  联系技术支持</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-add&quot; /&gt;</span><br><span class="line">                  添加链接</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;help-right&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;calendar&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;el-calendar /&gt; --&gt;</span><br><span class="line">                &lt;el-calendar /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 通知公告 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;通知公告&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;information-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CountTo from &#x27;vue-count-to&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CountTo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.dashboard &#123;</span><br><span class="line">  background: #f5f6f8;</span><br><span class="line">  width: 100%;</span><br><span class="line">  min-height: calc(100vh - 80px);</span><br><span class="line"></span><br><span class="line">  ::v-deep .el-calendar-day &#123;</span><br><span class="line">  height:  40px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar-table__row td,::v-deep .el-calendar-table tr td:first-child, ::v-deep .el-calendar-table__row td.prev&#123;</span><br><span class="line">  border:none;</span><br><span class="line"> &#125;</span><br><span class="line">.date-content &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .rest &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: rgb(250, 124, 77);</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .text&#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line"> display: inline-block;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">::v-deep .el-calendar-table td.is-selected .text&#123;</span><br><span class="line">   background: #409eff;</span><br><span class="line">   color: #fff;</span><br><span class="line">   border-radius: 50%;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar__header &#123;</span><br><span class="line">   display: none</span><br><span class="line"> &#125;</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    .right &#123;</span><br><span class="line">      width: 40%;</span><br><span class="line">      .panel &#123;</span><br><span class="line">        margin-left: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .panel &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line"></span><br><span class="line">      margin-top: 8px;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      .panel-title &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #383c4e;</span><br><span class="line">        font-weight: 500;</span><br><span class="line">      &#125;</span><br><span class="line">      // 用户信息样式</span><br><span class="line">      .user-info &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .avatar &#123;</span><br><span class="line">          width: 48px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          border-radius: 12px;</span><br><span class="line">          background-color: #d9d9d9;</span><br><span class="line">          line-height: 48px;</span><br><span class="line">          text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">         .username &#123;</span><br><span class="line">           width: 30px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           border-radius: 50%;</span><br><span class="line">           background: #04c9be;</span><br><span class="line">           color: #fff;</span><br><span class="line">           margin-right: 4px;</span><br><span class="line">         &#125;</span><br><span class="line">        .company-info &#123;</span><br><span class="line">          margin-left: 10px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          .title &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-family: PingFang SC, PingFang SC-Medium;</span><br><span class="line">            span &#123;</span><br><span class="line">              font-size: 12px;</span><br><span class="line">              background: #f5f6f8;</span><br><span class="line">              text-align: center;</span><br><span class="line">              padding: 2px 8px;</span><br><span class="line">              border-radius: 2px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .depart &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-weight: 400;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 代办样式</span><br><span class="line">      .todo-list &#123;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        .todo-item &#123;</span><br><span class="line">          width: 18%;</span><br><span class="line">          height: 90px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          padding: 10px;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          :nth-child(1) &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">          &#125;</span><br><span class="line">          :nth-child(2) &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 快捷入口</span><br><span class="line">      .quick-entry &#123;</span><br><span class="line">        margin-top: 16px;</span><br><span class="line">        display: flex;</span><br><span class="line">        .entry-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin-left: 60px;</span><br><span class="line">          &amp;:nth-child(1) &#123;</span><br><span class="line">            margin-left: 0px;</span><br><span class="line">          &#125;</span><br><span class="line">          .entry-icon &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            &amp;.approval &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/approval.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.social &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/social.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.salary &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/salary.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;.role &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/role.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.bpm &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/bpm.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          span &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-top: 8px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 图表数据</span><br><span class="line">      .chart-container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .chart-info &#123;</span><br><span class="line">         width: 240px;</span><br><span class="line">          margin-top: 10px;</span><br><span class="line">          .info-main &#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            :nth-child(1) &#123;</span><br><span class="line">              font-size: 14px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">            :nth-child(2) &#123;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              font-size: 30px;</span><br><span class="line">              color: #04c9be;</span><br><span class="line">              font-weight: 500;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .info-list &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            padding: 12px 15px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">            align-items: center;</span><br><span class="line">            .info-list-item &#123;</span><br><span class="line">              width: 50%;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              display: flex;</span><br><span class="line">              flex-direction: column;</span><br><span class="line"></span><br><span class="line">              :nth-child(1) &#123;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">                color: #697086;</span><br><span class="line">              &#125;</span><br><span class="line">              :nth-child(2) &#123;</span><br><span class="line">                margin-top: 10px;</span><br><span class="line">                font-size: 30px;</span><br><span class="line">                color: #383c4e;</span><br><span class="line">                font-weight: 500;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .chart &#123;</span><br><span class="line">          flex:1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 帮助链接</span><br><span class="line">      .help &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .help-left &#123;</span><br><span class="line">          width: 40%;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-right &#123;</span><br><span class="line">          flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-list &#123;</span><br><span class="line">          .help-block &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            width: 264px;</span><br><span class="line">            height: 54px;</span><br><span class="line">            padding: 17px 10px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            i &#123;</span><br><span class="line">              width: 14px;</span><br><span class="line">              height: 14px;</span><br><span class="line">              display: inline-block;</span><br><span class="line">              background-size: cover;</span><br><span class="line">              vertical-align: middle;</span><br><span class="line">            &#125;</span><br><span class="line">            i.icon-help &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/help.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-support &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/support.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-add &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/add.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-entry &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/entry.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 通知公告</span><br><span class="line">      .information-list &#123;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">        .information-list-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin:15px 0;</span><br><span class="line">          img &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 50%;</span><br><span class="line">          &#125;</span><br><span class="line">         .col &#123;</span><br><span class="line">           color: #8a97f8;</span><br><span class="line">         &#125;</span><br><span class="line">         div :nth-child(2) &#123;</span><br><span class="line">          color: #697086;</span><br><span class="line">          font-size: 14px;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>安装数字滚动插件-vue-count-to</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i vue-count-to</span><br></pre></td></tr></table></figure><ul><li>首页基本结构-代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- 左侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;!-- 个人信息 --&gt;</span><br><span class="line">          &lt;div class=&quot;user-info&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;avatar&quot; src=&quot;../../assets/common/defaultHead.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;company-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                江苏传智播客教育科技股份有限公司</span><br><span class="line">                &lt;span&gt;体验版&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;depart&quot;&gt;庆山 ｜ 传智播客-总裁办&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 代办 --&gt;</span><br><span class="line">          &lt;div class=&quot;todo-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;组织总人数&lt;/span&gt;</span><br><span class="line">              &lt;!-- 起始值 终点值  滚动时间 --&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;228&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;正式员工&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;334&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;合同待签署&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;345&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;待入职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;890&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待转正&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;117&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待离职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;234&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;接口总访问&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;789&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 快捷入口 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;快捷入口&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;quick-entry&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon approval&quot; /&gt;</span><br><span class="line">              &lt;span&gt;假期审批&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon social&quot; /&gt;</span><br><span class="line">              &lt;span&gt;社保管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon role&quot; /&gt;</span><br><span class="line">              &lt;span&gt;角色管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon salary&quot; /&gt;</span><br><span class="line">              &lt;span&gt;薪资设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon bpm&quot; /&gt;</span><br><span class="line">              &lt;span&gt;流程设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;社保申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;223&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;117&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;167&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;24&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;公积金申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;335&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;345&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;109&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;77&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 右侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;!-- 帮助链接 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;help&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;help-left&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;panel-title&quot;&gt;帮助链接&lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;help-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-entry&quot; /&gt;</span><br><span class="line">                  入门指南</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-help&quot; /&gt;</span><br><span class="line">                  在线帮助手册</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-support&quot; /&gt;</span><br><span class="line">                  联系技术支持</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-add&quot; /&gt;</span><br><span class="line">                  添加链接</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;help-right&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;calendar&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;el-calendar /&gt; --&gt;</span><br><span class="line">                &lt;el-calendar /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 通知公告 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;通知公告&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;information-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CountTo from &#x27;vue-count-to&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CountTo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.dashboard &#123;</span><br><span class="line">  background: #f5f6f8;</span><br><span class="line">  width: 100%;</span><br><span class="line">  min-height: calc(100vh - 80px);</span><br><span class="line"></span><br><span class="line">  ::v-deep .el-calendar-day &#123;</span><br><span class="line">  height:  40px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar-table__row td,::v-deep .el-calendar-table tr td:first-child, ::v-deep .el-calendar-table__row td.prev&#123;</span><br><span class="line">  border:none;</span><br><span class="line"> &#125;</span><br><span class="line">.date-content &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .rest &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: rgb(250, 124, 77);</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .text&#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line"> display: inline-block;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">::v-deep .el-calendar-table td.is-selected .text&#123;</span><br><span class="line">   background: #409eff;</span><br><span class="line">   color: #fff;</span><br><span class="line">   border-radius: 50%;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar__header &#123;</span><br><span class="line">   display: none</span><br><span class="line"> &#125;</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    .right &#123;</span><br><span class="line">      width: 40%;</span><br><span class="line">      .panel &#123;</span><br><span class="line">        margin-left: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .panel &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line"></span><br><span class="line">      margin-top: 8px;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      .panel-title &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #383c4e;</span><br><span class="line">        font-weight: 500;</span><br><span class="line">      &#125;</span><br><span class="line">      // 用户信息样式</span><br><span class="line">      .user-info &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .avatar &#123;</span><br><span class="line">          width: 48px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          border-radius: 12px;</span><br><span class="line">          background-color: #d9d9d9;</span><br><span class="line">          line-height: 48px;</span><br><span class="line">          text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">         .username &#123;</span><br><span class="line">           width: 30px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           border-radius: 50%;</span><br><span class="line">           background: #04c9be;</span><br><span class="line">           color: #fff;</span><br><span class="line">           margin-right: 4px;</span><br><span class="line">         &#125;</span><br><span class="line">        .company-info &#123;</span><br><span class="line">          margin-left: 10px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          .title &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-family: PingFang SC, PingFang SC-Medium;</span><br><span class="line">            span &#123;</span><br><span class="line">              font-size: 12px;</span><br><span class="line">              background: #f5f6f8;</span><br><span class="line">              text-align: center;</span><br><span class="line">              padding: 2px 8px;</span><br><span class="line">              border-radius: 2px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .depart &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-weight: 400;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 代办样式</span><br><span class="line">      .todo-list &#123;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        .todo-item &#123;</span><br><span class="line">          width: 18%;</span><br><span class="line">          height: 90px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          padding: 10px;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          :nth-child(1) &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">          &#125;</span><br><span class="line">          :nth-child(2) &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 快捷入口</span><br><span class="line">      .quick-entry &#123;</span><br><span class="line">        margin-top: 16px;</span><br><span class="line">        display: flex;</span><br><span class="line">        .entry-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin-left: 60px;</span><br><span class="line">          &amp;:nth-child(1) &#123;</span><br><span class="line">            margin-left: 0px;</span><br><span class="line">          &#125;</span><br><span class="line">          .entry-icon &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            &amp;.approval &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/approval.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.social &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/social.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.salary &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/salary.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;.role &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/role.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.bpm &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/bpm.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          span &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-top: 8px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 图表数据</span><br><span class="line">      .chart-container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .chart-info &#123;</span><br><span class="line">         width: 240px;</span><br><span class="line">          margin-top: 10px;</span><br><span class="line">          .info-main &#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            :nth-child(1) &#123;</span><br><span class="line">              font-size: 14px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">            :nth-child(2) &#123;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              font-size: 30px;</span><br><span class="line">              color: #04c9be;</span><br><span class="line">              font-weight: 500;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .info-list &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            padding: 12px 15px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">            align-items: center;</span><br><span class="line">            .info-list-item &#123;</span><br><span class="line">              width: 50%;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              display: flex;</span><br><span class="line">              flex-direction: column;</span><br><span class="line"></span><br><span class="line">              :nth-child(1) &#123;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">                color: #697086;</span><br><span class="line">              &#125;</span><br><span class="line">              :nth-child(2) &#123;</span><br><span class="line">                margin-top: 10px;</span><br><span class="line">                font-size: 30px;</span><br><span class="line">                color: #383c4e;</span><br><span class="line">                font-weight: 500;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .chart &#123;</span><br><span class="line">          flex:1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 帮助链接</span><br><span class="line">      .help &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .help-left &#123;</span><br><span class="line">          width: 40%;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-right &#123;</span><br><span class="line">          flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-list &#123;</span><br><span class="line">          .help-block &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            width: 264px;</span><br><span class="line">            height: 54px;</span><br><span class="line">            padding: 17px 10px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            i &#123;</span><br><span class="line">              width: 14px;</span><br><span class="line">              height: 14px;</span><br><span class="line">              display: inline-block;</span><br><span class="line">              background-size: cover;</span><br><span class="line">              vertical-align: middle;</span><br><span class="line">            &#125;</span><br><span class="line">            i.icon-help &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/help.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-support &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/support.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-add &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/add.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-entry &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/entry.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 通知公告</span><br><span class="line">      .information-list &#123;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">        .information-list-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin:15px 0;</span><br><span class="line">          img &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 50%;</span><br><span class="line">          &#125;</span><br><span class="line">         .col &#123;</span><br><span class="line">           color: #8a97f8;</span><br><span class="line">         &#125;</span><br><span class="line">         div :nth-child(2) &#123;</span><br><span class="line">          color: #697086;</span><br><span class="line">          font-size: 14px;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-首页—个人信息展示"><a href="#3-首页—个人信息展示" class="headerlink" title="3.首页—个人信息展示"></a>3.首页—个人信息展示</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022030345.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022031149.png" alt="image.png"></p><ul><li>在getters中开放公司名称和所在部门属性-代码位置(<strong>src/store/getters.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">sidebar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">sidebar</span>,</span><br><span class="line">  <span class="attr">device</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">device</span>,</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">token</span>,</span><br><span class="line">  <span class="attr">userId</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">userId</span>,</span><br><span class="line">  <span class="attr">avatar</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">staffPhoto</span>, <span class="comment">// 头像</span></span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">username</span>, <span class="comment">// 用户名称</span></span><br><span class="line">  <span class="attr">routes</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">routes</span>,</span><br><span class="line">  <span class="attr">company</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">company</span>, <span class="comment">// 公司名称</span></span><br><span class="line">  <span class="attr">departmentName</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">userInfo</span>.<span class="property">departmentName</span> <span class="comment">// 部门名称</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在首页将个人信息的数据替换成Vuex中的数据-代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- 左侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;!-- 个人信息 --&gt;</span><br><span class="line">          &lt;div class=&quot;user-info&quot;&gt;</span><br><span class="line">            &lt;img v-if=&quot;avatar&quot; class=&quot;avatar&quot; :src=&quot;avatar&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;span v-else class=&quot;username&quot;&gt;&#123;&#123; name?.charAt(0) &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;div class=&quot;company-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                江苏传智播客教育科技股份有限公司</span><br><span class="line">                &lt;span&gt;体验版&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;depart&quot;&gt;&#123;&#123; name &#125;&#125; ｜ &#123;&#123; company &#125;&#125;-&#123;&#123; departmentName &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 代办 --&gt;</span><br><span class="line">          &lt;div class=&quot;todo-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;组织总人数&lt;/span&gt;</span><br><span class="line">              &lt;!-- 起始值 终点值 动画时间 --&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;228&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;正式员工&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;334&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;合同待签署&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;345&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;待入职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;890&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待转正&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;117&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待离职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;234&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;接口总访问&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;789&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 快捷入口 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;快捷入口&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;quick-entry&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon approval&quot; /&gt;</span><br><span class="line">              &lt;span&gt;假期审批&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon social&quot; /&gt;</span><br><span class="line">              &lt;span&gt;社保管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon role&quot; /&gt;</span><br><span class="line">              &lt;span&gt;角色管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon salary&quot; /&gt;</span><br><span class="line">              &lt;span&gt;薪资设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon bpm&quot; /&gt;</span><br><span class="line">              &lt;span&gt;流程设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;社保申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;223&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;117&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;167&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;24&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;公积金申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;335&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;345&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;109&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;77&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 右侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;!-- 帮助链接 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;help&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;help-left&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;panel-title&quot;&gt;帮助链接&lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;help-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-entry&quot; /&gt;</span><br><span class="line">                  入门指南</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-help&quot; /&gt;</span><br><span class="line">                  在线帮助手册</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-support&quot; /&gt;</span><br><span class="line">                  联系技术支持</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-add&quot; /&gt;</span><br><span class="line">                  添加链接</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;help-right&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;calendar&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;el-calendar /&gt; --&gt;</span><br><span class="line">                &lt;el-calendar /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 通知公告 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;通知公告&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;information-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CountTo from &#x27;vue-count-to&#x27;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CountTo</span><br><span class="line">  &#125;,</span><br><span class="line">  // 计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([&#x27;name&#x27;, &#x27;avatar&#x27;, &#x27;company&#x27;, &#x27;departmentName&#x27;]) // 映射给了计算属性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.dashboard &#123;</span><br><span class="line">  background: #f5f6f8;</span><br><span class="line">  width: 100%;</span><br><span class="line">  min-height: calc(100vh - 80px);</span><br><span class="line"></span><br><span class="line">  ::v-deep .el-calendar-day &#123;</span><br><span class="line">  height:  40px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar-table__row td,::v-deep .el-calendar-table tr td:first-child, ::v-deep .el-calendar-table__row td.prev&#123;</span><br><span class="line">  border:none;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">.date-content &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .rest &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: rgb(250, 124, 77);</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .text&#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line"> display: inline-block;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">::v-deep .el-calendar-table td.is-selected .text&#123;</span><br><span class="line">   background: #409eff;</span><br><span class="line">   color: #fff;</span><br><span class="line">   border-radius: 50%;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar__header &#123;</span><br><span class="line">   display: none</span><br><span class="line"> &#125;</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    .right &#123;</span><br><span class="line">      width: 40%;</span><br><span class="line">      .panel &#123;</span><br><span class="line">        margin-left: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .panel &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line"></span><br><span class="line">      margin-top: 8px;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      .panel-title &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #383c4e;</span><br><span class="line">        font-weight: 500;</span><br><span class="line">      &#125;</span><br><span class="line">      // 用户信息样式</span><br><span class="line">      .user-info &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .avatar &#123;</span><br><span class="line">          width: 48px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          border-radius: 12px;</span><br><span class="line">          background-color: #d9d9d9;</span><br><span class="line">          line-height: 48px;</span><br><span class="line">          text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">         .username &#123;</span><br><span class="line">           width: 30px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           border-radius: 50%;</span><br><span class="line">           background: #04c9be;</span><br><span class="line">           color: #fff;</span><br><span class="line">           margin-right: 4px;</span><br><span class="line">         &#125;</span><br><span class="line">        .company-info &#123;</span><br><span class="line">          margin-left: 10px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          .title &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-family: PingFang SC, PingFang SC-Medium;</span><br><span class="line">            span &#123;</span><br><span class="line">              font-size: 12px;</span><br><span class="line">              background: #f5f6f8;</span><br><span class="line">              text-align: center;</span><br><span class="line">              padding: 2px 8px;</span><br><span class="line">              border-radius: 2px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .depart &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-weight: 400;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 代办样式</span><br><span class="line">      .todo-list &#123;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        .todo-item &#123;</span><br><span class="line">          width: 18%;</span><br><span class="line">          height: 90px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          padding: 10px;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          :nth-child(1) &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">          &#125;</span><br><span class="line">          :nth-child(2) &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 快捷入口</span><br><span class="line">      .quick-entry &#123;</span><br><span class="line">        margin-top: 16px;</span><br><span class="line">        display: flex;</span><br><span class="line">        .entry-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin-left: 60px;</span><br><span class="line">          &amp;:nth-child(1) &#123;</span><br><span class="line">            margin-left: 0px;</span><br><span class="line">          &#125;</span><br><span class="line">          .entry-icon &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            &amp;.approval &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/approval.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.social &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/social.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.salary &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/salary.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;.role &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/role.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.bpm &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/bpm.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          span &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-top: 8px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 图表数据</span><br><span class="line">      .chart-container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .chart-info &#123;</span><br><span class="line">         width: 240px;</span><br><span class="line">          margin-top: 10px;</span><br><span class="line">          .info-main &#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            :nth-child(1) &#123;</span><br><span class="line">              font-size: 14px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">            :nth-child(2) &#123;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              font-size: 30px;</span><br><span class="line">              color: #04c9be;</span><br><span class="line">              font-weight: 500;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .info-list &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            padding: 12px 15px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">            align-items: center;</span><br><span class="line">            .info-list-item &#123;</span><br><span class="line">              width: 50%;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              display: flex;</span><br><span class="line">              flex-direction: column;</span><br><span class="line"></span><br><span class="line">              :nth-child(1) &#123;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">                color: #697086;</span><br><span class="line">              &#125;</span><br><span class="line">              :nth-child(2) &#123;</span><br><span class="line">                margin-top: 10px;</span><br><span class="line">                font-size: 30px;</span><br><span class="line">                color: #383c4e;</span><br><span class="line">                font-weight: 500;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .chart &#123;</span><br><span class="line">          flex:1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 帮助链接</span><br><span class="line">      .help &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .help-left &#123;</span><br><span class="line">          width: 40%;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-right &#123;</span><br><span class="line">          flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-list &#123;</span><br><span class="line">          .help-block &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            width: 264px;</span><br><span class="line">            height: 54px;</span><br><span class="line">            padding: 17px 10px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            i &#123;</span><br><span class="line">              width: 14px;</span><br><span class="line">              height: 14px;</span><br><span class="line">              display: inline-block;</span><br><span class="line">              background-size: cover;</span><br><span class="line">              vertical-align: middle;</span><br><span class="line">            &#125;</span><br><span class="line">            i.icon-help &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/help.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-support &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/support.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-add &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/add.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-entry &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/entry.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 通知公告</span><br><span class="line">      .information-list &#123;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">        .information-list-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin:15px 0;</span><br><span class="line">          img &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 50%;</span><br><span class="line">          &#125;</span><br><span class="line">         .col &#123;</span><br><span class="line">           color: #8a97f8;</span><br><span class="line">         &#125;</span><br><span class="line">         div :nth-child(2) &#123;</span><br><span class="line">          color: #697086;</span><br><span class="line">          font-size: 14px;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-首页—企业数据获取"><a href="#4-首页—企业数据获取" class="headerlink" title="4.首页—企业数据获取"></a>4.首页—企业数据获取</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022031893.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022031396.png" alt="image.png"></p><ul><li>封装获取数据的API-代码位置(<strong>src/api/home.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取首页数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getHomeData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/data&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>初始化时获取数据，并替换企业数据-代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- 左侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;!-- 个人信息 --&gt;</span><br><span class="line">          &lt;div class=&quot;user-info&quot;&gt;</span><br><span class="line">            &lt;img v-if=&quot;avatar&quot; class=&quot;avatar&quot; :src=&quot;avatar&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;span v-else class=&quot;username&quot;&gt;&#123;&#123; name?.charAt(0) &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;div class=&quot;company-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                江苏传智播客教育科技股份有限公司</span><br><span class="line">                &lt;span&gt;体验版&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;depart&quot;&gt;&#123;&#123; name &#125;&#125; ｜ &#123;&#123; company &#125;&#125;-&#123;&#123; departmentName &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 代办 --&gt;</span><br><span class="line">          &lt;div class=&quot;todo-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;组织总人数&lt;/span&gt;</span><br><span class="line">              &lt;!-- 起始值 终点值 动画时间 --&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.employeeTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;正式员工&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.regularEmployeeTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;合同待签署&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.contractSignTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;待入职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.toBeEmployed&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待转正&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.toBeConfirmed&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待离职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.toBeDismissed&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;接口总访问&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.interfaceAccessTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 快捷入口 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;快捷入口&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;quick-entry&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon approval&quot; /&gt;</span><br><span class="line">              &lt;span&gt;假期审批&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon social&quot; /&gt;</span><br><span class="line">              &lt;span&gt;社保管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon role&quot; /&gt;</span><br><span class="line">              &lt;span&gt;角色管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon salary&quot; /&gt;</span><br><span class="line">              &lt;span&gt;薪资设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon bpm&quot; /&gt;</span><br><span class="line">              &lt;span&gt;流程设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;社保申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;!-- homeData: &#123;&#125; --&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;homeData.socialInsurance?.declarationTotal&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.socialInsurance?.toDeclareTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.socialInsurance?.declaringTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.socialInsurance?.declaredTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;公积金申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;homeData.providentFund?.declarationTotal&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.providentFund?.toDeclareTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.providentFund?.declaringTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.providentFund?.declaredTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 右侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;!-- 帮助链接 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;help&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;help-left&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;panel-title&quot;&gt;帮助链接&lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;help-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-entry&quot; /&gt;</span><br><span class="line">                  入门指南</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-help&quot; /&gt;</span><br><span class="line">                  在线帮助手册</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-support&quot; /&gt;</span><br><span class="line">                  联系技术支持</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-add&quot; /&gt;</span><br><span class="line">                  添加链接</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;help-right&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;calendar&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;el-calendar /&gt; --&gt;</span><br><span class="line">                &lt;el-calendar /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 通知公告 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;通知公告&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;information-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;@/assets/common/img.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &lt;span class=&quot;col&quot;&gt;朱继柳&lt;/span&gt; 发布了</span><br><span class="line">                  第1期“传智大讲堂”互动讨论获奖名单公布</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;2018-07-21 15:21:38&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CountTo from &#x27;vue-count-to&#x27;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; getHomeData &#125; from &#x27;@/api/home&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CountTo</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      homeData: &#123;&#125; // 存放首页数据的对象</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([&#x27;name&#x27;, &#x27;avatar&#x27;, &#x27;company&#x27;, &#x27;departmentName&#x27;]) // 映射给了计算属性</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getHomeData()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getHomeData() &#123;</span><br><span class="line">      this.homeData = await getHomeData()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.dashboard &#123;</span><br><span class="line">  background: #f5f6f8;</span><br><span class="line">  width: 100%;</span><br><span class="line">  min-height: calc(100vh - 80px);</span><br><span class="line"></span><br><span class="line">  ::v-deep .el-calendar-day &#123;</span><br><span class="line">  height:  40px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar-table__row td,::v-deep .el-calendar-table tr td:first-child, ::v-deep .el-calendar-table__row td.prev&#123;</span><br><span class="line">  border:none;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">.date-content &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .rest &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: rgb(250, 124, 77);</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .text&#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line"> display: inline-block;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">::v-deep .el-calendar-table td.is-selected .text&#123;</span><br><span class="line">   background: #409eff;</span><br><span class="line">   color: #fff;</span><br><span class="line">   border-radius: 50%;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar__header &#123;</span><br><span class="line">   display: none</span><br><span class="line"> &#125;</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    .right &#123;</span><br><span class="line">      width: 40%;</span><br><span class="line">      .panel &#123;</span><br><span class="line">        margin-left: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .panel &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line"></span><br><span class="line">      margin-top: 8px;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      .panel-title &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #383c4e;</span><br><span class="line">        font-weight: 500;</span><br><span class="line">      &#125;</span><br><span class="line">      // 用户信息样式</span><br><span class="line">      .user-info &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .avatar &#123;</span><br><span class="line">          width: 48px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          border-radius: 12px;</span><br><span class="line">          background-color: #d9d9d9;</span><br><span class="line">          line-height: 48px;</span><br><span class="line">          text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">         .username &#123;</span><br><span class="line">           width: 30px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           border-radius: 50%;</span><br><span class="line">           background: #04c9be;</span><br><span class="line">           color: #fff;</span><br><span class="line">           margin-right: 4px;</span><br><span class="line">         &#125;</span><br><span class="line">        .company-info &#123;</span><br><span class="line">          margin-left: 10px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          .title &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-family: PingFang SC, PingFang SC-Medium;</span><br><span class="line">            span &#123;</span><br><span class="line">              font-size: 12px;</span><br><span class="line">              background: #f5f6f8;</span><br><span class="line">              text-align: center;</span><br><span class="line">              padding: 2px 8px;</span><br><span class="line">              border-radius: 2px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .depart &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-weight: 400;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 代办样式</span><br><span class="line">      .todo-list &#123;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        .todo-item &#123;</span><br><span class="line">          width: 18%;</span><br><span class="line">          height: 90px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          padding: 10px;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          :nth-child(1) &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">          &#125;</span><br><span class="line">          :nth-child(2) &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 快捷入口</span><br><span class="line">      .quick-entry &#123;</span><br><span class="line">        margin-top: 16px;</span><br><span class="line">        display: flex;</span><br><span class="line">        .entry-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin-left: 60px;</span><br><span class="line">          &amp;:nth-child(1) &#123;</span><br><span class="line">            margin-left: 0px;</span><br><span class="line">          &#125;</span><br><span class="line">          .entry-icon &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            &amp;.approval &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/approval.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.social &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/social.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.salary &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/salary.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;.role &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/role.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.bpm &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/bpm.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          span &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-top: 8px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 图表数据</span><br><span class="line">      .chart-container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .chart-info &#123;</span><br><span class="line">         width: 240px;</span><br><span class="line">          margin-top: 10px;</span><br><span class="line">          .info-main &#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            :nth-child(1) &#123;</span><br><span class="line">              font-size: 14px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">            :nth-child(2) &#123;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              font-size: 30px;</span><br><span class="line">              color: #04c9be;</span><br><span class="line">              font-weight: 500;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .info-list &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            padding: 12px 15px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">            align-items: center;</span><br><span class="line">            .info-list-item &#123;</span><br><span class="line">              width: 50%;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              display: flex;</span><br><span class="line">              flex-direction: column;</span><br><span class="line"></span><br><span class="line">              :nth-child(1) &#123;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">                color: #697086;</span><br><span class="line">              &#125;</span><br><span class="line">              :nth-child(2) &#123;</span><br><span class="line">                margin-top: 10px;</span><br><span class="line">                font-size: 30px;</span><br><span class="line">                color: #383c4e;</span><br><span class="line">                font-weight: 500;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .chart &#123;</span><br><span class="line">          flex:1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 帮助链接</span><br><span class="line">      .help &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .help-left &#123;</span><br><span class="line">          width: 40%;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-right &#123;</span><br><span class="line">          flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-list &#123;</span><br><span class="line">          .help-block &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            width: 264px;</span><br><span class="line">            height: 54px;</span><br><span class="line">            padding: 17px 10px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            i &#123;</span><br><span class="line">              width: 14px;</span><br><span class="line">              height: 14px;</span><br><span class="line">              display: inline-block;</span><br><span class="line">              background-size: cover;</span><br><span class="line">              vertical-align: middle;</span><br><span class="line">            &#125;</span><br><span class="line">            i.icon-help &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/help.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-support &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/support.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-add &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/add.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-entry &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/entry.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 通知公告</span><br><span class="line">      .information-list &#123;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">        .information-list-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin:15px 0;</span><br><span class="line">          img &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 50%;</span><br><span class="line">          &#125;</span><br><span class="line">         .col &#123;</span><br><span class="line">           color: #8a97f8;</span><br><span class="line">         &#125;</span><br><span class="line">         div :nth-child(2) &#123;</span><br><span class="line">          color: #697086;</span><br><span class="line">          font-size: 14px;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-首页—通知消息获取"><a href="#5-首页—通知消息获取" class="headerlink" title="5.首页—通知消息获取"></a>5.首页—通知消息获取</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022031478.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022032659.png" alt="image.png"></p><ul><li>封装获取消息的API-代码位置(<strong>src/api/home.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getMessageList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/notice&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化时获取消息列表-代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- 左侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;!-- 个人信息 --&gt;</span><br><span class="line">          &lt;div class=&quot;user-info&quot;&gt;</span><br><span class="line">            &lt;img v-if=&quot;avatar&quot; class=&quot;avatar&quot; :src=&quot;avatar&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;span v-else class=&quot;username&quot;&gt;&#123;&#123; name?.charAt(0) &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;div class=&quot;company-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">                江苏传智播客教育科技股份有限公司</span><br><span class="line">                &lt;span&gt;体验版&lt;/span&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;depart&quot;&gt;&#123;&#123; name &#125;&#125; ｜ &#123;&#123; company &#125;&#125;-&#123;&#123; departmentName &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 代办 --&gt;</span><br><span class="line">          &lt;div class=&quot;todo-list&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;组织总人数&lt;/span&gt;</span><br><span class="line">              &lt;!-- 起始值 终点值 动画时间 --&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.employeeTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;正式员工&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.regularEmployeeTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;合同待签署&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.contractSignTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;待入职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.toBeEmployed&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待转正&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.toBeConfirmed&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;本月待离职&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.toBeDismissed&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;todo-item&quot;&gt;</span><br><span class="line">              &lt;span&gt;接口总访问&lt;/span&gt;</span><br><span class="line">              &lt;count-to</span><br><span class="line">                :start-val=&quot;0&quot;</span><br><span class="line">                :end-val=&quot;homeData.interfaceAccessTotal&quot;</span><br><span class="line">                :duration=&quot;1000&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 快捷入口 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;快捷入口&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;quick-entry&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon approval&quot; /&gt;</span><br><span class="line">              &lt;span&gt;假期审批&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon social&quot; /&gt;</span><br><span class="line">              &lt;span&gt;社保管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon role&quot; /&gt;</span><br><span class="line">              &lt;span&gt;角色管理&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon salary&quot; /&gt;</span><br><span class="line">              &lt;span&gt;薪资设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;entry-item&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;entry-icon bpm&quot; /&gt;</span><br><span class="line">              &lt;span&gt;流程设置&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;社保申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;!-- homeData: &#123;&#125; --&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;homeData.socialInsurance?.declarationTotal&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.socialInsurance?.toDeclareTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.socialInsurance?.declaringTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.socialInsurance?.declaredTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 图表数据 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;公积金申报数据&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;chart-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chart-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;info-main&quot;&gt;</span><br><span class="line">                &lt;span&gt;申报人数&lt;/span&gt;</span><br><span class="line">                &lt;count-to</span><br><span class="line">                  :start-val=&quot;0&quot;</span><br><span class="line">                  :end-val=&quot;homeData.providentFund?.declarationTotal&quot;</span><br><span class="line">                  :duration=&quot;1000&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;info-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;待申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.providentFund?.toDeclareTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;申报中(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.providentFund?.declaringTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;info-list-item&quot;&gt;</span><br><span class="line">                  &lt;span&gt;已申报(人)&lt;/span&gt;</span><br><span class="line">                  &lt;count-to</span><br><span class="line">                    :start-val=&quot;0&quot;</span><br><span class="line">                    :end-val=&quot;homeData.providentFund?.declaredTotal&quot;</span><br><span class="line">                    :duration=&quot;1000&quot;</span><br><span class="line">                  /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;chart&quot;&gt;</span><br><span class="line">              &lt;!-- 图表 --&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 右侧内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;!-- 帮助链接 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;help&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;help-left&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;panel-title&quot;&gt;帮助链接&lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;help-list&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-entry&quot; /&gt;</span><br><span class="line">                  入门指南</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-help&quot; /&gt;</span><br><span class="line">                  在线帮助手册</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-support&quot; /&gt;</span><br><span class="line">                  联系技术支持</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;help-block&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;icon-add&quot; /&gt;</span><br><span class="line">                  添加链接</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;help-right&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;calendar&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;el-calendar /&gt; --&gt;</span><br><span class="line">                &lt;el-calendar /&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 通知公告 --&gt;</span><br><span class="line">        &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;panel-title&quot;&gt;通知公告&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;information-list&quot;&gt;</span><br><span class="line">            &lt;div v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot; class=&quot;information-list-item&quot;&gt;</span><br><span class="line">              &lt;img :src=&quot;item.icon&quot; alt=&quot;&quot;&gt;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                  &#123;&#123; item.notice &#125;&#125;</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123; item.createTime &#125;&#125;&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CountTo from &#x27;vue-count-to&#x27;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; getHomeData, getMessageList &#125; from &#x27;@/api/home&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CountTo</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      homeData: &#123;&#125;, // 存放首页数据的对象</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([&#x27;name&#x27;, &#x27;avatar&#x27;, &#x27;company&#x27;, &#x27;departmentName&#x27;]) // 映射给了计算属性</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getHomeData()</span><br><span class="line">    this.getMessageList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getHomeData() &#123;</span><br><span class="line">      this.homeData = await getHomeData()</span><br><span class="line">    &#125;,</span><br><span class="line">    async getMessageList() &#123;</span><br><span class="line">      this.list = await getMessageList()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.dashboard &#123;</span><br><span class="line">  background: #f5f6f8;</span><br><span class="line">  width: 100%;</span><br><span class="line">  min-height: calc(100vh - 80px);</span><br><span class="line"></span><br><span class="line">  ::v-deep .el-calendar-day &#123;</span><br><span class="line">  height:  40px;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar-table__row td,::v-deep .el-calendar-table tr td:first-child, ::v-deep .el-calendar-table__row td.prev&#123;</span><br><span class="line">  border:none;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">.date-content &#123;</span><br><span class="line">  height: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 40px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .rest &#123;</span><br><span class="line">  color: #fff;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background: rgb(250, 124, 77);</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.date-content .text&#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 20px;</span><br><span class="line"> display: inline-block;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">::v-deep .el-calendar-table td.is-selected .text&#123;</span><br><span class="line">   background: #409eff;</span><br><span class="line">   color: #fff;</span><br><span class="line">   border-radius: 50%;</span><br><span class="line"> &#125;</span><br><span class="line"> ::v-deep .el-calendar__header &#123;</span><br><span class="line">   display: none</span><br><span class="line"> &#125;</span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    .right &#123;</span><br><span class="line">      width: 40%;</span><br><span class="line">      .panel &#123;</span><br><span class="line">        margin-left: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      :nth-child(1) &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .panel &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line"></span><br><span class="line">      margin-top: 8px;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      .panel-title &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #383c4e;</span><br><span class="line">        font-weight: 500;</span><br><span class="line">      &#125;</span><br><span class="line">      // 用户信息样式</span><br><span class="line">      .user-info &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .avatar &#123;</span><br><span class="line">          width: 48px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          border-radius: 12px;</span><br><span class="line">          background-color: #d9d9d9;</span><br><span class="line">          line-height: 48px;</span><br><span class="line">          text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">         .username &#123;</span><br><span class="line">           width: 30px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           border-radius: 50%;</span><br><span class="line">           background: #04c9be;</span><br><span class="line">           color: #fff;</span><br><span class="line">           margin-right: 4px;</span><br><span class="line">         &#125;</span><br><span class="line">        .company-info &#123;</span><br><span class="line">          margin-left: 10px;</span><br><span class="line">          height: 48px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          .title &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-family: PingFang SC, PingFang SC-Medium;</span><br><span class="line">            span &#123;</span><br><span class="line">              font-size: 12px;</span><br><span class="line">              background: #f5f6f8;</span><br><span class="line">              text-align: center;</span><br><span class="line">              padding: 2px 8px;</span><br><span class="line">              border-radius: 2px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .depart &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-weight: 400;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 代办样式</span><br><span class="line">      .todo-list &#123;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        .todo-item &#123;</span><br><span class="line">          width: 18%;</span><br><span class="line">          height: 90px;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          padding: 10px;</span><br><span class="line">          justify-content: space-around;</span><br><span class="line">          :nth-child(1) &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">          &#125;</span><br><span class="line">          :nth-child(2) &#123;</span><br><span class="line">            color: #383c4e;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 快捷入口</span><br><span class="line">      .quick-entry &#123;</span><br><span class="line">        margin-top: 16px;</span><br><span class="line">        display: flex;</span><br><span class="line">        .entry-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-direction: column;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin-left: 60px;</span><br><span class="line">          &amp;:nth-child(1) &#123;</span><br><span class="line">            margin-left: 0px;</span><br><span class="line">          &#125;</span><br><span class="line">          .entry-icon &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            background-size: cover;</span><br><span class="line">            &amp;.approval &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/approval.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.social &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/social.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.salary &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/salary.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;.role &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/role.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">             &amp;.bpm &#123;</span><br><span class="line">              background-image: url(&#x27;~@/assets/common/bpm.png&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          span &#123;</span><br><span class="line">            color: #697086;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-top: 8px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 图表数据</span><br><span class="line">      .chart-container &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .chart-info &#123;</span><br><span class="line">         width: 240px;</span><br><span class="line">          margin-top: 10px;</span><br><span class="line">          .info-main &#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            :nth-child(1) &#123;</span><br><span class="line">              font-size: 14px;</span><br><span class="line">              color: #697086;</span><br><span class="line">            &#125;</span><br><span class="line">            :nth-child(2) &#123;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              font-size: 30px;</span><br><span class="line">              color: #04c9be;</span><br><span class="line">              font-weight: 500;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          .info-list &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            padding: 12px 15px;</span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">            align-items: center;</span><br><span class="line">            .info-list-item &#123;</span><br><span class="line">              width: 50%;</span><br><span class="line">              margin-top: 10px;</span><br><span class="line">              display: flex;</span><br><span class="line">              flex-direction: column;</span><br><span class="line"></span><br><span class="line">              :nth-child(1) &#123;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">                color: #697086;</span><br><span class="line">              &#125;</span><br><span class="line">              :nth-child(2) &#123;</span><br><span class="line">                margin-top: 10px;</span><br><span class="line">                font-size: 30px;</span><br><span class="line">                color: #383c4e;</span><br><span class="line">                font-weight: 500;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .chart &#123;</span><br><span class="line">          flex:1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 帮助链接</span><br><span class="line">      .help &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        .help-left &#123;</span><br><span class="line">          width: 40%;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-right &#123;</span><br><span class="line">          flex: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        .help-list &#123;</span><br><span class="line">          .help-block &#123;</span><br><span class="line">            background: #f5f6f8;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            width: 264px;</span><br><span class="line">            height: 54px;</span><br><span class="line">            padding: 17px 10px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: #697086;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">            i &#123;</span><br><span class="line">              width: 14px;</span><br><span class="line">              height: 14px;</span><br><span class="line">              display: inline-block;</span><br><span class="line">              background-size: cover;</span><br><span class="line">              vertical-align: middle;</span><br><span class="line">            &#125;</span><br><span class="line">            i.icon-help &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/help.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-support &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/support.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-add &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/add.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">             i.icon-entry &#123;</span><br><span class="line">              background-image: url(&quot;~@/assets/common/entry.png&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 通知公告</span><br><span class="line">      .information-list &#123;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">        .information-list-item &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          align-items: center;</span><br><span class="line">          margin:15px 0;</span><br><span class="line">          img &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: 50%;</span><br><span class="line">          &#125;</span><br><span class="line">         .col &#123;</span><br><span class="line">           color: #8a97f8;</span><br><span class="line">         &#125;</span><br><span class="line">         div :nth-child(2) &#123;</span><br><span class="line">          color: #697086;</span><br><span class="line">          font-size: 14px;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-首页—echarts图表的应用"><a href="#6-首页—echarts图表的应用" class="headerlink" title="6.首页—echarts图表的应用"></a>6.首页—echarts图表的应用</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022032825.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022032556.png" alt="image.png"></p><ul><li>安装echarts包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i echarts </span><br><span class="line">$ yarn add echarts</span><br></pre></td></tr></table></figure><ul><li>放置两个图表的div，并给定高宽，代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;social&quot;</span> <span class="attr">style</span>=<span class="string">&quot; width: 100%; height:100% &quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 图表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;provident&quot;</span> <span class="attr">style</span>=<span class="string">&quot; width: 100%; height:100% &quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在mounted中初始化图表-代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import CountTo from &#x27;vue-count-to&#x27;</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; getHomeData, getMessageList &#125; from &#x27;@/api/home&#x27;</span><br><span class="line">import * as echarts from &#x27;echarts&#x27; // 引入所有的echarts</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CountTo</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      homeData: &#123;&#125;, // 存放首页数据的对象</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([&#x27;name&#x27;, &#x27;avatar&#x27;, &#x27;company&#x27;, &#x27;departmentName&#x27;]) // 映射给了计算属性</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    homeData() &#123;</span><br><span class="line">      console.log(this.homeData)</span><br><span class="line">      // 设置图表</span><br><span class="line">      this.social.setOption(&#123;</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &#x27;category&#x27;,</span><br><span class="line">          boundaryGap: false,</span><br><span class="line">          data: this.homeData.socialInsurance?.xAxis</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &#x27;value&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            data: this.homeData.socialInsurance?.yAxis,</span><br><span class="line">            type: &#x27;line&#x27;,</span><br><span class="line">            areaStyle: &#123;</span><br><span class="line">              color: &#x27;#04c9be&#x27; // 填充颜色</span><br><span class="line">            &#125;,</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">              color: &#x27;#04c9be&#x27; // 线的颜色</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">      this.provident.setOption(&#123;</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &#x27;category&#x27;,</span><br><span class="line">          boundaryGap: false,</span><br><span class="line">          data: this.homeData.providentFund?.xAxis</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &#x27;value&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            data: this.homeData.providentFund?.yAxis,</span><br><span class="line">            type: &#x27;line&#x27;,</span><br><span class="line">            areaStyle: &#123;</span><br><span class="line">              color: &#x27;#04c9be&#x27; // 填充颜色</span><br><span class="line">            &#125;,</span><br><span class="line">            lineStyle: &#123;</span><br><span class="line">              color: &#x27;#04c9be&#x27; // 线的颜色</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getHomeData()</span><br><span class="line">    this.getMessageList()</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // 获取展示的数据 设置给图表</span><br><span class="line">    // 监听homeData的变化</span><br><span class="line">    this.social = echarts.init(this.$refs.social) // 初始化echart</span><br><span class="line">    // data中没有声明 不是响应式</span><br><span class="line">    this.provident = echarts.init(this.$refs.provident)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getHomeData() &#123;</span><br><span class="line">      this.homeData = await getHomeData()</span><br><span class="line">    &#125;,</span><br><span class="line">    async getMessageList() &#123;</span><br><span class="line">      this.list = await getMessageList()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里为什么要用watch，因为获取数据在created，初始化图表在mounted，执行mouted时，数据并不能保证能够获取到，所以采用获取watch监听数据变化，只要数据变化，就设置图表的options</p><p>为什么 this.social和this.provident 并没有在data中声明，注意，在data中声明的表示它是响应式数据，即它的变化要引起template模板的刷新，但是这里我们只是记录一下当前图表的实例，实例本身会有setOption来影响图表的动态渲染，所以这里并没有必要在data中声明这两个变量</p></blockquote><h2 id="7-首页—echarts图表的按需导入"><a href="#7-首页—echarts图表的按需导入" class="headerlink" title="7.首页—echarts图表的按需导入"></a>7.首页—echarts图表的按需导入</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022032276.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022032728.png" alt="image.png"></p><ul><li>echarts图表的按需导入-代码位置(<strong>src/views/dashboard/index.vue</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/core&#x27;</span> <span class="comment">// 引入核心包</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LineChart</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/charts&#x27;</span> <span class="comment">// 引入折线图</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GridComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/components&#x27;</span> <span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CanvasRenderer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/renderers&#x27;</span></span><br><span class="line">echarts.<span class="title function_">use</span>([</span><br><span class="line">  <span class="title class_">LineChart</span>,</span><br><span class="line">  <span class="title class_">GridComponent</span>,</span><br><span class="line">  <span class="title class_">CanvasRenderer</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="8-路由模式—将路由改成history模式"><a href="#8-路由模式—将路由改成history模式" class="headerlink" title="8.路由模式—将路由改成history模式"></a>8.路由模式—将路由改成history模式</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022032051.png" alt="image.png"></p><ul><li>hash模式带#，#后面的地址变化不会引起页面的刷新</li><li><p>history没有#，地址变化会引起页面刷新，更符合页面地址的规范（开发环境不刷新-webpack配置）</p></li><li><p>将路由模式修改成history模式-代码位置(<strong>src/router/index.js)</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createRouter</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>, <span class="comment">// require service support</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="attr">routes</span>: constantRoutes <span class="comment">// 默认引入静态路由</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="9-打包分析—分析"><a href="#9-打包分析—分析" class="headerlink" title="9. 打包分析—分析"></a>9. 打包分析—分析</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022033137.png" alt="image.png"></p><ul><li>打包分析代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run preview -- --report</span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022033453.png" alt="image.png"></p><ul><li>去除main.js中对于mock.js的引用</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022033582.png" alt="image.png"> </p><h2 id="10-CDN加速"><a href="#10-CDN加速" class="headerlink" title="10.CDN加速"></a>10.CDN加速</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022033676.png" alt="image.png"></p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022033312.png" alt="image.png"></p><blockquote><p>将几个比较大的多在打包时排除，这样可以缩小整体打包的大小，保证js的加载速度，排除的包采用cdn的方式用外链去引入，cdn本名为分发服务器，意为更近的访问区间更快的访问速度将所需要的文件返回给客户端</p></blockquote><ul><li>webpack排除打包-代码位置(<strong>vue.config.js</strong>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">   <span class="comment">// provide the app&#x27;s title in webpack&#x27;s name field, so that</span></span><br><span class="line">   <span class="comment">// it can be accessed in index.html to inject the correct title.</span></span><br><span class="line">   <span class="attr">name</span>: name,</span><br><span class="line">   <span class="attr">resolve</span>: &#123;</span><br><span class="line">     <span class="attr">alias</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 配置需要排出的包</span></span><br><span class="line">   <span class="attr">externals</span>: &#123;</span><br><span class="line">     <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;element-ui&#x27;</span>: <span class="string">&#x27;ELEMENT&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;cos-js-sdk-v5&#x27;</span>: <span class="string">&#x27;COS&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><ul><li>在html中采用外链引入排除的文件-代码位置(<strong>public/index.html</strong>)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= webpackConfig.name %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.13/theme-chalk/index.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= webpackConfig.name %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/vue/2.6.14/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.13/index.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/cos-js-sdk-v5/dist/cos-js-sdk-v5.min.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-项目打包—安装nginx"><a href="#11-项目打包—安装nginx" class="headerlink" title="11.项目打包—安装nginx"></a>11.项目打包—安装nginx</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022033819.png" alt="image.png"></p><ul><li>执行打包命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build:prod</span><br><span class="line">$ yarn build:prod</span><br></pre></td></tr></table></figure><blockquote><p>得到dist文件包</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022034323.png" alt="image.png"></p><ul><li>安装nginx-mac</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install nginx  <span class="comment"># mac安装nginx</span></span><br></pre></td></tr></table></figure><ul><li>查看版本-mac</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -v  <span class="comment"># 查看版本</span></span><br></pre></td></tr></table></figure><ul><li>查看nginx-mac</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew info nginx <span class="comment">#查看nginx</span></span><br></pre></td></tr></table></figure><ul><li>nginx-windows版本</li></ul><blockquote><p>直接解压就可以直接使用</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022034029.png" alt="image.png"> </p><p>注意：<strong>mac安装</strong>可能遇到的问题</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022034596.png" alt="image.png"><br>遇到某个包发生错误，直接使用brew安装这个包，再安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install pcre2  <span class="comment"># 安装出错的包</span></span><br><span class="line">$ brew install nginx  <span class="comment"># 安装nginx</span></span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022034417.png" alt="image.png"><br>遇到这个错误，可以直接执行该命令，安装对应的工具，再安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  xcode-select --install  <span class="comment"># 安装对应工具</span></span><br><span class="line">$  brew install nginx  <span class="comment"># 安装nginx</span></span><br></pre></td></tr></table></figure><h2 id="12-mac-windows环境下nginx部署启动项目"><a href="#12-mac-windows环境下nginx部署启动项目" class="headerlink" title="12.mac/windows环境下nginx部署启动项目"></a>12.mac/windows环境下nginx部署启动项目</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022034722.png" alt="image.png"></p><ul><li>mac查看nginx的相关目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew info nginx <span class="comment">#查看nginx</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022034929.png" alt="image.png"></p><p>mac-nginx安装目录-/opt/homebrew/Cellar/nginx/1.23.3<br>mac-配置文件路-/opt/homebrew/etc/nginx/nginx.conf </p><ul><li>将打包的文件放置到安装目录/html下</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022034743.png" alt="image.png"></p><ul><li>mac-启动服务命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/homebrew/Cellar/nginx/1.23.3/bin/nginx <span class="comment">#启动命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>mac-重启服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/homebrew/Cellar/nginx/1.23.3/bin/nginx -s stop  <span class="comment">#停止命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意： mac版本的nginx的默认端口为8080</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022035816.png" alt="image.png"></p><ul><li>windows版本启动服务</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022035328.png" alt="image.png"> </p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022035685.png" alt="image.png"></p><ul><li>windows下停止服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./nginx -s stop  <span class="comment">#停止命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意: nginx默认的访问端口为80</p><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022036360.png" alt="image.png"></p><h2 id="13-nginx解决history的404问题"><a href="#13-nginx解决history的404问题" class="headerlink" title="13.nginx解决history的404问题"></a>13.nginx解决history的404问题</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022037731.png" alt="image.png"></p><ul><li>修改mac-windows配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">   try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置不论请求什么地址，都返回index.html</p></blockquote><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022037823.png" alt="image.png"><br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022037405.png" alt="image.png"><br>windows配置文件<br><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022037483.png" alt="image.png"></p><ul><li>mac重启服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/homebrew/Cellar/nginx/1.23.3/bin/nginx -s reload  <span class="comment">#重启</span></span><br></pre></td></tr></table></figure><ul><li>windows重启服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./nginx -s reload  <span class="comment">#重启</span></span><br></pre></td></tr></table></figure><h2 id="15-nginx配置代理解决生产环境跨域问题"><a href="#15-nginx配置代理解决生产环境跨域问题" class="headerlink" title="15.nginx配置代理解决生产环境跨域问题"></a>15.nginx配置代理解决生产环境跨域问题</h2><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022037985.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/8435673/1677862058407-f6b3725c-a57c-4711-acff-3088574d814b.png#averageHue=%23fdfdfd&amp;clientId=u0f540d11-b7d4-4&amp;from=paste&amp;height=270&amp;id=uf3364958&amp;name=image.png&amp;originHeight=540&amp;originWidth=1918&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=53889&amp;status=done&amp;style=none&amp;taskId=uda212cc3-d7e4-47b7-83bf-5b394037c9d&amp;title=&amp;width=959" alt="image.png"></p><ul><li>nginx解决生产环境跨域</li></ul><p><img src="https://izdloyl-blog.oss-cn-hangzhou.aliyuncs.com/202408022037384.png" alt="image.png"></p><ul><li>修改配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /prod-api  &#123;</span><br><span class="line">  proxy_pass https://heimahr-t.itheima.net;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mac重启服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/homebrew/Cellar/nginx/1.23.3/bin/nginx -s reload  <span class="comment">#重启</span></span><br></pre></td></tr></table></figure><ul><li>windows重启服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./nginx -s reload  <span class="comment">#重启</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3</title>
      <link href="/2024/08/01/frontEnd-vue3/"/>
      <url>/2024/08/01/frontEnd-vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><p><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /></p><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li>新的内置组件<ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, 后者会覆盖前者。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://v2.cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://cn.vuejs.org/assets/lifecycle_zh-CN.FtDDVyNA.png" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Demo&#x27;,</span><br><span class="line">setup()&#123;</span><br><span class="line">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">//自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">//通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue</span><br><span class="line">trigger() //告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><p><img src="https://cn.vuejs.org/assets/provide-inject.tIACH1Z-.png" style="width:600px" /></p><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> </div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><p>| 2.x 全局 API（<code>Vue</code>） | 3.x 实例 API (<code>app</code>)                        |<br>| ————————————- | —————————————————————- |<br>| Vue.config.xxxx           | app.config.xxxx                             |<br>| Vue.config.productionTip  | <strong style="color:#DD5145">移除</strong> |<br>| Vue.component             | app.component                               |<br>| Vue.directive             | app.directive                               |<br>| Vue.mixin                 | app.mixin                                   |<br>| Vue.use                   | app.use                                     |<br>| Vue.prototype             | app.config.globalProperties                 |</p></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue2</title>
      <link href="/2024/08/01/frontEnd-vue2/"/>
      <url>/2024/08/01/frontEnd-vue2/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二步使用混入：</p><p> ​    全局混入：<code>Vue.mixin(xxx)</code><br> ​    局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p> ​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p> ​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> ​            1).一个组件在用：放在组件自身即可。</p><p> ​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p> ​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p> ​    (1).父组件 ==&gt; 子组件 通信</p><p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p> ​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​        多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2></li><li><p>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</p></li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 *//* #nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;} *//* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -76px;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
